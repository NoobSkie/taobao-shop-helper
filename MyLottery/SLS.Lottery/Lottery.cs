namespace SLS
{
    using Shove;
    using System;
    using System.Collections;
    using System.Reflection;
    using System.Text;
    using System.Text.RegularExpressions;

    public class Lottery
    {
        public LotteryBase[] GetLotterys()
        {
            int num = 1;
            while (this[num] != null)
            {
                num++;
            }
            LotteryBase[] baseArray = new LotteryBase[num - 1];
            for (int i = 0; i < baseArray.Length; i++)
            {
                baseArray[i] = this[i + 1];
            }
            return baseArray;
        }

        public int GetMaxLotteryID()
        {
            return this[this.GetLotterys().Length].id;
        }

        public string GetPlayTypeName(int PlayType)
        {
            foreach (LotteryBase base2 in this.GetLotterys())
            {
                foreach (Lottery.PlayType type in base2.GetPlayTypeList())
                {
                    if (type.ID == PlayType)
                    {
                        return type.Name;
                    }
                }
            }
            return "";
        }

        public bool ValidID(int LotteryID)
        {
            return ((LotteryID >= 1) && (LotteryID <= this.GetMaxLotteryID()));
        }

        public LotteryBase this[string Name_or_Code_or_ID]
        {
            get
            {
                foreach (LotteryBase base2 in this.GetLotterys())
                {
                    if (((base2.name == Name_or_Code_or_ID) || (base2.code == Name_or_Code_or_ID)) || (base2.id.ToString() == Name_or_Code_or_ID))
                    {
                        return base2;
                    }
                }
                return null;
            }
        }

        public LotteryBase this[int Index]
        {
            get
            {
                switch (Index)
                {
                    case 1:
                        return new SFC();

                    case 2:
                        return new JQC();

                    case 3:
                        return new QXC();

                    case 4:
                        return new SZPL();

                    case 5:
                        return new SSQ();

                    case 6:
                        return new FC3D();

                    case 7:
                        return new LJ36X7();

                    case 8:
                        return new LJP62();

                    case 9:
                        return new TC22X5();

                    case 10:
                        return new FZ36X7();

                    case 11:
                        return new CTFC32X7();

                    case 12:
                        return new CTFC22X5();

                    case 13:
                        return new QLC();

                    case 14:
                        return new TC29X7();

                    case 15:
                        return new LCBQC();

                    case 0x10:
                        return new NYFC36X7();

                    case 0x11:
                        return new NYFC26X5();

                    case 0x12:
                        return new SJFC21X5();

                    case 0x13:
                        return new LCDC();

                    case 20:
                        return new SZFC35X7();

                    case 0x15:
                        return new ZJ15X5();

                    case 0x16:
                        return new ZJFC4J1();

                    case 0x17:
                        return new HNFC22X5();

                    case 0x18:
                        return new DFDLT();

                    case 0x19:
                        return new AHFC25X5();

                    case 0x1a:
                        return new AHFC15X5();

                    case 0x1b:
                        return new QLFC23X5();

                    case 0x1c:
                        return new CQSSC();

                    case 0x1d:
                        return new SHSSL();

                    case 30:
                        return new FJFC20X5();

                    case 0x1f:
                        return new AHFC5WS();

                    case 0x20:
                        return new SZKL8();

                    case 0x21:
                        return new BJKL8();

                    case 0x22:
                        return new SHKENO();

                    case 0x23:
                        return new FJTC31X7();

                    case 0x24:
                        return new FJTC36X7();

                    case 0x25:
                        return new FJTC22X5();

                    case 0x26:
                        return new LNFC35X7();

                    case 0x27:
                        return new TCCJDLT();

                    case 40:
                        return new ZJTC20X5();

                    case 0x29:
                        return new ZJTC6J1();

                    case 0x2a:
                        return new LJFC22X5();

                    case 0x2b:
                        return new LJTC6J1();

                    case 0x2c:
                        return new TTL22X5();

                    case 0x2d:
                        return new ZCDC();

                    case 0x2e:
                        return new TJFC15X5();

                    case 0x2f:
                        return new LNFC25X4();

                    case 0x30:
                        return new HBKLPK();

                    case 0x31:
                        return new SDKLPK();

                    case 50:
                        return new HeBKLPK();

                    case 0x33:
                        return new AHKLPK();

                    case 0x34:
                        return new HLJKLPK();

                    case 0x35:
                        return new LLKLPK();

                    case 0x36:
                        return new SXKLPK();

                    case 0x37:
                        return new ZJKLPK();

                    case 0x38:
                        return new SCKLPK();

                    case 0x39:
                        return new ShXKLPK();

                    case 0x3a:
                        return new DF6J1();

                    case 0x3b:
                        return new HD15X5();

                    case 60:
                        return new TTCX4();

                    case 0x3d:
                        return new JXSSC();

                    case 0x3e:
                        return new SYYDJ();

                    case 0x3f:
                        return new SZPL3();

                    case 0x40:
                        return new SZPL5();

                    case 0x41:
                        return new TC31X7();

                    case 0x42:
                        return new XJSSC();

                    case 0x43:
                        return new JXFC3D();

                    case 0x44:
                        return new HNKY481();

                    case 0x45:
                        return new ZYFC22X5();

                    case 70:
                        return new JX11X5();
                }
                return null;
            }
        }

        public class AHFC15X5 : Lottery.LotteryBase
        {
            public const string Code = "AHFC15X5";
            public const int ID = 0x1a;
            public const double MaxMoney = 6006.0;
            public const string Name = "安徽风采15选5";
            public const int PlayType_D = 0xa29;
            public const int PlayType_F = 0xa2a;
            public const string sID = "26";

            public AHFC15X5()
            {
                base.id = 0x1a;
                base.name = "安徽风采15选5";
                base.code = "AHFC15X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xa29)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,14}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xa29) ? 1 : 2))) && (strArray2.Length <= 3003.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0xa29);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x10);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xa29) && (play_type <= 0xa2a));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 4))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                double num3 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num7 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num7++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num7)
                                    {
                                        case 5:
                                            num++;
                                            num3 += WinMoneyList[0];
                                            WinMoneyNoWithTax += WinMoneyList[1];
                                            break;

                                        case 4:
                                            num2++;
                                            num3 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num3;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 15)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xa29, "单式"), new Lottery.PlayType(0xa2a, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class AHFC25X5 : Lottery.LotteryBase
        {
            public const string Code = "AHFC25X5";
            public const int ID = 0x19;
            public const double MaxMoney = 53130.0;
            public const string Name = "安徽风采25选5";
            public const int PlayType_D = 0x9c5;
            public const int PlayType_F = 0x9c6;
            public const string sID = "25";

            public AHFC25X5()
            {
                base.id = 0x19;
                base.name = "安徽风采25选5";
                base.code = "AHFC25X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x9c5)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,24}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x9c5) ? 1 : 2))) && (strArray2.Length <= 26565.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x9c5);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x1a);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x9c5) && (play_type <= 0x9c6));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num8 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num8++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num8)
                                    {
                                        case 5:
                                            num++;
                                            num4 += WinMoneyList[0];
                                            WinMoneyNoWithTax += WinMoneyList[1];
                                            break;

                                        case 4:
                                            num2++;
                                            num4 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                            break;

                                        case 3:
                                            num3++;
                                            num4 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x19)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x9c5, "单式"), new Lottery.PlayType(0x9c6, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class AHFC5WS : Lottery.LotteryBase
        {
            public const string Code = "AHFC5WS";
            public const int ID = 0x1f;
            public const double MaxMoney = 200000.0;
            public const string Name = "安徽风采5位数";
            public const int PlayType_D = 0xc1d;
            public const int PlayType_F = 0xc1e;
            public const string sID = "31";

            public AHFC5WS()
            {
                base.id = 0x1f;
                base.name = "安徽风采5位数";
                base.code = "AHFC5WS";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xc1d)
                {
                    str2 = @"(\d){5}";
                }
                else
                {
                    str2 = @"((\d)|([(]\d{1,10}[)])){5}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xc1d) ? 1 : 2))) && (strArray2.Length <= 100000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"([\d]){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0xc1d);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 5; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xc1d) && (play_type <= 0xc1e));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 8))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                double num5 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 5)
                            {
                                if (strArray2[j] == WinNumber)
                                {
                                    num++;
                                    num5 += WinMoneyList[0];
                                    WinMoneyNoWithTax += WinMoneyList[1];
                                }
                                else
                                {
                                    for (int k = 0; k <= 1; k++)
                                    {
                                        if (strArray2[j].Substring(k, 4) == WinNumber.Substring(k, 4))
                                        {
                                            num2++;
                                            num5 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                        }
                                    }
                                    for (int m = 0; m <= 2; m++)
                                    {
                                        if (strArray2[j].Substring(m, 3) == WinNumber.Substring(m, 3))
                                        {
                                            num3++;
                                            num5 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                        }
                                    }
                                    for (int n = 0; n <= 3; n++)
                                    {
                                        if (strArray2[j].Substring(n, 2) == WinNumber.Substring(n, 2))
                                        {
                                            num4++;
                                            num5 += WinMoneyList[6];
                                            WinMoneyNoWithTax += WinMoneyList[7];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num5;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xc1d, "单式"), new Lottery.PlayType(0xc1e, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = new string[5];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    list.Add(str5);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class AHKLPK : Lottery.LotteryBase
        {
            public const string Code = "AHKLPK";
            public const int ID = 0x33;
            public const double MaxMoney = 200000.0;
            public const string Name = "安徽快乐扑克";
            public const int PlayType_Mixed = 0x13ec;
            public const int PlayType_RX1_D = 0x13ed;
            public const int PlayType_RX1_F = 0x13ee;
            public const int PlayType_RX2_D = 0x13ef;
            public const int PlayType_RX2_F = 0x13f0;
            public const int PlayType_RX3_D = 0x13f1;
            public const int PlayType_RX3_F = 0x13f2;
            public const int PlayType_X4_ZhiD = 0x13f7;
            public const int PlayType_X4_ZhiF = 0x13f8;
            public const int PlayType_X4_Zu12 = 0x13f4;
            public const int PlayType_X4_Zu24 = 0x13f3;
            public const int PlayType_X4_Zu4 = 0x13f6;
            public const int PlayType_X4_Zu6 = 0x13f5;
            public const string sID = "51";

            public AHKLPK()
            {
                base.id = 0x33;
                base.name = "安徽快乐扑克";
                base.code = "AHKLPK";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x13ec)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if ((PlayType == 0x13ed) || (PlayType == 0x13ee))
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if ((PlayType == 0x13ef) || (PlayType == 0x13f0))
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if ((PlayType == 0x13f1) || (PlayType == 0x13f2))
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if (PlayType == 0x13f3)
                {
                    return this.AnalyseScheme_X4_Zu24(Content, PlayType);
                }
                if (PlayType == 0x13f4)
                {
                    return this.AnalyseScheme_X4_Zu12(Content, PlayType);
                }
                if (PlayType == 0x13f5)
                {
                    return this.AnalyseScheme_X4_Zu6(Content, PlayType);
                }
                if (PlayType == 0x13f6)
                {
                    return this.AnalyseScheme_X4_Zu4(Content, PlayType);
                }
                if ((PlayType != 0x13f7) && (PlayType != 0x13f8))
                {
                    return "";
                }
                return this.AnalyseScheme_X4_Zhi(Content, PlayType);
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[任选一单式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x13ed);
                    }
                    if (strArray[i].StartsWith("[任选一复式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x13ee);
                    }
                    if (strArray[i].StartsWith("[任选二单式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x13ef);
                    }
                    if (strArray[i].StartsWith("[任选二复式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x13f0);
                    }
                    if (strArray[i].StartsWith("[任选三单式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x13f1);
                    }
                    if (strArray[i].StartsWith("[任选三复式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x13f2);
                    }
                    if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu24(base.FilterPreFix(strArray[i]), 0x13f3);
                    }
                    if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu12(base.FilterPreFix(strArray[i]), 0x13f4);
                    }
                    if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu6(base.FilterPreFix(strArray[i]), 0x13f5);
                    }
                    if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu4(base.FilterPreFix(strArray[i]), 0x13f6);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x13ed)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x13ee))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x13ed))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x13ef)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x13f0))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x13ef))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x13f1)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x13f2))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x13f1))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x13f7)
                {
                    str2 = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i].ToString());
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x13f7) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu12(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu12(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu24(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3,12}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu24(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu4(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu6(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu6(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex("((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                return "";
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x13ec) && (play_type <= 0x13f8));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 20))
                {
                    return -3.0;
                }
                if (!this.AnalyseWinNumber(WinNumber))
                {
                    return -5.0;
                }
                int winCount = 0;
                int num2 = 0;
                int num3 = 0;
                if (PlayType == 0x13ec)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13]);
                }
                if ((PlayType == 0x13ed) || (PlayType == 0x13ee))
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref winCount);
                }
                if ((PlayType == 0x13ef) || (PlayType == 0x13f0))
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref winCount);
                }
                if ((PlayType == 0x13f1) || (PlayType == 0x13f2))
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num2, ref num3);
                }
                if ((PlayType == 0x13f7) || (PlayType == 0x13f8))
                {
                    return this.ComputeWin_X4_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], ref num2, ref num3);
                }
                if (PlayType == 0x13f3)
                {
                    return this.ComputeWin_X4_Zu24(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref winCount);
                }
                if (PlayType == 0x13f4)
                {
                    return this.ComputeWin_X4_Zu12(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], ref winCount);
                }
                if (PlayType == 0x13f5)
                {
                    return this.ComputeWin_X4_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], ref winCount);
                }
                if (PlayType == 0x13f6)
                {
                    return this.ComputeWin_X4_Zu4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x12], WinMoneyList[0x13], ref winCount);
                }
                return -4.0;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8, double WinMoney9, double WinMoneyNoWithTax9, double WinMoney10, double WinMoneyNoWithTax10)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int winCount = 0;
                    int num14 = 0;
                    int num15 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[任选一单式]") || strArray[i].StartsWith("[任选一复式]"))
                    {
                        num += this.ComputeWin_RX1(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选二单式]") || strArray[i].StartsWith("[任选二复式]"))
                    {
                        num += this.ComputeWin_RX2(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选三单式]") || strArray[i].StartsWith("[任选三复式]"))
                    {
                        num += this.ComputeWin_RX3(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num4 += num14;
                        num5 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四直选单式]") || strArray[i].StartsWith("[选四直选复式]"))
                    {
                        num += this.ComputeWin_X4_Zhi(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, WinMoney6, WinMoneyNoWithTax6, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += num14;
                        num7 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        num += this.ComputeWin_X4_Zu24(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney7, WinMoneyNoWithTax7, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num8 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        num += this.ComputeWin_X4_Zu12(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney8, WinMoneyNoWithTax8, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num9 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        num += this.ComputeWin_X4_Zu6(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney9, WinMoneyNoWithTax9, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num10 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        num += this.ComputeWin_X4_Zu4(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney10, WinMoneyNoWithTax10, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num11 += winCount;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选一" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选二" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中4 " + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中3 " + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选24 " + num8.ToString() + "注");
                }
                if (num9 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选12 " + num9.ToString() + "注");
                }
                if (num10 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选6 " + num10.ToString() + "注");
                }
                if (num11 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选4 " + num11.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        WinCount++;
                                        num += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选一" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                int num = 0;
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                if (num == 2)
                                {
                                    WinCount++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选二" + ((int) WinCount).ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 3:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 2:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 4:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 3:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中4 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中3 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zu12(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu12(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选12 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu24(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu24(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选24 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选4 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu6(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选6 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private string FilterRepeated(string NumberPart)
            {
                string number = "";
                string[] strArray = NumberPart.Split(new char[] { ',' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (("23456789AJQK10".IndexOf(strArray[i]) >= 0) && (number.IndexOf(strArray[i]) == -1))
                    {
                        number = number + strArray[i] + ",";
                    }
                }
                number = number.Substring(0, number.Length - 1);
                return this.SortKLPK(number);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x13ec, "混合投注"), new Lottery.PlayType(0x13ed, "任选一单式"), new Lottery.PlayType(0x13ee, "任选一复式"), new Lottery.PlayType(0x13ef, "任选二单式"), new Lottery.PlayType(0x13f0, "任选二复式"), new Lottery.PlayType(0x13f1, "任选三单式"), new Lottery.PlayType(0x13f2, "任选三复式"), new Lottery.PlayType(0x13f3, "选四组选24"), new Lottery.PlayType(0x13f4, "选四组选12"), new Lottery.PlayType(0x13f5, "选四组选6"), new Lottery.PlayType(0x13f6, "选四组选4"), new Lottery.PlayType(0x13f7, "选四直选单式"), new Lottery.PlayType(0x13f8, "选四组选复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            private string SortKLPK(string Number)
            {
                string[] strArray = new string[13];
                string str = "";
                string[] strArray2 = Number.Split(new char[] { ',' });
                for (int i = 0; i < strArray2.Length; i++)
                {
                    if ("23456789AJQK10".IndexOf(strArray2[i]) >= 0)
                    {
                        if (strArray2[i] == "A")
                        {
                            strArray[0] = "A";
                        }
                        else if (strArray2[i] == "2")
                        {
                            strArray[1] = "2";
                        }
                        else if (strArray2[i] == "3")
                        {
                            strArray[2] = "3";
                        }
                        else if (strArray2[i] == "4")
                        {
                            strArray[3] = "4";
                        }
                        else if (strArray2[i] == "5")
                        {
                            strArray[4] = "5";
                        }
                        else if (strArray2[i] == "6")
                        {
                            strArray[5] = "6";
                        }
                        else if (strArray2[i] == "7")
                        {
                            strArray[6] = "7";
                        }
                        else if (strArray2[i] == "8")
                        {
                            strArray[7] = "8";
                        }
                        else if (strArray2[i] == "9")
                        {
                            strArray[8] = "9";
                        }
                        else if (strArray2[i] == "10")
                        {
                            strArray[9] = "10";
                        }
                        else if (strArray2[i] == "J")
                        {
                            strArray[10] = "J";
                        }
                        else if (strArray2[i] == "Q")
                        {
                            strArray[11] = "Q";
                        }
                        else if (strArray2[i] == "K")
                        {
                            strArray[12] = "K";
                        }
                    }
                }
                for (int j = 0; j < 13; j++)
                {
                    if (strArray[j] != null)
                    {
                        str = str + strArray[j] + ",";
                    }
                }
                return str.Substring(0, str.Length - 1);
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x13ec)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x13ed) || (PlayType == 0x13ee))
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x13ef) || (PlayType == 0x13f0))
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x13f1) || (PlayType == 0x13f2))
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x13f3)
                {
                    return this.ToSingle_X4_Zu24(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x13f4)
                {
                    return this.ToSingle_X4_Zu12(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x13f5)
                {
                    return this.ToSingle_X4_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x13f6)
                {
                    return this.ToSingle_X4_Zu4(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x13f7) && (PlayType != 0x13f8))
                {
                    return null;
                }
                return this.ToSingle_X4_Zhi(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[任选1单式]") || Number.StartsWith("[任选1复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX1(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选2单式]") || Number.StartsWith("[任选2复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX2(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选3单式]") || Number.StartsWith("[任选3复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX3(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选24]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu24(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选12]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu12(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选6]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu6(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选4]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu4(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (!Number.StartsWith("[选4直选单式]") && !Number.StartsWith("[选4直选复式]"))
                {
                    return null;
                }
                return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zhi(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                int num = 0;
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                    if (strArray[i] != "_")
                    {
                        Regex regex2 = new Regex("((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        if (regex2.IsMatch(strArray[i]))
                        {
                            num++;
                        }
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    if (str != "_")
                    {
                        str = str + ",_,_,_";
                        list.Add(str);
                    }
                }
                for (int m = 0; m < strArray[1].Length; m++)
                {
                    string str2 = strArray[1][m].ToString();
                    if (str2 != "_")
                    {
                        str2 = "_," + str2 + ",_,_";
                        list.Add(str2);
                    }
                }
                for (int n = 0; n < strArray[2].Length; n++)
                {
                    string str3 = strArray[2][n].ToString();
                    if (str3 != "_")
                    {
                        str3 = "_,_," + str3 + ",_";
                        list.Add(str3);
                    }
                }
                for (int num7 = 0; num7 < strArray[3].Length; num7++)
                {
                    string str4 = strArray[3][num7].ToString();
                    if (str4 != "_")
                    {
                        str4 = "_,_,_," + str4;
                        list.Add(str4);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num8 = 0; num8 < list.Count; num8++)
                {
                    strArray2[num8] = list[num8].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        string[] strArray3;
                        IntPtr ptr;
                        (strArray3 = strArray)[(int) (ptr = (IntPtr) j)] = strArray3[(int) ptr] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 5)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        strArray[j] = strArray[j] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 6)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu12(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu24(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                string[] strArray = CanonicalNumber.Split(new char[] { ',' });
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int i = 0; i < (length - 3); i++)
                {
                    for (int k = i + 1; k < (length - 2); k++)
                    {
                        for (int m = k + 1; m < (length - 1); m++)
                        {
                            for (int n = m + 1; n < length; n++)
                            {
                                list.Add(strArray[i].ToString() + "," + strArray[k].ToString() + "," + strArray[m].ToString() + "," + strArray[n].ToString());
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu4(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2])) && ((Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3]))) && (((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3]))))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[3]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]))) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3])))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }
        }

        public class BJKL8 : Lottery.LotteryBase
        {
            public const string Code = "BJKL8";
            public const int ID = 0x21;
            public const double MaxMoney = 2.0;
            public const string Name = "北京快乐8";
            public const int PlayType_D = 0xce5;
            public const string sID = "33";

            public BJKL8()
            {
                base.id = 0x21;
                base.name = "北京快乐8";
                base.code = "BJKL8";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"(\d\d\s){0,7}\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string[] strArray = this.FilterRepeated(Number.Split(new char[] { ' ' }));
                return ((strArray != null) && (strArray.Length == 20));
            }

            public override string BuildNumber(int Num, int Type)
            {
                if ((((Type != 8) && (Type != 7)) && ((Type != 6) && (Type != 5))) && (((Type != 4) && (Type != 3)) && ((Type != 2) && (Type != 1))))
                {
                    Type = 8;
                }
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < Type; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x51);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return (play_type == 0xce5);
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x3b)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 50))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                int num12 = 0;
                int num13 = 0;
                int num14 = 0;
                int num15 = 0;
                int num16 = 0;
                int num17 = 0;
                int num18 = 0;
                int num19 = 0;
                int num20 = 0;
                int num21 = 0;
                int num22 = 0;
                int num23 = 0;
                int num24 = 0;
                int num25 = 0;
                double num26 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, 0xce5);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            int num29 = 0;
                            int num30 = 0;
                            int num31 = 0;
                            int num32 = 0;
                            int num33 = 0;
                            int num34 = 0;
                            int num35 = 0;
                            int num36 = 0;
                            int num37 = 0;
                            int num38 = 0;
                            int num39 = 0;
                            int num40 = 0;
                            int num41 = 0;
                            int num42 = 0;
                            int num43 = 0;
                            int num44 = 0;
                            int num45 = 0;
                            int num46 = 0;
                            int num47 = 0;
                            int num48 = 0;
                            int num49 = 0;
                            int num50 = 0;
                            int num51 = 0;
                            int num52 = 0;
                            int num53 = 0;
                            double num54 = 0.0;
                            double winMoneyNoWithTax = 0.0;
                            switch ((_String.StringAt(strArray2[j], ' ') + 1))
                            {
                                case 1:
                                    num54 = this.ComputeWin_1(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x30], WinMoneyList[0x31], ref num53);
                                    break;

                                case 2:
                                    num54 = this.ComputeWin_2(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x2e], WinMoneyList[0x2f], ref num52);
                                    break;

                                case 3:
                                    num54 = this.ComputeWin_3(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x2a], WinMoneyList[0x2b], WinMoneyList[0x2c], WinMoneyList[0x2d], ref num50, ref num51);
                                    break;

                                case 4:
                                    num54 = this.ComputeWin_4(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x24], WinMoneyList[0x25], WinMoneyList[0x26], WinMoneyList[0x27], WinMoneyList[40], WinMoneyList[0x29], ref num47, ref num48, ref num49);
                                    break;

                                case 5:
                                    num54 = this.ComputeWin_5(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[30], WinMoneyList[0x1f], WinMoneyList[0x20], WinMoneyList[0x21], WinMoneyList[0x22], WinMoneyList[0x23], ref num44, ref num45, ref num46);
                                    break;

                                case 6:
                                    num54 = this.ComputeWin_6(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x16], WinMoneyList[0x17], WinMoneyList[0x18], WinMoneyList[0x19], WinMoneyList[0x1a], WinMoneyList[0x1b], WinMoneyList[0x1c], WinMoneyList[0x1d], ref num40, ref num41, ref num42, ref num43);
                                    break;

                                case 7:
                                    num54 = this.ComputeWin_7(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13], WinMoneyList[20], WinMoneyList[0x15], ref num35, ref num36, ref num37, ref num38, ref num39);
                                    break;

                                case 8:
                                    num54 = this.ComputeWin_8(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], ref num29, ref num30, ref num31, ref num32, ref num33, ref num34);
                                    break;

                                default:
                                    goto Label_0405;
                            }
                            num += num29;
                            num2 += num30;
                            num3 += num31;
                            num4 += num32;
                            num5 += num33;
                            num6 += num34;
                            num7 += num35;
                            num8 += num36;
                            num9 += num37;
                            num10 += num38;
                            num11 += num39;
                            num12 += num40;
                            num13 += num41;
                            num14 += num42;
                            num15 += num43;
                            num16 += num44;
                            num17 += num45;
                            num18 += num46;
                            num19 += num47;
                            num20 += num48;
                            num21 += num49;
                            num22 += num50;
                            num23 += num51;
                            num24 += num52;
                            num25 += num53;
                            num26 += num54;
                            WinMoneyNoWithTax += winMoneyNoWithTax;
                        Label_0405:;
                        }
                    }
                }
                Description = "";
                if (num > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中8奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中7奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中6奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中5奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中4奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中0奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中7奖" + num7.ToString() + "注";
                }
                if (num8 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中6奖" + num8.ToString() + "注";
                }
                if (num9 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中5奖" + num9.ToString() + "注";
                }
                if (num10 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中4奖" + num10.ToString() + "注";
                }
                if (num11 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中0奖" + num11.ToString() + "注";
                }
                if (num12 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选6中6奖" + num12.ToString() + "注";
                }
                if (num13 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选6中5奖" + num13.ToString() + "注";
                }
                if (num14 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选6中4奖" + num14.ToString() + "注";
                }
                if (num15 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选6中3奖" + num15.ToString() + "注";
                }
                if (num16 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选5中5奖" + num16.ToString() + "注";
                }
                if (num17 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选5中4奖" + num17.ToString() + "注";
                }
                if (num18 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选5中3奖" + num18.ToString() + "注";
                }
                if (num19 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选4中4奖" + num19.ToString() + "注";
                }
                if (num20 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选4中3奖" + num20.ToString() + "注";
                }
                if (num21 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选4中2奖" + num21.ToString() + "注";
                }
                if (num22 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选3中3奖" + num22.ToString() + "注";
                }
                if (num23 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选3中2奖" + num23.ToString() + "注";
                }
                if (num24 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选2中2奖" + num24.ToString() + "注";
                }
                if (num25 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选2中2奖" + num25.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num26;
            }

            private double ComputeWin_1(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int Description1)
            {
                Description1 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                if (WinNumber.IndexOf(Number) >= 0)
                {
                    Description1++;
                    num += WinMoney1;
                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                }
                return num;
            }

            private double ComputeWin_2(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int Description1)
            {
                Description1 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[2];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                if (num2 == 2)
                {
                    Description1++;
                    num += WinMoney1;
                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                }
                return num;
            }

            private double ComputeWin_3(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int Description1, ref int Description2)
            {
                Description1 = 0;
                Description2 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[3];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 3:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 2:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;
                }
                return num;
            }

            private double ComputeWin_4(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, ref int Description1, ref int Description2, ref int Description3)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[4];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 4:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 3:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 2:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;
                }
                return num;
            }

            private double ComputeWin_5(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, ref int Description1, ref int Description2, ref int Description3)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[5];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 5:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 4:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 3:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;
                }
                return num;
            }

            private double ComputeWin_6(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, ref int Description1, ref int Description2, ref int Description3, ref int Description4)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                Description4 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[6];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 6; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 6:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 5:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 4:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;

                    case 3:
                        Description4++;
                        num += WinMoney4;
                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                        return num;
                }
                return num;
            }

            private double ComputeWin_7(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, ref int Description1, ref int Description2, ref int Description3, ref int Description4, ref int Description5)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                Description4 = 0;
                Description5 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[7];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 7; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 7:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 6:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 5:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;

                    case 4:
                        Description4++;
                        num += WinMoney4;
                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                        return num;

                    case 0:
                        Description5++;
                        num += WinMoney5;
                        WinMoneyNoWithTax += WinMoneyNoWithTax5;
                        return num;
                }
                return num;
            }

            private double ComputeWin_8(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, ref int Description1, ref int Description2, ref int Description3, ref int Description4, ref int Description5, ref int Description6)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                Description4 = 0;
                Description5 = 0;
                Description6 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[8];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d\s)(?<R7>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 8; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 8:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 7:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 6:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;

                    case 5:
                        Description4++;
                        num += WinMoney4;
                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                        return num;

                    case 4:
                        Description5++;
                        num += WinMoney5;
                        WinMoneyNoWithTax += WinMoneyNoWithTax5;
                        return num;

                    case 0:
                        Description6++;
                        num += WinMoney6;
                        WinMoneyNoWithTax += WinMoneyNoWithTax6;
                        return num;
                }
                return num;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 80)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xce5, "代购") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 1)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; (i < strArray.Length) && (i < 8); i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                return new string[] { CanonicalNumber };
            }
        }

        public class CQSSC : Lottery.LotteryBase
        {
            public const string Code = "SHSSL";
            public const int ID = 0x1c;
            public const double MaxMoney = 200000.0;
            public const string Name = "重庆时时彩";
            public const int PlayType_2X_ZuB = 0xafa;
            public const int PlayType_2X_ZuBD = 0xafb;
            public const int PlayType_2X_ZuD = 0xaf7;
            public const int PlayType_2X_ZuF = 0xaf8;
            public const int PlayType_2X_ZuFW = 0xaf9;
            public const int PlayType_3X_B = 0xafc;
            public const int PlayType_3X_ZHFS = 0xb01;
            public const int PlayType_3X_Zu3D = 0xafd;
            public const int PlayType_3X_Zu3F = 0xafe;
            public const int PlayType_3X_Zu6D = 0xaff;
            public const int PlayType_3X_Zu6F = 0xb00;
            public const int PlayType_3X_ZuB = 0xb02;
            public const int PlayType_3X_ZuBD = 0xb03;
            public const int PlayType_5X_TXD = 0xaf5;
            public const int PlayType_5X_TXF = 0xaf6;
            public const int PlayType_D = 0xaf1;
            public const int PlayType_DX = 0xaf4;
            public const int PlayType_F = 0xaf2;
            public const int PlayType_Mixed = 0xaf0;
            public const int PlayType_ZH = 0xaf3;
            public const string sID = "28";

            public CQSSC()
            {
                base.id = 0x1c;
                base.name = "重庆时时彩";
                base.code = "CQSSC";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0xaf0)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if (PlayType == 0xaf1)
                {
                    return this.AnalyseScheme_D(Content, PlayType);
                }
                if (PlayType == 0xaf2)
                {
                    return this.AnalyseScheme_F(Content, PlayType);
                }
                if (PlayType == 0xaf3)
                {
                    return this.AnalyseScheme_ZH(Content, PlayType);
                }
                if (PlayType == 0xaf4)
                {
                    return this.AnalyseScheme_DX(Content, PlayType);
                }
                if ((PlayType == 0xaf5) || (PlayType == 0xaf6))
                {
                    return this.AnalyseScheme_5X_TX(Content, PlayType);
                }
                if ((PlayType == 0xaf7) || (PlayType == 0xaf8))
                {
                    return this.AnalyseScheme_2X_ZuD_ZuF(Content, PlayType);
                }
                if (PlayType == 0xaf9)
                {
                    return this.AnalyseScheme_2X_ZuFW(Content, PlayType);
                }
                if (PlayType == 0xafa)
                {
                    return this.AnalyseScheme_2X_ZuB(Content, PlayType);
                }
                if (PlayType == 0xafb)
                {
                    return this.AnalyseScheme_2X_ZuBD(Content, PlayType);
                }
                if (PlayType == 0xafc)
                {
                    return this.AnalyseScheme_3X_B(Content, PlayType);
                }
                if (PlayType == 0xafd)
                {
                    return this.AnalyseScheme_3X_Zu3D(Content, PlayType);
                }
                if (PlayType == 0xafe)
                {
                    return this.AnalyseScheme_3X_Zu3F(Content, PlayType);
                }
                if (PlayType == 0xaff)
                {
                    return this.AnalyseScheme_3X_Zu6D(Content, PlayType);
                }
                if (PlayType == 0xb00)
                {
                    return this.AnalyseScheme_3X_Zu6F(Content, PlayType);
                }
                if (PlayType == 0xb01)
                {
                    return this.AnalyseScheme_3X_ZHFS(Content, PlayType);
                }
                if (PlayType == 0xb02)
                {
                    return this.AnalyseScheme_3X_ZuB(Content, PlayType);
                }
                if (PlayType == 0xb03)
                {
                    return this.AnalyseScheme_3X_ZuBD(Content, PlayType);
                }
                return "";
            }

            private string AnalyseScheme_2X_ZuB(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuB(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2X_ZuBD(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuBD(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2X_ZuD_ZuF(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xaf7)
                {
                    str2 = @"(\d){2}";
                }
                else
                {
                    str2 = @"(\d){3,10}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuD_ZuF(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xaf7) ? 1 : 2)))
                        {
                            if (this.FilterRepeated(base.Sort(match.Value)).Length == 2)
                            {
                                if (PlayType != 0xaf8)
                                {
                                    str = str + match.Value + "|1\n";
                                }
                            }
                            else
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2X_ZuFW(string Content, int PlayType)
            {
                string[] strArray = Content.Trim().Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"([(](\d){2,10}[)][(](\d){2,10}[)])|([\d][(](\d){2,10}[)])|([(](\d){2,10}[)][\d])";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    strArray[i] = base.FilterPreFix(strArray[i]);
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuFW(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_B(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_B(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_ZHFS(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){3,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_ZHFS(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_Zu3D(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"[\d]{3}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_Zu3D(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_Zu3F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_Zu3F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_Zu6D(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"[\d]{3}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_Zu6D(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_Zu6F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){3,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_Zu6F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_ZuB(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_ZuB(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_ZuBD(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_ZuBD(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_5X_TX(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xaf5)
                {
                    str2 = @"([\d]){5}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){5}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_5X_TX(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xaf5) ? 1 : 2))) && (strArray2.Length <= 100000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_D(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(([\d])|([-])){4}[\d]";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_D(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_DX(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "([[]猜大小[]])*?([大小单双]){2}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_DX(match.Value.Replace("[猜大小]", ""), ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(([\d])|([-])){4}[\d]";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[单式]"))
                    {
                        str3 = str3 + this.AnalyseScheme_D(strArray[i], 0xaf1);
                    }
                    if (strArray[i].StartsWith("[复式]"))
                    {
                        str3 = str3 + this.AnalyseScheme_F(strArray[i], 0xaf2);
                    }
                    if (strArray[i].StartsWith("[组合玩法]"))
                    {
                        str3 = str3 + this.AnalyseScheme_ZH(strArray[i], 0xaf3);
                    }
                    if (strArray[i].StartsWith("[猜大小]"))
                    {
                        str3 = str3 + this.AnalyseScheme_DX(strArray[i], 0xaf4);
                    }
                    if (strArray[i].StartsWith("[五星通选单式]"))
                    {
                        str3 = str3 + this.AnalyseScheme_5X_TX(strArray[i], 0xaf5);
                    }
                    if (strArray[i].StartsWith("[五星通选复式]"))
                    {
                        str3 = str3 + this.AnalyseScheme_5X_TX(strArray[i], 0xaf6);
                    }
                    if (strArray[i].StartsWith("[二星组选单式]"))
                    {
                        str3 = str3 + this.AnalyseScheme_2X_ZuD_ZuF(strArray[i], 0xaf7);
                    }
                    if (strArray[i].StartsWith("[二星组选复式]"))
                    {
                        str3 = str3 + this.AnalyseScheme_2X_ZuD_ZuF(strArray[i], 0xaf8);
                    }
                    if (strArray[i].StartsWith("[二星组选分位]"))
                    {
                        str3 = str3 + this.AnalyseScheme_2X_ZuFW(strArray[i], 0xaf9);
                    }
                    if (strArray[i].StartsWith("[二星组选包点]"))
                    {
                        str3 = str3 + this.AnalyseScheme_2X_ZuB(strArray[i], 0xafa);
                    }
                    if (strArray[i].StartsWith("[二星组选包胆]"))
                    {
                        str3 = str3 + this.AnalyseScheme_2X_ZuBD(strArray[i], 0xafb);
                    }
                    if (strArray[i].StartsWith("[三星包点]"))
                    {
                        str3 = str3 + this.AnalyseScheme_3X_B(strArray[i], 0xafc);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(([\d-])|([(][\d]+?[)])){4}(([\d])|([(][\d]+?[)]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"([\d]){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                if ((((Type != 5) && (Type != 3)) && ((Type != 2) && (Type != 1))) && (Type != -1))
                {
                    Type = 5;
                }
                if (Type == -1)
                {
                    return this.BuildNumber_DX(Num);
                }
                return this.BuildNumber_5321(Num, Type);
            }

            private string BuildNumber_5321(int Num, int Type)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = Type; j < 5; j++)
                    {
                        str = str + "-";
                    }
                    for (int k = 0; k < Type; k++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            private string BuildNumber_DX(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 2; j++)
                    {
                        str = str + "大小单双".Substring(random.Next(0, 4), 1);
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xaf0) && (play_type <= 0xb03));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 20))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int winCountDX = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                int num12 = 0;
                int num13 = 0;
                int num14 = 0;
                int num15 = 0;
                int num16 = 0;
                if (PlayType == 0xaf0)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13], WinMoneyList[20], WinMoneyList[0x15], WinMoneyList[0x16], WinMoneyList[0x17], WinMoneyList[0x18], WinMoneyList[0x19]);
                }
                if (PlayType == 0xaf1)
                {
                    return this.ComputeWin_D(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num, ref num2, ref num3, ref num4);
                }
                if (PlayType == 0xaf2)
                {
                    return this.ComputeWin_F(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num, ref num2, ref num3, ref num4);
                }
                if (PlayType == 0xaf3)
                {
                    return this.ComputeWin_ZH(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num, ref num2, ref num3, ref num4);
                }
                if (PlayType == 0xaf4)
                {
                    return this.ComputeWin_DX(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], ref winCountDX);
                }
                if ((PlayType == 0xaf5) || (PlayType == 0xaf6))
                {
                    return this.ComputeWin_5X_TX(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13], ref num8, ref num9, ref num10);
                }
                if ((PlayType == 0xaf7) || (PlayType == 0xaf8))
                {
                    return this.ComputeWin_2X_ZuD_ZuF(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11], ref num6);
                }
                if (PlayType == 0xaf9)
                {
                    return this.ComputeWin_2X_ZuFW(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], ref num6, ref num7);
                }
                if (PlayType == 0xafa)
                {
                    return this.ComputeWin_2X_ZuB(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], ref num6, ref num7);
                }
                if (PlayType == 0xafb)
                {
                    return this.ComputeWin_2X_ZuBD(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], ref num6, ref num7);
                }
                if (PlayType == 0xafc)
                {
                    return this.ComputeWin_3X_B(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref num2);
                }
                if (PlayType == 0xafd)
                {
                    return this.ComputeWin_3X_Zu3D(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x16], WinMoneyList[0x17], ref num11);
                }
                if (PlayType == 0xafe)
                {
                    return this.ComputeWin_3X_Zu3F(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x16], WinMoneyList[0x17], ref num12);
                }
                if (PlayType == 0xaff)
                {
                    return this.ComputeWin_3X_Zu6D(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x18], WinMoneyList[0x19], ref num13);
                }
                if (PlayType == 0xb00)
                {
                    return this.ComputeWin_3X_Zu6F(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x18], WinMoneyList[0x19], ref num14);
                }
                if (PlayType == 0xb01)
                {
                    return this.ComputeWin_3X_ZHFS(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[20], WinMoneyList[0x15], ref num15);
                }
                if (PlayType == 0xb02)
                {
                    return this.ComputeWin_3X_ZuB(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[20], WinMoneyList[0x15], WinMoneyList[0x16], WinMoneyList[0x17], WinMoneyList[0x18], WinMoneyList[0x19], ref num16, ref num11, ref num13);
                }
                if (PlayType == 0xb03)
                {
                    return this.ComputeWin_3X_ZuBD(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[20], WinMoneyList[0x15], WinMoneyList[0x16], WinMoneyList[0x17], WinMoneyList[0x18], WinMoneyList[0x19], ref num16, ref num11, ref num13);
                }
                return -4.0;
            }

            private double ComputeWin_2X_ZuB(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_2X_Zu, ref int WinCount_2X_Zu_DZH)
            {
                WinCount_2X_Zu = 0;
                WinCount_2X_Zu_DZH = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                bool flag = WinNumber[0] == WinNumber[1];
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuB(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (!flag)
                                {
                                    WinCount_2X_Zu++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    WinCount_2X_Zu_DZH++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (WinCount_2X_Zu_DZH > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖(对子号)" + ((int) WinCount_2X_Zu_DZH).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_2X_ZuBD(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_2X_Zu, ref int WinCount_2X_Zu_DZH)
            {
                WinCount_2X_Zu = 0;
                WinCount_2X_Zu_DZH = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                bool flag = WinNumber[0] == WinNumber[1];
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuBD(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (!flag)
                                {
                                    WinCount_2X_Zu++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    WinCount_2X_Zu_DZH++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (WinCount_2X_Zu_DZH > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖(对子号)" + ((int) WinCount_2X_Zu_DZH).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_2X_ZuD_ZuF(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_2X_Zu)
            {
                WinCount_2X_Zu = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuD_ZuF(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                WinCount_2X_Zu++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_2X_ZuFW(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_2X_Zu, ref int WinCount_2X_Zu_DZH)
            {
                WinCount_2X_Zu = 0;
                WinCount_2X_Zu_DZH = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                bool flag = WinNumber[0] == WinNumber[1];
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuFW(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (!flag)
                                {
                                    WinCount_2X_Zu++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    WinCount_2X_Zu_DZH++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (WinCount_2X_Zu_DZH > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖(对子号)" + ((int) WinCount_2X_Zu_DZH).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_B(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_5XTX_2)
            {
                WinCount_5XTX_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_B(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber.Substring(2, 3)))
                            {
                                WinCount_5XTX_2++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_5XTX_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + ((int) WinCount_5XTX_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_ZHFS(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_3X_ZHFS)
            {
                WinCount_3X_ZHFS = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                WinNumber = WinNumber.Substring(2, 3);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_ZHFS(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                WinCount_3X_ZHFS++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_3X_ZHFS > 0)
                {
                    base.MergeWinDescription(ref Description, "三星直选奖" + ((int) WinCount_3X_ZHFS).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_Zu3D(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_3X_Zu3D)
            {
                WinCount_3X_Zu3D = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                WinNumber = WinNumber.Substring(2, 3);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_Zu3D(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                WinCount_3X_Zu3D++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_3X_Zu3D > 0)
                {
                    base.MergeWinDescription(ref Description, "三星组3奖" + ((int) WinCount_3X_Zu3D).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_Zu3F(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_3X_Zu3F)
            {
                WinCount_3X_Zu3F = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                WinNumber = WinNumber.Substring(2, 3);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_Zu3F(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                WinCount_3X_Zu3F++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_3X_Zu3F > 0)
                {
                    base.MergeWinDescription(ref Description, "三星组3奖" + ((int) WinCount_3X_Zu3F).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_Zu6D(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_3X_Zu6D)
            {
                WinCount_3X_Zu6D = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                WinNumber = WinNumber.Substring(2, 3);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_Zu6D(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                WinCount_3X_Zu6D++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_3X_Zu6D > 0)
                {
                    base.MergeWinDescription(ref Description, "三星组6奖" + ((int) WinCount_3X_Zu6D).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_Zu6F(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_3X_Zu6F)
            {
                WinCount_3X_Zu6F = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                WinNumber = WinNumber.Substring(2, 3);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_Zu6F(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                WinCount_3X_Zu6F++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_3X_Zu6F > 0)
                {
                    base.MergeWinDescription(ref Description, "三星组6奖" + ((int) WinCount_3X_Zu6F).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_ZuB(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, ref int WinCount_3X_ZX, ref int WinCount_3X_Zu3D, ref int WinCount_3X_Zu6D)
            {
                WinCount_3X_ZX = 0;
                WinCount_3X_Zu3D = 0;
                WinCount_3X_Zu6D = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                WinNumber = WinNumber.Substring(2, 3);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_ZuB(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (this.FilterRepeated(base.Sort(strArray2[j])).Length == 1)
                            {
                                if (base.Sort(strArray2[j]) == base.Sort(WinNumber))
                                {
                                    WinCount_3X_ZX++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                            else if (this.FilterRepeated(base.Sort(strArray2[j])).Length == 2)
                            {
                                if (base.Sort(strArray2[j]) == base.Sort(WinNumber))
                                {
                                    WinCount_3X_Zu3D++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                            else if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                WinCount_3X_Zu6D++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_3X_ZX > 0)
                {
                    base.MergeWinDescription(ref Description, "三星直选奖" + ((int) WinCount_3X_ZX).ToString() + "注");
                }
                if (WinCount_3X_Zu3D > 0)
                {
                    base.MergeWinDescription(ref Description, "三星组3奖" + ((int) WinCount_3X_Zu3D).ToString() + "注");
                }
                if (WinCount_3X_Zu6D > 0)
                {
                    base.MergeWinDescription(ref Description, "三星组6奖" + ((int) WinCount_3X_Zu6D).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_ZuBD(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, ref int WinCount_3X_ZX, ref int WinCount_3X_Zu3D, ref int WinCount_3X_Zu6D)
            {
                WinCount_3X_ZX = 0;
                WinCount_3X_Zu3D = 0;
                WinCount_3X_Zu6D = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                WinNumber = WinNumber.Substring(2, 3);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_ZuBD(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (this.FilterRepeated(base.Sort(strArray2[j])).Length == 1)
                            {
                                if (base.Sort(strArray2[j]) == base.Sort(WinNumber))
                                {
                                    WinCount_3X_ZX++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                            else if (this.FilterRepeated(base.Sort(strArray2[j])).Length == 2)
                            {
                                if (base.Sort(strArray2[j]) == base.Sort(WinNumber))
                                {
                                    WinCount_3X_Zu3D++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                            else if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                WinCount_3X_Zu6D++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_3X_ZX > 0)
                {
                    base.MergeWinDescription(ref Description, "三星直选奖" + ((int) WinCount_3X_ZX).ToString() + "注");
                }
                if (WinCount_3X_Zu3D > 0)
                {
                    base.MergeWinDescription(ref Description, "三星组3奖" + ((int) WinCount_3X_Zu3D).ToString() + "注");
                }
                if (WinCount_3X_Zu6D > 0)
                {
                    base.MergeWinDescription(ref Description, "三星组6奖" + ((int) WinCount_3X_Zu6D).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_5X_TX(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, ref int WinCount_5XTX_1, ref int WinCount_5XTX_2, ref int WinCount_5XTX_3)
            {
                WinCount_5XTX_1 = 0;
                WinCount_5XTX_2 = 0;
                WinCount_5XTX_3 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_5X_TX(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 5)
                            {
                                if (strArray2[j] == WinNumber)
                                {
                                    WinCount_5XTX_1++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                if ((strArray2[j].Substring(2, 3) == WinNumber.Substring(2, 3)) || (strArray2[j].Substring(0, 3) == WinNumber.Substring(0, 3)))
                                {
                                    WinCount_5XTX_2++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                                if ((strArray2[j].Substring(3, 2) == WinNumber.Substring(3, 2)) || (strArray2[j].Substring(0, 2) == WinNumber.Substring(0, 2)))
                                {
                                    WinCount_5XTX_3++;
                                    num += WinMoney3;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_5XTX_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选一等奖" + ((int) WinCount_5XTX_1).ToString() + "注");
                }
                if (WinCount_5XTX_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选二等奖" + ((int) WinCount_5XTX_2).ToString() + "注");
                }
                if (WinCount_5XTX_3 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选三等奖" + ((int) WinCount_5XTX_3).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_D(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, ref int WinCount5X, ref int WinCount3X, ref int WinCount2X, ref int WinCount1X)
            {
                WinCount5X = 0;
                WinCount3X = 0;
                WinCount2X = 0;
                WinCount1X = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_D(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (regexArray[0].IsMatch(strArray2[j]) && (strArray2[j] == WinNumber))
                            {
                                WinCount5X++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                            else if (regexArray[1].IsMatch(strArray2[j]) && (strArray2[j].Substring(2, 3) == WinNumber.Substring(2, 3)))
                            {
                                WinCount3X++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                            }
                            else if (regexArray[2].IsMatch(strArray2[j]) && (strArray2[j].Substring(3, 2) == WinNumber.Substring(3, 2)))
                            {
                                WinCount2X++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                            else if (regexArray[3].IsMatch(strArray2[j]) && (strArray2[j].Substring(4, 1) == WinNumber.Substring(4, 1)))
                            {
                                WinCount1X++;
                                num += WinMoney4;
                                WinMoneyNoWithTax += WinMoneyNoWithTax4;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount5X > 0)
                {
                    base.MergeWinDescription(ref Description, "五星奖" + ((int) WinCount5X).ToString() + "注");
                }
                if (WinCount3X > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + ((int) WinCount3X).ToString() + "注");
                }
                if (WinCount2X > 0)
                {
                    base.MergeWinDescription(ref Description, "二星奖" + ((int) WinCount2X).ToString() + "注");
                }
                if (WinCount1X > 0)
                {
                    base.MergeWinDescription(ref Description, "一星奖" + ((int) WinCount1X).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_DX(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCountDX)
            {
                WinCountDX = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = "";
                string str2 = "";
                int num = _Convert.StrToInt(WinNumber.Substring(3, 1), 0);
                str = str + ((num <= 4) ? "小" : "大") + (((num % 2) == 0) ? "双" : "单");
                num = _Convert.StrToInt(WinNumber.Substring(4, 1), 0);
                str2 = str2 + ((num <= 4) ? "小" : "大") + (((num % 2) == 0) ? "双" : "单");
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_DX(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (((strArray2[j].Length >= 2) && (str.IndexOf(strArray2[j][0]) >= 0)) && (str2.IndexOf(strArray2[j][1]) >= 0))
                            {
                                WinCountDX++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCountDX > 0)
                {
                    base.MergeWinDescription(ref Description, "猜大小奖" + ((int) WinCountDX).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_F(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, ref int WinCount5X, ref int WinCount3X, ref int WinCount2X, ref int WinCount1X)
            {
                WinCount5X = 0;
                WinCount3X = 0;
                WinCount2X = 0;
                WinCount1X = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_F(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (regexArray[0].IsMatch(strArray2[j]) && (strArray2[j] == WinNumber))
                            {
                                WinCount5X++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                            else if (regexArray[1].IsMatch(strArray2[j]) && (strArray2[j].Substring(2, 3) == WinNumber.Substring(2, 3)))
                            {
                                WinCount3X++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                            }
                            else if (regexArray[2].IsMatch(strArray2[j]) && (strArray2[j].Substring(3, 2) == WinNumber.Substring(3, 2)))
                            {
                                WinCount2X++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                            else if (regexArray[3].IsMatch(strArray2[j]) && (strArray2[j].Substring(4, 1) == WinNumber.Substring(4, 1)))
                            {
                                WinCount1X++;
                                num += WinMoney4;
                                WinMoneyNoWithTax += WinMoneyNoWithTax4;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount5X > 0)
                {
                    base.MergeWinDescription(ref Description, "五星奖" + ((int) WinCount5X).ToString() + "注");
                }
                if (WinCount3X > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + ((int) WinCount3X).ToString() + "注");
                }
                if (WinCount2X > 0)
                {
                    base.MergeWinDescription(ref Description, "二星奖" + ((int) WinCount2X).ToString() + "注");
                }
                if (WinCount1X > 0)
                {
                    base.MergeWinDescription(ref Description, "一星奖" + ((int) WinCount1X).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8, double WinMoney9, double WinMoneyNoWithTax9, double WinMoney10, double WinMoneyNoWithTax10, double WinMoney11, double WinMoneyNoWithTax11, double WinMoney12, double WinMoneyNoWithTax12, double WinMoney13, double WinMoneyNoWithTax13)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int num13 = 0;
                    int num14 = 0;
                    int num15 = 0;
                    int num16 = 0;
                    int winCountDX = 0;
                    int num18 = 0;
                    int num19 = 0;
                    int num20 = 0;
                    int num21 = 0;
                    int num22 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[单式]"))
                    {
                        num += this.ComputeWin_D(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, WinMoney2, WinMoneyNoWithTax2, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num13, ref num14, ref num15, ref num16);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += num13;
                        num3 += num14;
                        num4 += num15;
                        num5 += num16;
                    }
                    else if (strArray[i].StartsWith("[复式]"))
                    {
                        num += this.ComputeWin_F(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, WinMoney2, WinMoneyNoWithTax2, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num13, ref num14, ref num15, ref num16);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += num13;
                        num3 += num14;
                        num4 += num15;
                        num5 += num16;
                    }
                    else if (strArray[i].StartsWith("[组合玩法]"))
                    {
                        num += this.ComputeWin_ZH(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, WinMoney2, WinMoneyNoWithTax2, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num13, ref num14, ref num15, ref num16);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += num13;
                        num3 += num14;
                        num4 += num15;
                        num5 += num16;
                    }
                    else if (strArray[i].StartsWith("[猜大小]"))
                    {
                        num += this.ComputeWin_DX(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, ref winCountDX);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += winCountDX;
                    }
                    else if (strArray[i].StartsWith("[五星通选单式]") || strArray[i].StartsWith("[五星通选复式]"))
                    {
                        num += this.ComputeWin_5X_TX(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney8, WinMoneyNoWithTax8, WinMoney9, WinMoneyNoWithTax9, WinMoney10, WinMoneyNoWithTax10, ref num20, ref num21, ref num22);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num9 += num20;
                        num10 += num21;
                        num11 += num22;
                    }
                    else if (strArray[i].StartsWith("[二星组选单式]") || strArray[i].StartsWith("[二星组选复式]"))
                    {
                        num += this.ComputeWin_2X_ZuD_ZuF(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney6, WinMoneyNoWithTax6, ref num18);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num7 += num18;
                    }
                    else if (strArray[i].StartsWith("[二星组选分位]"))
                    {
                        num += this.ComputeWin_2X_ZuFW(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney6, WinMoneyNoWithTax6, WinMoney7, WinMoneyNoWithTax7, ref num18, ref num19);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num7 += num18;
                        num8 += num19;
                    }
                    else if (strArray[i].StartsWith("[二星组选包点]"))
                    {
                        num += this.ComputeWin_2X_ZuB(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney6, WinMoneyNoWithTax6, WinMoney7, WinMoneyNoWithTax7, ref num18, ref num19);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num7 += num18;
                        num8 += num19;
                    }
                    else if (strArray[i].StartsWith("[二星组选包胆]"))
                    {
                        num += this.ComputeWin_2X_ZuBD(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney6, WinMoneyNoWithTax6, WinMoney7, WinMoneyNoWithTax7, ref num18, ref num19);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num7 += num18;
                        num8 += num19;
                    }
                    else if (strArray[i].StartsWith("[三星包点]"))
                    {
                        num += this.ComputeWin_3X_B(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref num21);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += num21;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星奖" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "二星奖" + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "一星奖" + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "猜大小奖" + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖(对子号)" + num8.ToString() + "注");
                }
                if (num9 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选一等奖" + num9.ToString() + "注");
                }
                if (num10 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选二等奖" + num10.ToString() + "注");
                }
                if (num11 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选三等奖" + num11.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_ZH(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, ref int WinCount5X, ref int WinCount3X, ref int WinCount2X, ref int WinCount1X)
            {
                WinCount5X = 0;
                WinCount3X = 0;
                WinCount2X = 0;
                WinCount1X = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZH(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (regexArray[0].IsMatch(strArray2[j]) && (strArray2[j] == WinNumber))
                            {
                                WinCount5X++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                            else if (regexArray[1].IsMatch(strArray2[j]) && (strArray2[j].Substring(2, 3) == WinNumber.Substring(2, 3)))
                            {
                                WinCount3X++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                            }
                            else if (regexArray[2].IsMatch(strArray2[j]) && (strArray2[j].Substring(3, 2) == WinNumber.Substring(3, 2)))
                            {
                                WinCount2X++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                            else if (regexArray[3].IsMatch(strArray2[j]) && (strArray2[j].Substring(4, 1) == WinNumber.Substring(4, 1)))
                            {
                                WinCount1X++;
                                num += WinMoney4;
                                WinMoneyNoWithTax += WinMoneyNoWithTax4;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount5X > 0)
                {
                    base.MergeWinDescription(ref Description, "五星奖" + ((int) WinCount5X).ToString() + "注");
                }
                if (WinCount3X > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + ((int) WinCount3X).ToString() + "注");
                }
                if (WinCount2X > 0)
                {
                    base.MergeWinDescription(ref Description, "二星奖" + ((int) WinCount2X).ToString() + "注");
                }
                if (WinCount1X > 0)
                {
                    base.MergeWinDescription(ref Description, "一星奖" + ((int) WinCount1X).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private string ConvertFormatToElectronTicket_HPCQ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((((PlayTypeID == 0xaf1) || (PlayTypeID == 0xaf2)) || ((PlayTypeID == 0xaf5) || (PlayTypeID == 0xaf6))) || ((PlayTypeID == 0xafd) || (PlayTypeID == 0xaff)))
                {
                    for (int i = 0; i < Number.Length; i++)
                    {
                        if (((i % 5) == 0) && (i > 0))
                        {
                            str = str.Substring(0, str.Length - 1) + "\n" + Number.Substring(i, 1) + ",";
                        }
                        else
                        {
                            str = str + Number.Substring(i, 1) + ",";
                        }
                    }
                }
                if (PlayTypeID == 0xaf3)
                {
                    string[] strArray = new string[5];
                    Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                    for (int j = 0; j < 5; j++)
                    {
                        strArray[j] = match.Groups["L" + j.ToString()].ToString().Trim();
                        if (strArray[j].Length > 1)
                        {
                            strArray[j] = strArray[j].Substring(1, strArray[j].Length - 2);
                        }
                        str = str + strArray[j].ToString() + ",";
                    }
                }
                if (PlayTypeID == 0xaf4)
                {
                    Number = Number.Replace("大", "2").Replace("小", "1").Replace("单", "5").Replace("双", "4");
                    for (int k = 0; k < Number.Length; k++)
                    {
                        if (((k % 2) == 0) && (k > 0))
                        {
                            str = str.Substring(0, str.Length - 1) + "\n" + Number.Substring(k, 1) + ",";
                        }
                        else
                        {
                            str = str + Number.Substring(k, 1) + ",";
                        }
                    }
                }
                if (PlayTypeID == 0xaf7)
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int m = 0; m < strArray2.Length; m++)
                    {
                        str = str + "_,_,_,";
                        for (int n = 0; n < strArray2[m].Length; n++)
                        {
                            str = str + strArray2[m].Substring(n, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (((PlayTypeID == 0xaf8) || (PlayTypeID == 0xafe)) || (((PlayTypeID == 0xb00) || (PlayTypeID == 0xb01)) || (PlayTypeID == 0xb02)))
                {
                    for (int num6 = 0; num6 < Number.Length; num6++)
                    {
                        str = str + Number.Substring(num6, 1) + ",";
                    }
                }
                if (PlayTypeID == 0xaf9)
                {
                    str = str + "_,_,_,";
                    string[] strArray3 = new string[2];
                    Match match2 = new Regex(@"(?<L0>([\d])|([(][\d]+?[)]))(?<L1>([\d])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                    for (int num7 = 0; num7 < 2; num7++)
                    {
                        strArray3[num7] = match2.Groups["L" + num7.ToString()].ToString().Trim();
                        if (strArray3[num7].Length > 1)
                        {
                            strArray3[num7] = strArray3[num7].Substring(1, strArray3[num7].Length - 2);
                        }
                        str = str + strArray3[num7].ToString() + ",";
                    }
                }
                if (PlayTypeID == 0xafa)
                {
                    str = str + Number + ",";
                }
                if ((PlayTypeID == 0xafb) || (PlayTypeID == 0xb03))
                {
                    str = str + Number + ",";
                }
                if (PlayTypeID == 0xafc)
                {
                    str = str + Number + ",";
                }
                return str.Substring(0, str.Length - 1).Replace("-", "_");
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789-".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { 
                    new Lottery.PlayType(0xaf0, "混合投注"), new Lottery.PlayType(0xaf1, "单式"), new Lottery.PlayType(0xaf2, "复式"), new Lottery.PlayType(0xaf3, "组合玩法"), new Lottery.PlayType(0xaf4, "猜大小"), new Lottery.PlayType(0xaf5, "五星通选单式"), new Lottery.PlayType(0xaf6, "五星通选复式"), new Lottery.PlayType(0xaf7, "二星组选单式"), new Lottery.PlayType(0xaf8, "二星组选复式"), new Lottery.PlayType(0xaf9, "二星组选分位"), new Lottery.PlayType(0xafa, "二星组选包点"), new Lottery.PlayType(0xafb, "二星组选包胆"), new Lottery.PlayType(0xafc, "三星包点"), new Lottery.PlayType(0xafd, "三星组3单式"), new Lottery.PlayType(0xafe, "三星组3复式"), new Lottery.PlayType(0xaff, "三星组6单式"), 
                    new Lottery.PlayType(0xb00, "三星组6复式"), new Lottery.PlayType(0xb01, "三星直选组合复式"), new Lottery.PlayType(0xb02, "三星组选包胆"), new Lottery.PlayType(0xb03, "三星组选包点")
                 };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string str;
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    if (((str = LotteryMachine) != null) && (str == "LT-E"))
                    {
                        if (PlayTypeID == 0xaf1)
                        {
                            return this.GetPrintKeyList_LT_E_D(numbers);
                        }
                        if (PlayTypeID == 0xaf2)
                        {
                            return this.GetPrintKeyList_LT_E_F(numbers);
                        }
                        if (PlayTypeID == 0xaf3)
                        {
                            return this.GetPrintKeyList_LT_E_Zu(numbers);
                        }
                        if (PlayTypeID == 0xaf4)
                        {
                            return this.GetPrintKeyList_LT_E_DX(numbers);
                        }
                    }
                }
                return "";
            }

            private string GetPrintKeyList_LT_E_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").Replace("-", "").Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7");
                    if (str3.Length == 1)
                    {
                        str = str + "[Q]";
                    }
                    if (str3.Length == 2)
                    {
                        str = str + "[R]";
                    }
                    if (str3.Length == 3)
                    {
                        str = str + "[3]";
                    }
                    if (str3.Length == 5)
                    {
                        str = str + "[1]";
                    }
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E_DX(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2)
                    {
                        if (ch.ToString() == "小")
                        {
                            str = str + "[Q]";
                        }
                        if (ch.ToString() == "大")
                        {
                            str = str + "[R]";
                        }
                        if (ch.ToString() == "单")
                        {
                            str = str + "[S]";
                        }
                        if (ch.ToString() == "双")
                        {
                            str = str + "[双]";
                        }
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7").Replace("双", "1");
            }

            private string GetPrintKeyList_LT_E_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").Replace("-", "").Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7");
                    if (str3.Length == 2)
                    {
                        str = str + "[Q]";
                    }
                    if (str3.Length == 3)
                    {
                        str = str + "[R]";
                    }
                    if (str3.Length == 5)
                    {
                        str = str + "[1]";
                    }
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E_Zu(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    int num = 0;
                    for (int i = 0; i < str2.Length; i++)
                    {
                        if (str2.Substring(i, 1) == "-")
                        {
                            num++;
                        }
                    }
                    switch (num)
                    {
                        case 0:
                            str = str + "[X]";
                            break;

                        case 2:
                            str = str + "[T]";
                            break;

                        case 3:
                            str = str + "[S]";
                            break;
                    }
                    str = str + num.ToString();
                    foreach (char ch in str2)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7").Replace("X", "4");
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPCQ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0xaf0)
                {
                    return this.ToElectronicTicket_HPCQ_Mixed(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xaf1)
                {
                    return this.ToElectronicTicket_HPCQ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xaf2)
                {
                    return this.ToElectronicTicket_HPCQ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xaf3)
                {
                    return this.ToElectronicTicket_HPCQ_ZH(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xaf4)
                {
                    return this.ToElectronicTicket_HPCQ_DX(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xaf5)
                {
                    return this.ToElectronicTicket_HPCQ_5X_TXD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xaf6)
                {
                    return this.ToElectronicTicket_HPCQ_5X_TXF(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xaf7)
                {
                    return this.ToElectronicTicket_HPCQ_2X_ZuD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xaf8)
                {
                    return this.ToElectronicTicket_HPCQ_2X_ZuF(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xaf9)
                {
                    return this.ToElectronicTicket_HPCQ_2X_ZuFW(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xafa)
                {
                    return this.ToElectronicTicket_HPCQ_2X_ZuB(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xafb)
                {
                    return this.ToElectronicTicket_HPCQ_2X_ZuBD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xafc)
                {
                    return this.ToElectronicTicket_HPCQ_3X_B(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xafd)
                {
                    return this.ToElectronicTicket_HPCQ_3X_Zu3D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xafe)
                {
                    return this.ToElectronicTicket_HPCQ_3X_Zu3F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xaff)
                {
                    return this.ToElectronicTicket_HPCQ_3X_Zu6D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb00)
                {
                    return this.ToElectronicTicket_HPCQ_3X_Zu6F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb01)
                {
                    return this.ToElectronicTicket_HPCQ_3X_ZHFS(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb02)
                {
                    return this.ToElectronicTicket_HPCQ_3X_ZuB(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb03)
                {
                    return this.ToElectronicTicket_HPCQ_3X_ZuBD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_2X_ZuB(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_2X_ZuB(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(310, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_2X_ZuBD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_2X_ZuBD(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x137, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_2X_ZuD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_2X_ZuD_ZuF(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x133, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_2X_ZuF(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_2X_ZuD_ZuF(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x134, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_2X_ZuFW(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_2X_ZuFW(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x135, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_3X_B(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_3X_B(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x130, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_3X_ZHFS(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_3X_ZHFS(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x13f, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_3X_Zu3D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_3X_Zu3D(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + "--" + strArray[k + m].ToString().Split(new char[] { '|' })[0];
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x139, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_3X_Zu3F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_3X_Zu3F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x13b, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_3X_Zu6D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_3X_Zu6D(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + "--" + strArray[k + m].ToString().Split(new char[] { '|' })[0];
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x13a, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_3X_Zu6F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_3X_Zu6F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x13c, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_3X_ZuB(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_3X_ZuB(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x13d, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_3X_ZuBD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_3X_ZuBD(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x13e, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_5X_TXD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_5X_TX(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0];
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x138, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_5X_TXF(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                ArrayList list = new ArrayList();
                string content = "";
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_5X_TX(Number, ref canonicalNumber);
                for (int i = 0; i < strArray.Length; i++)
                {
                    content = content + strArray[i] + "\n";
                }
                string[] strArray2 = this.AnalyseScheme_5X_TX(content, 0xaf5).Split(new char[] { '\n' });
                if (strArray2 == null)
                {
                    return null;
                }
                if (strArray2.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num2 = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num2 = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num2 = Multiple / MaxMultiple;
                }
                int multiple = 1;
                double num4 = 0.0;
                for (int j = 1; j < (num2 + 1); j++)
                {
                    if ((j * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((j - 1) * MaxMultiple);
                    }
                    for (int m = 0; m < strArray2.Length; m += 5)
                    {
                        string number = "";
                        num4 = 0.0;
                        for (int n = 0; n < 5; n++)
                        {
                            if ((m + n) < strArray2.Length)
                            {
                                number = number + strArray2[m + n].ToString().Split(new char[] { '|' })[0];
                                num4 += 2.0 * double.Parse(strArray2[m + n].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num4 * multiple;
                        list.Add(new Lottery.Ticket(0x138, this.ConvertFormatToElectronTicket_HPCQ(0xaf5, number), multiple, num4 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int k = 0; k < ticketArray.Length; k++)
                {
                    ticketArray[k] = (Lottery.Ticket) list[k];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_D(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0];
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x12d, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_DX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_DX(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0];
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x132, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x12e, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_Mixed(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                Lottery.Ticket[] ticketArray;
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length < 1)
                {
                    return null;
                }
                Money = 0.0;
                string[] strArray2 = new string[] { "", "", "", "", "", "", "", "", "", "", "", "" };
                foreach (string str in strArray)
                {
                    if (str.StartsWith("[单式]"))
                    {
                        string[] strArray5;
                        (strArray5 = strArray2)[0] = strArray5[0] + str + "\n";
                    }
                    else if (str.StartsWith("[复式]"))
                    {
                        string[] strArray6;
                        (strArray6 = strArray2)[1] = strArray6[1] + str + "\n";
                    }
                    else if (str.StartsWith("[组合玩法]"))
                    {
                        string[] strArray7;
                        (strArray7 = strArray2)[2] = strArray7[2] + str + "\n";
                    }
                    else if (str.StartsWith("[猜大小]"))
                    {
                        string[] strArray8;
                        (strArray8 = strArray2)[3] = strArray8[3] + str + "\n";
                    }
                    else if (str.StartsWith("[五星通选单式]"))
                    {
                        string[] strArray9;
                        (strArray9 = strArray2)[4] = strArray9[4] + str + "\n";
                    }
                    else if (str.StartsWith("[五星通选复式]"))
                    {
                        string[] strArray10;
                        (strArray10 = strArray2)[5] = strArray10[5] + str + "\n";
                    }
                    else if (str.StartsWith("[二星组选单式]"))
                    {
                        string[] strArray11;
                        (strArray11 = strArray2)[6] = strArray11[6] + str + "\n";
                    }
                    else if (str.StartsWith("[二星组选复式]"))
                    {
                        string[] strArray12;
                        (strArray12 = strArray2)[7] = strArray12[7] + str + "\n";
                    }
                    else if (str.StartsWith("[二星组选分位]"))
                    {
                        string[] strArray13;
                        (strArray13 = strArray2)[8] = strArray13[8] + str + "\n";
                    }
                    else if (str.StartsWith("[二星组选包点]"))
                    {
                        string[] strArray14;
                        (strArray14 = strArray2)[9] = strArray14[9] + str + "\n";
                    }
                    else if (str.StartsWith("[二星组选包胆]"))
                    {
                        string[] strArray15;
                        (strArray15 = strArray2)[10] = strArray15[10] + str + "\n";
                    }
                    else if (str.StartsWith("[三星包点]"))
                    {
                        string[] strArray16;
                        (strArray16 = strArray2)[11] = strArray16[11] + str + "\n";
                    }
                }
                ArrayList list = new ArrayList();
                if (strArray2[0].Length > 0)
                {
                    ticketArray = this.ToElectronicTicket_HPCQ_D(0xaf1, strArray2[0].ToString(), Multiple, MaxMultiple, ref Money);
                    if (ticketArray != null)
                    {
                        foreach (Lottery.Ticket ticket in ticketArray)
                        {
                            list.Add(ticket);
                        }
                    }
                }
                if (strArray2[1].Length > 0)
                {
                    ticketArray = this.ToElectronicTicket_HPCQ_F(0xaf2, strArray2[1].ToString(), Multiple, MaxMultiple, ref Money);
                    if (ticketArray != null)
                    {
                        foreach (Lottery.Ticket ticket2 in ticketArray)
                        {
                            list.Add(ticket2);
                        }
                    }
                }
                if (strArray2[2].Length > 0)
                {
                    ticketArray = this.ToElectronicTicket_HPCQ_ZH(0xaf3, strArray2[2].ToString(), Multiple, MaxMultiple, ref Money);
                    if (ticketArray != null)
                    {
                        foreach (Lottery.Ticket ticket3 in ticketArray)
                        {
                            list.Add(ticket3);
                        }
                    }
                }
                if (strArray2[3].Length > 0)
                {
                    ticketArray = this.ToElectronicTicket_HPCQ_DX(0xaf4, strArray2[3].ToString(), Multiple, MaxMultiple, ref Money);
                    if (ticketArray != null)
                    {
                        foreach (Lottery.Ticket ticket4 in ticketArray)
                        {
                            list.Add(ticket4);
                        }
                    }
                }
                if (strArray2[4].Length > 0)
                {
                    ticketArray = this.ToElectronicTicket_HPCQ_5X_TXD(0xaf5, strArray2[4].ToString(), Multiple, MaxMultiple, ref Money);
                    if (ticketArray != null)
                    {
                        foreach (Lottery.Ticket ticket5 in ticketArray)
                        {
                            list.Add(ticket5);
                        }
                    }
                }
                if (strArray2[5].Length > 0)
                {
                    ticketArray = this.ToElectronicTicket_HPCQ_5X_TXF(0xaf6, strArray2[5].ToString(), Multiple, MaxMultiple, ref Money);
                    if (ticketArray != null)
                    {
                        foreach (Lottery.Ticket ticket6 in ticketArray)
                        {
                            list.Add(ticket6);
                        }
                    }
                }
                if (strArray2[6].Length > 0)
                {
                    ticketArray = this.ToElectronicTicket_HPCQ_2X_ZuD(0xaf7, strArray2[6].ToString(), Multiple, MaxMultiple, ref Money);
                    if (ticketArray != null)
                    {
                        foreach (Lottery.Ticket ticket7 in ticketArray)
                        {
                            list.Add(ticket7);
                        }
                    }
                }
                if (strArray2[7].Length > 0)
                {
                    ticketArray = this.ToElectronicTicket_HPCQ_2X_ZuF(0xaf8, strArray2[7].ToString(), Multiple, MaxMultiple, ref Money);
                    if (ticketArray != null)
                    {
                        foreach (Lottery.Ticket ticket8 in ticketArray)
                        {
                            list.Add(ticket8);
                        }
                    }
                }
                if (strArray2[8].Length > 0)
                {
                    ticketArray = this.ToElectronicTicket_HPCQ_2X_ZuFW(0xaf9, strArray2[8].ToString(), Multiple, MaxMultiple, ref Money);
                    if (ticketArray != null)
                    {
                        foreach (Lottery.Ticket ticket9 in ticketArray)
                        {
                            list.Add(ticket9);
                        }
                    }
                }
                if (strArray2[9].Length > 0)
                {
                    ticketArray = this.ToElectronicTicket_HPCQ_2X_ZuB(0xafa, strArray2[9].ToString(), Multiple, MaxMultiple, ref Money);
                    if (ticketArray != null)
                    {
                        foreach (Lottery.Ticket ticket10 in ticketArray)
                        {
                            list.Add(ticket10);
                        }
                    }
                }
                if (strArray2[10].Length > 0)
                {
                    ticketArray = this.ToElectronicTicket_HPCQ_2X_ZuBD(0xafb, strArray2[10].ToString(), Multiple, MaxMultiple, ref Money);
                    if (ticketArray != null)
                    {
                        foreach (Lottery.Ticket ticket11 in ticketArray)
                        {
                            list.Add(ticket11);
                        }
                    }
                }
                if (strArray2[11].Length > 0)
                {
                    ticketArray = this.ToElectronicTicket_HPCQ_3X_B(0xafc, strArray2[11].ToString(), Multiple, MaxMultiple, ref Money);
                    if (ticketArray != null)
                    {
                        foreach (Lottery.Ticket ticket12 in ticketArray)
                        {
                            list.Add(ticket12);
                        }
                    }
                }
                Lottery.Ticket[] ticketArray2 = new Lottery.Ticket[list.Count];
                for (int i = 0; i < ticketArray2.Length; i++)
                {
                    ticketArray2[i] = (Lottery.Ticket) list[i];
                }
                return ticketArray2;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_ZH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_ZH(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x12f, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0xaf0)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xaf1)
                {
                    return this.ToSingle_D(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xaf2)
                {
                    return this.ToSingle_F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xaf3)
                {
                    return this.ToSingle_ZH(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xaf4)
                {
                    return this.ToSingle_DX(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0xaf5) || (PlayType == 0xaf6))
                {
                    return this.ToSingle_5X_TX(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0xaf7) || (PlayType == 0xaf8))
                {
                    return this.ToSingle_2X_ZuD_ZuF(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xaf9)
                {
                    return this.ToSingle_2X_ZuFW(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xafa)
                {
                    return this.ToSingle_2X_ZuB(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xafb)
                {
                    return this.ToSingle_2X_ZuBD(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xafc)
                {
                    return this.ToSingle_3X_B(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xafd)
                {
                    return this.ToSingle_3X_Zu3D(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xafe)
                {
                    return this.ToSingle_3X_Zu3F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xaff)
                {
                    return this.ToSingle_3X_Zu6D(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xb00)
                {
                    return this.ToSingle_3X_Zu6F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xb01)
                {
                    return this.ToSingle_3X_ZHFS(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xb02)
                {
                    return this.ToSingle_3X_ZuB(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xb03)
                {
                    return this.ToSingle_3X_ZuBD(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_2X_ZuB(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                ArrayList list = new ArrayList();
                if ((num < 0) || (num > 0x12))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = i; k <= 9; k++)
                    {
                        if ((i + k) == num)
                        {
                            list.Add(i.ToString() + k.ToString());
                        }
                    }
                }
                CanonicalNumber = num.ToString();
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_2X_ZuBD(string sBill, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(sBill.Trim());
                if (CanonicalNumber.Length < 1)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if (CanonicalNumber.Length > 2)
                {
                    CanonicalNumber = CanonicalNumber.Substring(0, 2);
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < length; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        list.Add(chArray[i].ToString() + k.ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_2X_ZuD_ZuF(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_2X_ZuFW(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[2];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]{2,10}[)]))(?<L1>(\d)|([(][\d]{2,10}[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                if ((this.FilterRepeated(match.Groups["L0"].ToString()).Length < 2) && (this.FilterRepeated(match.Groups["L1"].ToString()).Length < 2))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i].StartsWith("("))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        strArray[i] = this.FilterRepeated(strArray[i]);
                    }
                    if (strArray[i].Length < 1)
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        list.Add(str2);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_3X_B(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                ArrayList list = new ArrayList();
                if ((num < 0) || (num > 0x1b))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        for (int m = 0; m <= 9; m++)
                        {
                            if (((i + k) + m) == num)
                            {
                                list.Add(i.ToString() + k.ToString() + m.ToString());
                            }
                        }
                    }
                }
                CanonicalNumber = num.ToString();
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_3X_ZHFS(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < chArray.Length; i++)
                {
                    for (int k = 0; k < chArray.Length; k++)
                    {
                        for (int m = 0; m < chArray.Length; m++)
                        {
                            if (((i != k) && (k != m)) && ((i != m) && !list.Contains(chArray[i].ToString() + chArray[k].ToString() + chArray[m].ToString())))
                            {
                                list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[m].ToString());
                            }
                        }
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_3X_Zu3D(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number.Trim()).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = Number;
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_3X_Zu3F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[i].ToString() + chArray[k].ToString());
                        list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_3X_Zu6D(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number.Trim()).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = Number;
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_3X_Zu6F(string Number, ref string CanonicalNumber)
            {
                return this.ToSingle_Zu3D_Zu6(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_3X_ZuB(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = Number;
                if ((CanonicalNumber.Length < 1) || (CanonicalNumber.Length > 2))
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                if (length == 1)
                {
                    for (int j = 0; j < length; j++)
                    {
                        for (int k = 0; k <= 9; k++)
                        {
                            for (int m = 0; m <= 9; m++)
                            {
                                if ((chArray[j].ToString() == k.ToString()) && !list.Contains(chArray[j].ToString() + k.ToString() + m.ToString()))
                                {
                                    list.Add(chArray[j].ToString() + k.ToString() + m.ToString());
                                }
                                if ((k.ToString() == m.ToString()) && !list.Contains(chArray[j].ToString() + k.ToString() + m.ToString()))
                                {
                                    list.Add(chArray[j].ToString() + k.ToString() + m.ToString());
                                }
                                if (((chArray[j].ToString() != k.ToString()) && (chArray[j].ToString() != m.ToString())) && ((k.ToString() != m.ToString()) && !list.Contains(base.Sort(chArray[j].ToString() + k.ToString() + m.ToString()))))
                                {
                                    list.Add(base.Sort(chArray[j].ToString() + k.ToString() + m.ToString()));
                                }
                            }
                        }
                    }
                }
                else
                {
                    for (int n = 0; n <= 9; n++)
                    {
                        list.Add(Number + n.ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int i = 0; i < list.Count; i++)
                {
                    strArray[i] = list[i].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_3X_ZuBD(string Number, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(Number, -1);
                CanonicalNumber = "";
                ArrayList list = new ArrayList();
                for (int i = 0; i <= 9; i++)
                {
                    for (int m = 0; m <= 9; m++)
                    {
                        for (int n = 0; n <= 9; n++)
                        {
                            if (((((i + m) + n) == num) && (i == m)) && (m == n))
                            {
                                list.Add(i.ToString() + m.ToString() + n.ToString());
                            }
                        }
                    }
                }
                if ((num < 1) || (num > 0x1a))
                {
                    if (list.Count > 0)
                    {
                        string[] strArray = new string[list.Count];
                        for (int num5 = 0; num5 < list.Count; num5++)
                        {
                            strArray[num5] = list[num5].ToString();
                        }
                        CanonicalNumber = num.ToString();
                        return strArray;
                    }
                    CanonicalNumber = "";
                    return null;
                }
                for (int j = 0; j <= 9; j++)
                {
                    for (int num7 = 0; num7 <= 9; num7++)
                    {
                        if ((j != num7) && (((j + j) + num7) == num))
                        {
                            list.Add(j.ToString() + j.ToString() + num7.ToString());
                        }
                    }
                }
                if ((num >= 3) && (num <= 0x18))
                {
                    for (int num8 = 0; num8 <= 7; num8++)
                    {
                        for (int num9 = num8 + 1; num9 <= 8; num9++)
                        {
                            for (int num10 = num9 + 1; num10 <= 9; num10++)
                            {
                                if (((num8 + num9) + num10) == num)
                                {
                                    list.Add(num8.ToString() + num9.ToString() + num10.ToString());
                                }
                            }
                        }
                    }
                }
                CanonicalNumber = num.ToString();
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_5X_TX(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[5];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    list.Add(str5);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_D(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|(-))(?<L1>(\d)|(-))(?<L2>(\d)|(-))(?<L3>(\d)|(-))(?<L4>(\d))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str;
                }
                Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                bool flag = false;
                for (int j = 0; j < 4; j++)
                {
                    if (regexArray[j].IsMatch(CanonicalNumber))
                    {
                        flag = true;
                        break;
                    }
                }
                if (!flag)
                {
                    return null;
                }
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_DX(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>([大小单双]))(?<L1>([大小单双]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 2; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str;
                }
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_F(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.ToSingle_D(Number, ref CanonicalNumber);
                if ((strArray == null) || (strArray.Length != 1))
                {
                    return null;
                }
                Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                string[] strArray2 = null;
                if (regexArray[0].IsMatch(CanonicalNumber))
                {
                    return new string[] { CanonicalNumber, ("--" + CanonicalNumber.Substring(2, 3)), ("---" + CanonicalNumber.Substring(3, 2)), ("----" + CanonicalNumber.Substring(4, 1)) };
                }
                if (regexArray[1].IsMatch(CanonicalNumber))
                {
                    return new string[] { CanonicalNumber, ("---" + CanonicalNumber.Substring(3, 2)), ("----" + CanonicalNumber.Substring(4, 1)) };
                }
                if (regexArray[2].IsMatch(CanonicalNumber))
                {
                    return new string[] { CanonicalNumber, ("----" + CanonicalNumber.Substring(4, 1)) };
                }
                if (regexArray[3].IsMatch(CanonicalNumber))
                {
                    strArray2 = new string[] { CanonicalNumber };
                }
                return strArray2;
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[单式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_D(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_F(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[组合玩法]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_ZH(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[猜大小]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_DX(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[五星通选单式]") || Number.StartsWith("[五星通选复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_5X_TX(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[二星组选单式]") || Number.StartsWith("[二星组选复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_2X_ZuD_ZuF(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[二星组选分位]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_2X_ZuFW(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[二星组选包点]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_2X_ZuB(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[二星组选包胆]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_2X_ZuBD(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[三星包点]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_3X_B(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                return null;
            }

            private string[] ToSingle_ZH(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[5];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string number = str4 + strArray[4][num6].ToString();
                                    string canonicalNumber = "";
                                    string[] strArray2 = this.ToSingle_D(number, ref canonicalNumber);
                                    if ((strArray2 != null) && (strArray2.Length >= 1))
                                    {
                                        list.Add(number);
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray3 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray3[k] = list[k].ToString();
                }
                return strArray3;
            }

            private string[] ToSingle_Zu3D_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = Number;
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                if (length == 2)
                {
                    for (int j = 0; j < (length - 1); j++)
                    {
                        for (int k = j + 1; k < length; k++)
                        {
                            list.Add(chArray[j].ToString() + chArray[j].ToString() + chArray[k].ToString());
                            list.Add(chArray[j].ToString() + chArray[k].ToString() + chArray[k].ToString());
                        }
                    }
                }
                else
                {
                    for (int m = 0; m < (length - 2); m++)
                    {
                        for (int n = m + 1; n < (length - 1); n++)
                        {
                            for (int num6 = n + 1; num6 < length; num6++)
                            {
                                list.Add(chArray[m].ToString() + chArray[n].ToString() + chArray[num6].ToString());
                            }
                        }
                    }
                }
                string[] strArray = new string[list.Count];
                for (int i = 0; i < list.Count; i++)
                {
                    strArray[i] = list[i].ToString();
                }
                return strArray;
            }
        }

        public class CTFC22X5 : Lottery.LotteryBase
        {
            public const string Code = "CTFC22X5";
            public const int ID = 12;
            public const double MaxMoney = 20000.0;
            public const string Name = "楚天风采22选5";
            public const int PlayType_D = 0x4b1;
            public const int PlayType_F = 0x4b2;
            public const string sID = "12";

            public CTFC22X5()
            {
                base.id = 12;
                base.name = "楚天风采22选5";
                base.code = "CTFC22X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x4b1)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,21}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x4b1) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x4b1);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x17);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x4b1) && (play_type <= 0x4b2));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num8 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num8++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num8)
                                    {
                                        case 5:
                                            num++;
                                            num4 += WinMoneyList[0];
                                            WinMoneyNoWithTax += WinMoneyList[1];
                                            break;

                                        case 4:
                                            num2++;
                                            num4 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                            break;

                                        case 3:
                                            num3++;
                                            num4 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x16)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x4b1, "单式"), new Lottery.PlayType(0x4b2, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                string str;
                Number = Number.Trim();
                if (Number == "")
                {
                    return "";
                }
                string[] numbers = Number.Split(new char[] { '\n' });
                if ((numbers == null) || (numbers.Length < 1))
                {
                    return "";
                }
                if ((((str = LotteryMachine) == null) || !(str == "LT-E02")) || ((PlayTypeID != 0x4b1) && (PlayTypeID != 0x4b2)))
                {
                    return "";
                }
                return this.GetPrintKeyList_LT_E02(numbers);
            }

            private string GetPrintKeyList_LT_E02(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "3").Replace("2", "A").Replace("3", "B").Replace("4", "6").Replace("5", "C").Replace("6", "D").Replace("7", "9").Replace("8", "E").Replace("9", "F");
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class CTFC32X7 : Lottery.LotteryBase
        {
            public const string Code = "CTFC32X7";
            public const int ID = 11;
            public const double MaxMoney = 22880.0;
            public const string Name = "楚天风采32选7";
            public const int PlayType_D = 0x44d;
            public const int PlayType_F = 0x44e;
            public const string sID = "11";

            public CTFC32X7()
            {
                base.id = 11;
                base.name = "楚天风采32选7";
                base.code = "CTFC32X7";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x44d)
                {
                    str2 = @"(\d\d\s){6}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,31}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x44d) ? 1 : 2))) && (strArray2.Length <= 11440.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){7}[+]\s\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number.Substring(0, 20), ref canonicalNumber, 0x44d);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 7; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x21);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x44d) && (play_type <= 0x44e));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x19)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 0x10))
                {
                    return -3.0;
                }
                string str = WinNumber.Substring(0x17, 2);
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                double num9 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 20)
                            {
                                string[] strArray3 = new string[7];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num12 = 0;
                                bool flag = false;
                                bool flag2 = true;
                                for (int k = 0; k < 7; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag2 = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num12++;
                                    }
                                    if (str == strArray3[k])
                                    {
                                        flag = true;
                                    }
                                }
                                if (flag2)
                                {
                                    if (num12 == 7)
                                    {
                                        num++;
                                        num9 += WinMoneyList[0];
                                        WinMoneyNoWithTax += WinMoneyList[1];
                                    }
                                    else if ((num12 == 6) && flag)
                                    {
                                        num2++;
                                        num9 += WinMoneyList[2];
                                        WinMoneyNoWithTax += WinMoneyList[3];
                                    }
                                    else if (num12 == 6)
                                    {
                                        num3++;
                                        num9 += WinMoneyList[4];
                                        WinMoneyNoWithTax += WinMoneyList[5];
                                    }
                                    else if ((num12 == 5) && flag)
                                    {
                                        num4++;
                                        num9 += WinMoneyList[6];
                                        WinMoneyNoWithTax += WinMoneyList[7];
                                    }
                                    else if (num12 == 5)
                                    {
                                        num5++;
                                        num9 += WinMoneyList[8];
                                        WinMoneyNoWithTax += WinMoneyList[9];
                                    }
                                    else if ((num12 == 4) && flag)
                                    {
                                        num6++;
                                        num9 += WinMoneyList[10];
                                        WinMoneyNoWithTax += WinMoneyList[11];
                                    }
                                    else if (num12 == 4)
                                    {
                                        num7++;
                                        num9 += WinMoneyList[12];
                                        WinMoneyNoWithTax += WinMoneyList[13];
                                    }
                                    else if ((num12 == 3) && flag)
                                    {
                                        num8++;
                                        num9 += WinMoneyList[14];
                                        WinMoneyNoWithTax += WinMoneyList[15];
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "七等奖" + num7.ToString() + "注";
                }
                if (num8 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "八等奖" + num8.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num9;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x20)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x44d, "单式"), new Lottery.PlayType(0x44e, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class DF6J1 : Lottery.LotteryBase
        {
            public const string Code = "DF6J1";
            public const int ID = 0x3a;
            public const double MaxMoney = 20000.0;
            public const string Name = "东方6+1";
            public const int PlayType_D = 0x16a9;
            public const int PlayType_F = 0x16aa;
            public const string sID = "58";

            public DF6J1()
            {
                base.id = 0x3a;
                base.name = "东方6+1";
                base.code = "DF6J1";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x16a9)
                {
                    str2 = @"(\d){6}[+][鼠牛虎兔龙蛇马羊猴鸡狗猪]";
                }
                else
                {
                    str2 = @"((\d)|([(]\d{1,10}[)])){6}[+]([鼠牛虎兔龙蛇马羊猴鸡狗猪]{1,12})";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x16a9) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"([\d]){6}[+][鼠牛虎兔龙蛇马羊猴鸡狗猪]", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x16a9);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 6; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append((str + "+" + "鼠牛虎兔龙蛇马羊猴鸡狗猪"[random.Next(0, 12)].ToString()).Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x16a9) && (play_type <= 0x16aa));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 8)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 12))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                double num7 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 8)
                            {
                                if (strArray2[j] == WinNumber)
                                {
                                    num++;
                                    num7 += WinMoneyList[0];
                                    WinMoneyNoWithTax += WinMoneyList[1];
                                }
                                else if (strArray2[j].Substring(0, 6) == WinNumber.Substring(0, 6))
                                {
                                    num2++;
                                    num7 += WinMoneyList[2];
                                    WinMoneyNoWithTax += WinMoneyList[3];
                                }
                                else
                                {
                                    bool flag = false;
                                    int startIndex = 0;
                                    while (startIndex <= 1)
                                    {
                                        if (strArray2[j].Substring(startIndex, 5) == WinNumber.Substring(startIndex, 5))
                                        {
                                            num3++;
                                            num7 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            flag = true;
                                            break;
                                        }
                                        startIndex++;
                                    }
                                    if (!flag)
                                    {
                                        startIndex = 0;
                                        while (startIndex <= 2)
                                        {
                                            if (strArray2[j].Substring(startIndex, 4) == WinNumber.Substring(startIndex, 4))
                                            {
                                                num4++;
                                                num7 += WinMoneyList[6];
                                                WinMoneyNoWithTax += WinMoneyList[7];
                                                flag = true;
                                                break;
                                            }
                                            startIndex++;
                                        }
                                        if (!flag)
                                        {
                                            for (startIndex = 0; startIndex <= 3; startIndex++)
                                            {
                                                if (strArray2[j].Substring(startIndex, 3) == WinNumber.Substring(startIndex, 3))
                                                {
                                                    num5++;
                                                    num7 += WinMoneyList[8];
                                                    WinMoneyNoWithTax += WinMoneyList[9];
                                                    flag = true;
                                                    break;
                                                }
                                            }
                                            if (!flag && (strArray2[j].Substring(7, 1) == WinNumber.Substring(7, 1)))
                                            {
                                                num6++;
                                                num7 += WinMoneyList[10];
                                                WinMoneyNoWithTax += WinMoneyList[11];
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "六等奖" + num6.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num7;
            }

            private string ConvertFormatToElectronTicket_HPJX(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string[] strArray = new string[7];
                string str = "";
                if ((PlayTypeID == 0x16a9) || (PlayTypeID == 0x16aa))
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray2.Length; i++)
                    {
                        Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))[+](?<L6>([鼠牛虎兔龙蛇马羊猴鸡狗猪]+))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[i]);
                        for (int j = 0; j < 6; j++)
                        {
                            strArray[j] = match.Groups["L" + j.ToString()].ToString().Trim();
                            if (strArray[j] == "")
                            {
                                return "";
                            }
                            if (strArray[j].Length > 1)
                            {
                                strArray[j] = strArray[j].Substring(1, strArray[j].Length - 2);
                                if (strArray[j].Length > 1)
                                {
                                    strArray[j] = this.FilterRepeated(strArray[j]);
                                }
                                if (strArray[j] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray[j] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        strArray[6] = match.Groups["L6"].ToString().Trim();
                        if (strArray[6] == "")
                        {
                            return "";
                        }
                        if (strArray[6].Length > 0)
                        {
                            strArray[6] = this.FilterRepeated_SX(strArray[6]);
                            if (strArray[6] == "")
                            {
                                return "";
                            }
                            str = str + "#";
                            for (int k = 0; k < strArray[6].Length; k++)
                            {
                                str = str + strArray[6].Substring(k, 1).Replace("鼠", "01").Replace("牛", "02").Replace("虎", "03").Replace("兔", "04").Replace("龙", "05").Replace("蛇", "06").Replace("马", "07").Replace("羊", "08").Replace("猴", "09").Replace("鸡", "10").Replace("狗", "11").Replace("猪", "12") + ",";
                            }
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string ConvertFormatToElectronTicket_HPSH(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string[] strArray = new string[7];
                string str = "";
                if ((PlayTypeID == 0x16a9) || (PlayTypeID == 0x16aa))
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray2.Length; i++)
                    {
                        Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))[+](?<L6>([鼠牛虎兔龙蛇马羊猴鸡狗猪]+))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[i]);
                        for (int j = 0; j < 6; j++)
                        {
                            strArray[j] = match.Groups["L" + j.ToString()].ToString().Trim();
                            if (strArray[j] == "")
                            {
                                return "";
                            }
                            if (strArray[j].Length > 1)
                            {
                                strArray[j] = strArray[j].Substring(1, strArray[j].Length - 2);
                                if (strArray[j].Length > 1)
                                {
                                    strArray[j] = this.FilterRepeated(strArray[j]);
                                }
                                if (strArray[j] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray[j] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        strArray[6] = match.Groups["L6"].ToString().Trim();
                        if (strArray[6] == "")
                        {
                            return "";
                        }
                        if (strArray[6].Length > 0)
                        {
                            strArray[6] = this.FilterRepeated_SX(strArray[6]);
                            if (strArray[6] == "")
                            {
                                return "";
                            }
                            str = str + "#";
                            for (int k = 0; k < strArray[6].Length; k++)
                            {
                                str = str + strArray[6].Substring(k, 1).Replace("鼠", "01").Replace("牛", "02").Replace("虎", "03").Replace("兔", "04").Replace("龙", "05").Replace("蛇", "06").Replace("马", "07").Replace("羊", "08").Replace("猴", "09").Replace("鸡", "10").Replace("狗", "11").Replace("猪", "12") + ",";
                            }
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            private string FilterRepeated_SX(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("鼠牛虎兔龙蛇马羊猴鸡狗猪".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return str;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x16a9, "单式"), new Lottery.PlayType(0x16aa, "复式") };
            }

            private string HPSH_ConvertFormatToElectronTicket(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                return Number.Replace(",", "").Replace("#01", "+鼠").Replace("#02", "+牛").Replace("#03", "+虎").Replace("#04", "+兔").Replace("#05", "+龙").Replace("#06", "+蛇").Replace("#07", "+马").Replace("#08", "+羊").Replace("#09", "+猴").Replace("#10", "+鸡").Replace("#11", "+狗").Replace("#12", "+猪");
            }

            public override string HPSH_ToElectronicTicket(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPSH_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPJX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x16a9)
                {
                    return this.ToElectronicTicket_HPJX_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x16aa)
                {
                    return this.ToElectronicTicket_HPJX_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x16a9)
                {
                    return this.ToElectronicTicket_HPSH_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x16aa)
                {
                    return this.ToElectronicTicket_HPSH_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = new string[7];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))[+](?<L6>([鼠牛虎兔龙蛇马羊猴鸡狗猪]+))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 6; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                strArray[6] = match.Groups["L6"].ToString().Trim();
                if (strArray[6] == "")
                {
                    CanonicalNumber = "";
                    return null;
                }
                if (strArray[6].Length > 1)
                {
                    strArray[6] = this.FilterRepeated_SX(strArray[6]);
                    if (strArray[6] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                }
                CanonicalNumber = CanonicalNumber + "+" + strArray[6];
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    for (int num7 = 0; num7 < strArray[5].Length; num7++)
                                    {
                                        string str6 = str5 + strArray[5][num7].ToString();
                                        for (int num8 = 0; num8 < strArray[6].Length; num8++)
                                        {
                                            string str7 = str6 + "+" + strArray[6][num8].ToString();
                                            list.Add(str7);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class DFDLT : Lottery.LotteryBase
        {
            public const string Code = "DFDLT";
            public const int ID = 0x18;
            public const double MaxMoney = 22880.0;
            public const string Name = "东方大乐透";
            public const int PlayType_D = 0x961;
            public const int PlayType_F = 0x962;
            public const string sID = "24";

            public DFDLT()
            {
                base.id = 0x18;
                base.name = "东方大乐透";
                base.code = "DFDLT";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x961)
                {
                    str2 = @"(\d\d\s){6}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,36}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x961) ? 1 : 2))) && (strArray2.Length <= 11440.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){7}[+]\s\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number.Substring(0, 20), ref canonicalNumber, 0x961);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 7; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x26);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x961) && (play_type <= 0x962));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x19)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 14))
                {
                    return -3.0;
                }
                string str = WinNumber.Substring(0x17, 2);
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                double num8 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 20)
                            {
                                string[] strArray3 = new string[7];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num11 = 0;
                                bool flag = false;
                                bool flag2 = true;
                                for (int k = 0; k < 7; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag2 = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num11++;
                                    }
                                    if (str == strArray3[k])
                                    {
                                        flag = true;
                                    }
                                }
                                if (flag2)
                                {
                                    if (num11 == 7)
                                    {
                                        num++;
                                        num8 += WinMoneyList[0];
                                        WinMoneyNoWithTax += WinMoneyList[1];
                                    }
                                    else if ((num11 == 6) && flag)
                                    {
                                        num2++;
                                        num8 += WinMoneyList[2];
                                        WinMoneyNoWithTax += WinMoneyList[3];
                                    }
                                    else if (num11 == 6)
                                    {
                                        num3++;
                                        num8 += WinMoneyList[4];
                                        WinMoneyNoWithTax += WinMoneyList[5];
                                    }
                                    else if ((num11 == 5) && flag)
                                    {
                                        num4++;
                                        num8 += WinMoneyList[6];
                                        WinMoneyNoWithTax += WinMoneyList[7];
                                    }
                                    else if (num11 == 5)
                                    {
                                        num5++;
                                        num8 += WinMoneyList[8];
                                        WinMoneyNoWithTax += WinMoneyList[9];
                                    }
                                    else if ((num11 == 4) && flag)
                                    {
                                        num6++;
                                        num8 += WinMoneyList[10];
                                        WinMoneyNoWithTax += WinMoneyList[11];
                                    }
                                    else if ((num11 == 4) || ((num11 == 3) && flag))
                                    {
                                        num7++;
                                        num8 += WinMoneyList[12];
                                        WinMoneyNoWithTax += WinMoneyList[13];
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "七等奖" + num7.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num8;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x25)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x961, "单式"), new Lottery.PlayType(0x962, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    string str = LotteryMachine;
                    if (str != null)
                    {
                        if (!(str == "FCR8000"))
                        {
                            if (str == "SN_3000CG")
                            {
                                if (PlayTypeID == 0x961)
                                {
                                    return this.GetPrintKeyList_SN_3000CG_D(numbers);
                                }
                                if (PlayTypeID == 0x962)
                                {
                                    return this.GetPrintKeyList_SN_3000CG_F(numbers);
                                }
                            }
                        }
                        else if ((PlayTypeID == 0x961) || (PlayTypeID == 0x962))
                        {
                            return this.GetPrintKeyList_FCR8000(numbers);
                        }
                    }
                }
                return "";
            }

            private string GetPrintKeyList_FCR8000(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace("+", "").Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CG_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace("+", "").Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CG_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace("+", "").Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return (str + "[ENTER]");
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class FC3D : Lottery.LotteryBase
        {
            public const string Code = "FC3D";
            public const int ID = 6;
            public const double MaxMoney = 20000.0;
            public const string Name = "福彩3D";
            public const int PlayType_ZhiB = 0x25e;
            public const int PlayType_ZhiD = 0x259;
            public const int PlayType_ZhiF = 0x25a;
            public const int PlayType_Zu3F = 0x25d;
            public const int PlayType_Zu6F = 0x25c;
            public const int PlayType_ZuB = 0x25f;
            public const int PlayType_ZuD = 0x25b;
            public const string sID = "6";

            public FC3D()
            {
                base.id = 6;
                base.name = "福彩3D";
                base.code = "FC3D";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0x259) || (PlayType == 0x25a))
                {
                    return this.AnalyseScheme_Zhi(Content, PlayType);
                }
                if ((PlayType == 0x25b) || (PlayType == 0x25c))
                {
                    return this.AnalyseScheme_Zu3D_Zu6(Content, PlayType);
                }
                if (PlayType == 0x25d)
                {
                    return this.AnalyseScheme_Zu3F(Content, PlayType);
                }
                if (PlayType == 0x25e)
                {
                    return this.AnalyseScheme_ZhiB(Content, PlayType);
                }
                if (PlayType == 0x25f)
                {
                    return this.AnalyseScheme_ZuB(Content, PlayType);
                }
                return "";
            }

            private string AnalyseScheme_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x259)
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){3}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x259) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiB(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiB(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3D_Zu6(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x25b)
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"([\d]){3,10}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3D_Zu6(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x25b) ? 1 : 2)))
                        {
                            if (this.FilterRepeated(base.Sort(match.Value)).Length == 2)
                            {
                                if (PlayType != 0x25c)
                                {
                                    str = str + match.Value + "|1\n";
                                }
                            }
                            else
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuB(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuB(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_DYJ_Zu3D_Zu6(string Content, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Content).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"([\d]){3,10}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3D_Zu6(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if (PlayType == 0x25b)
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                            else
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_DYJ_Zu3F(string Content, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Content).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3F(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_DYJ_ZuB(string Content, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Content).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuB(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                str = str + strArray2[j] + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_Zu3D_Zu6(string Content, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Content).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"([\d]){3,10}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3D_Zu6(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if (PlayType == 0x25b)
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                            else if (strArray2.Length >= 1)
                            {
                                for (int j = 0; j < strArray2.Length; j++)
                                {
                                    str = str + strArray2[j] + "|1\n";
                                }
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_Zu3F(string Content, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Content).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                str = str + strArray2[j] + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_ZuB(string Content, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Content).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuB(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                str = str + strArray2[j] + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_Zhi(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 3; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x259) && (play_type <= 0x25f));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                if ((PlayType == 0x259) || (PlayType == 0x25a))
                {
                    return this.ComputeWin_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if ((PlayType == 0x25b) || (PlayType == 0x25c))
                {
                    return this.ComputeWin_Zu3D_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x25d)
                {
                    return this.ComputeWin_Zu3F(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3]);
                }
                if (PlayType == 0x25e)
                {
                    return this.ComputeWin_ZhiB(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (PlayType == 0x25f)
                {
                    return this.ComputeWin_ZuB(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                return -4.0;
            }

            private double ComputeWin_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "单选奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZhiB(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiB(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "单选奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu3D_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                double num3 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    if (strArray[i].Length >= 3)
                    {
                        if (this.FilterRepeated(base.Sort(strArray[i])).Length == 2)
                        {
                            if (base.Sort(strArray[i]) == base.Sort(WinNumber))
                            {
                                num++;
                                num3 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                        else
                        {
                            string[] strArray2 = this.ToSingle_Zu3D_Zu6(strArray[i], ref canonicalNumber);
                            if ((strArray2 != null) && (strArray2.Length >= 1))
                            {
                                for (int j = 0; j < strArray2.Length; j++)
                                {
                                    if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                                    {
                                        num2++;
                                        num3 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选3奖" + num.ToString() + "注。";
                }
                if (num2 > 0)
                {
                    Description = "组选6奖" + num2.ToString() + "注。";
                }
                return num3;
            }

            private double ComputeWin_Zu3F(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu3F(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选3奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZuB(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                double num3 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuB(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (this.FilterRepeated(strArray2[j]).Length == 2)
                                {
                                    num++;
                                    num3 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    num2++;
                                    num3 += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选3奖" + num.ToString() + "注。";
                }
                if (num2 > 0)
                {
                    Description = "组选6奖" + num2.ToString() + "注。";
                }
                return num3;
            }

            private string ConvertFormatToElectronTicket_DYJ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (((PlayTypeID == 0x259) || (PlayTypeID == 0x25b)) || (PlayTypeID == 0x25f))
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        if (PlayTypeID == 0x259)
                        {
                            str = str + "1|";
                        }
                        else if (PlayTypeID == 0x25b)
                        {
                            str = str + "6|";
                        }
                        else if (PlayTypeID == 0x25f)
                        {
                            str = str + "6|";
                        }
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + ";\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                else if (PlayTypeID == 0x25e)
                {
                    str = "S1|" + Number + ";";
                }
                else if (PlayTypeID == 0x25c)
                {
                    str = str + "F6|" + Number + ";";
                }
                else if (PlayTypeID == 0x25d)
                {
                    str = str + "F3|" + Number + ";";
                }
                else if (PlayTypeID == 0x25a)
                {
                    str = str + "1|";
                    string[] strArray2 = new string[3];
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                    for (int k = 0; k < 3; k++)
                    {
                        strArray2[k] = match.Groups["L" + k.ToString()].ToString().Trim();
                        if (strArray2[k] == "")
                        {
                            return "";
                        }
                        if (strArray2[k].Length > 1)
                        {
                            strArray2[k] = strArray2[k].Substring(1, strArray2[k].Length - 2);
                            if (strArray2[k].Length > 1)
                            {
                                strArray2[k] = this.FilterRepeated(strArray2[k]);
                            }
                            if (strArray2[k] == "")
                            {
                                return "";
                            }
                        }
                        str = str + strArray2[k] + ",";
                    }
                    if (str.EndsWith(","))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                    str = str + ";";
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string ConvertFormatToElectronTicket_HPSH(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (((PlayTypeID == 0x259) || (PlayTypeID == 0x25b)) || (((PlayTypeID == 0x25c) || (PlayTypeID == 0x25d)) || (PlayTypeID == 0x25f)))
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                else if (PlayTypeID == 0x25e)
                {
                    str = Number;
                }
                else if (PlayTypeID == 0x25a)
                {
                    string[] strArray2 = new string[3];
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                    for (int k = 0; k < 3; k++)
                    {
                        strArray2[k] = match.Groups["L" + k.ToString()].ToString().Trim();
                        if (strArray2[k] == "")
                        {
                            return "";
                        }
                        if (strArray2[k].Length > 1)
                        {
                            strArray2[k] = strArray2[k].Substring(1, strArray2[k].Length - 2);
                            if (strArray2[k].Length > 1)
                            {
                                strArray2[k] = this.FilterRepeated(strArray2[k]);
                            }
                            if (strArray2[k] == "")
                            {
                                return "";
                            }
                        }
                        str = str + strArray2[k] + ",";
                    }
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x259, "直选单式"), new Lottery.PlayType(0x25a, "直选复式"), new Lottery.PlayType(0x25b, "组选单式"), new Lottery.PlayType(0x25c, "组选6复式"), new Lottery.PlayType(0x25d, "组选3复式"), new Lottery.PlayType(0x25e, "直选包点"), new Lottery.PlayType(0x25f, "组选包点") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    switch (LotteryMachine)
                    {
                        case "福彩投注系统2.2":
                            if (PlayTypeID != 0x259)
                            {
                                if (PlayTypeID == 0x25a)
                                {
                                    return this.GetPrintKeyList_FCTZST2_2_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x25b)
                                {
                                    return this.GetPrintKeyList_FCTZST2_2_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x25c)
                                {
                                    return this.GetPrintKeyList_FCTZST2_2_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x25d)
                                {
                                    return this.GetPrintKeyList_FCTZST2_2_ZhiD(numbers);
                                }
                                if ((PlayTypeID != 0x25e) && (PlayTypeID != 0x25f))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_FCTZST2_2_B(numbers);
                            }
                            return this.GetPrintKeyList_FCTZST2_2_ZhiD(numbers);

                        case "FCR8000":
                            if (PlayTypeID != 0x259)
                            {
                                if (PlayTypeID == 0x25a)
                                {
                                    return this.GetPrintKeyList_FCR8000_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x25b)
                                {
                                    return this.GetPrintKeyList_FCR8000_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x25c)
                                {
                                    return this.GetPrintKeyList_FCR8000_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x25d)
                                {
                                    return this.GetPrintKeyList_FCR8000_ZhiD(numbers);
                                }
                                if ((PlayTypeID != 0x25e) && (PlayTypeID != 0x25f))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_FCR8000_B(numbers);
                            }
                            return this.GetPrintKeyList_FCR8000_ZhiD(numbers);

                        case "LT-E":
                            if (PlayTypeID != 0x259)
                            {
                                if (PlayTypeID == 0x25a)
                                {
                                    return this.GetPrintKeyList_LT_E_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x25b)
                                {
                                    return this.GetPrintKeyList_LT_E_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x25c)
                                {
                                    return this.GetPrintKeyList_LT_E_ZuF(numbers);
                                }
                                if (PlayTypeID == 0x25d)
                                {
                                    return this.GetPrintKeyList_LT_E_ZuF(numbers);
                                }
                                if ((PlayTypeID != 0x25e) && (PlayTypeID != 0x25f))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_LT_E_B(numbers);
                            }
                            return this.GetPrintKeyList_LT_E_ZhiD(numbers);

                        case "LT-E02":
                            if (PlayTypeID != 0x259)
                            {
                                if (PlayTypeID == 0x25a)
                                {
                                    return this.GetPrintKeyList_LT_E02_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x25b)
                                {
                                    return this.GetPrintKeyList_LT_E02_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x25c)
                                {
                                    return this.GetPrintKeyList_LT_E02_ZuF(numbers);
                                }
                                if (PlayTypeID == 0x25d)
                                {
                                    return this.GetPrintKeyList_LT_E02_ZuF(numbers);
                                }
                                if ((PlayTypeID != 0x25e) && (PlayTypeID != 0x25f))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_LT_E02_B(numbers);
                            }
                            return this.GetPrintKeyList_LT_E02_ZhiD(numbers);

                        case "SN-3000CQA":
                            if (PlayTypeID != 0x259)
                            {
                                if (PlayTypeID == 0x25a)
                                {
                                    return this.GetPrintKeyList_SN_3000CQA_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x25b)
                                {
                                    return this.GetPrintKeyList_SN_3000CQA_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x25c)
                                {
                                    return this.GetPrintKeyList_SN_3000CQA_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x25d)
                                {
                                    return this.GetPrintKeyList_SN_3000CQA_ZhiD(numbers);
                                }
                                if ((PlayTypeID != 0x25e) && (PlayTypeID != 0x25f))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_SN_3000CQA_B(numbers);
                            }
                            return this.GetPrintKeyList_SN_3000CQA_ZhiD(numbers);

                        case "SN-2000":
                            if (PlayTypeID != 0x259)
                            {
                                if (PlayTypeID != 0x25a)
                                {
                                    if (PlayTypeID == 0x25b)
                                    {
                                        return this.GetPrintKeyList_SN_2000_ZhiD(numbers);
                                    }
                                    if (PlayTypeID == 0x25c)
                                    {
                                        return this.GetPrintKeyList_SN_2000_ZhiD(numbers);
                                    }
                                    if (PlayTypeID == 0x25d)
                                    {
                                        return this.GetPrintKeyList_SN_2000_ZhiD(numbers);
                                    }
                                    if ((PlayTypeID != 0x25e) && (PlayTypeID != 0x25f))
                                    {
                                        break;
                                    }
                                }
                                return this.GetPrintKeyList_SN_2000_ZhiD(numbers);
                            }
                            return this.GetPrintKeyList_SN_2000_ZhiD(numbers);

                        case "SN_3000CG":
                            if (PlayTypeID != 0x259)
                            {
                                if (PlayTypeID == 0x25a)
                                {
                                    return this.GetPrintKeyList_SN_3000CG_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x25b)
                                {
                                    return this.GetPrintKeyList_SN_3000CG_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x25c)
                                {
                                    return this.GetPrintKeyList_SN_3000CG_Zu6F(numbers);
                                }
                                if (PlayTypeID == 0x25d)
                                {
                                    return this.GetPrintKeyList_SN_3000CG_Zu6F(numbers);
                                }
                                if ((PlayTypeID == 0x25e) || (PlayTypeID == 0x25f))
                                {
                                    return this.GetPrintKeyList_SN_3000CG_Zu6F(numbers);
                                }
                                break;
                            }
                            return this.GetPrintKeyList_SN_3000CG_ZhiD(numbers);
                    }
                }
                return "";
            }

            private string GetPrintKeyList_FCR8000_B(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_FCR8000_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_FCR8000_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[ENTER]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_FCTZST2_2_B(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_FCTZST2_2_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_FCTZST2_2_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E_B(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0').Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7"))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7");
            }

            private string GetPrintKeyList_LT_E_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2).Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7"))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[8]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E_ZuF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    str = (str + "[" + Convert.ToString(str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").Length) + "]") + "[ENTER]";
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7");
            }

            private string GetPrintKeyList_LT_E02_B(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0').Replace("0", "O").Replace("1", "3").Replace("2", "A").Replace("3", "B").Replace("4", "6").Replace("5", "C").Replace("6", "D").Replace("7", "9").Replace("8", "E").Replace("9", "F"))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E02_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "3").Replace("2", "A").Replace("3", "B").Replace("4", "6").Replace("5", "C").Replace("6", "D").Replace("7", "9").Replace("8", "E").Replace("9", "F");
            }

            private string GetPrintKeyList_LT_E02_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2).Replace("0", "O").Replace("1", "3").Replace("2", "A").Replace("3", "B").Replace("4", "6").Replace("5", "C").Replace("6", "D").Replace("7", "9").Replace("8", "E").Replace("9", "F"))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[8]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E02_ZuF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    str = (str + "[" + Convert.ToString(str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").Length) + "]") + "[ENTER]";
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "3").Replace("2", "A").Replace("3", "B").Replace("4", "6").Replace("5", "C").Replace("6", "D").Replace("7", "9").Replace("8", "E").Replace("9", "F");
            }

            private string GetPrintKeyList_SN_2000_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CG_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CG_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        str = str + "[Enter]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CG_Zu6F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return (str + "[Enter]");
            }

            private string GetPrintKeyList_SN_3000CQA_B(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CQA_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CQA_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string HPSH_ConvertFormatToElectronTicket_D(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                return Number.Replace(",", " ");
            }

            private string HPSH_ConvertFormatToElectronTicket_F(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                foreach (string str2 in Number.Split(new char[] { ',' }))
                {
                    if (str2.Length > 1)
                    {
                        str = "(" + str2 + ")";
                    }
                }
                return str;
            }

            public override string HPSH_ToElectronicTicket(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                if (PlayTypeID == 0x259)
                {
                    return this.HPSH_ToElectronicTicket_D(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (PlayTypeID == 0x25a)
                {
                    return this.HPSH_ToElectronicTicket_F(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if ((PlayTypeID == 0x25b) || (PlayTypeID == 0x25c))
                {
                    return this.HPSH_ToElectronicTicket_Zu(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (PlayTypeID == 0x25e)
                {
                    return this.HPSH_ToElectronicTicket_ZhiB(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (PlayTypeID == 0x25d)
                {
                    return this.HPSH_ToElectronicTicket_Zu3F(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (PlayTypeID == 0x25f)
                {
                    return this.HPSH_ToElectronicTicket_ZuB(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                return "";
            }

            private string HPSH_ToElectronicTicket_D(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPSH_ConvertFormatToElectronTicket_D(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = 0x259;
                return "";
            }

            private string HPSH_ToElectronicTicket_F(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPSH_ConvertFormatToElectronTicket_F(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            private string HPSH_ToElectronicTicket_ZhiB(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str in Number.Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str + "\n";
                }
                NewPlayTypeID = 0x25e;
                return "";
            }

            private string HPSH_ToElectronicTicket_Zu(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPSH_ConvertFormatToElectronTicket_D(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = 0x25b;
                return "";
            }

            private string HPSH_ToElectronicTicket_Zu3F(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPSH_ConvertFormatToElectronTicket_D(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = 0x25b;
                return "";
            }

            private string HPSH_ToElectronicTicket_ZuB(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str in Number.Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str + "\n";
                }
                NewPlayTypeID = 0x25b;
                return "";
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x259)
                {
                    return this.ToElectronicTicket_DYJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x25a)
                {
                    return this.ToElectronicTicket_DYJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x25b)
                {
                    return this.ToElectronicTicket_DYJ_Zu(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x25e)
                {
                    return this.ToElectronicTicket_DYJ_ZhiB(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x25c)
                {
                    return this.ToElectronicTicket_DYJ_Zu6F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x25d)
                {
                    return this.ToElectronicTicket_DYJ_Zu3F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x25f)
                {
                    return this.ToElectronicTicket_DYJ_ZuB(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd0, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_ZhiB(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xcc, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_Zu(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_DYJ_Zu3D_Zu6(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_Zu3F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_DYJ_Zu3F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_Zu6F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_DYJ_Zu3D_Zu6(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_ZuB(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_DYJ_ZuB(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x259)
                {
                    return this.ToElectronicTicket_HPSH_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x25a)
                {
                    return this.ToElectronicTicket_HPSH_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if ((PlayTypeID == 0x25b) || (PlayTypeID == 0x25c))
                {
                    return this.ToElectronicTicket_HPSH_Zu(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x25e)
                {
                    return this.ToElectronicTicket_HPSH_ZhiB(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x25d)
                {
                    return this.ToElectronicTicket_HPSH_Zu3F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x25f)
                {
                    return this.ToElectronicTicket_HPSH_ZuB(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd0, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_ZhiB(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xcc, number, multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_Zu(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_Zu3D_Zu6(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_Zu3F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_Zu3F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_ZuB(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_ZuB(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0x259) || (PlayType == 0x25a))
                {
                    return this.ToSingle_Zhi(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x25b) || (PlayType == 0x25c))
                {
                    return this.ToSingle_Zu3D_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x25d)
                {
                    return this.ToSingle_Zu3F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x25e)
                {
                    return this.ToSingle_ZhiB(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x25f)
                {
                    return this.ToSingle_ZuB(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[3];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            list.Add(str3);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZhiB(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 0) || (num > 0x1b))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        for (int m = 0; m <= 9; m++)
                        {
                            if (((i + k) + m) == num)
                            {
                                list.Add(i.ToString() + k.ToString() + m.ToString());
                            }
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3D_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = Number;
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                if (length == 2)
                {
                    for (int j = 0; j < (length - 1); j++)
                    {
                        for (int k = j + 1; k < length; k++)
                        {
                            list.Add(chArray[j].ToString() + chArray[j].ToString() + chArray[k].ToString());
                            list.Add(chArray[j].ToString() + chArray[k].ToString() + chArray[k].ToString());
                        }
                    }
                }
                else
                {
                    for (int m = 0; m < (length - 2); m++)
                    {
                        for (int n = m + 1; n < (length - 1); n++)
                        {
                            for (int num6 = n + 1; num6 < length; num6++)
                            {
                                list.Add(chArray[m].ToString() + chArray[n].ToString() + chArray[num6].ToString());
                            }
                        }
                    }
                }
                string[] strArray = new string[list.Count];
                for (int i = 0; i < list.Count; i++)
                {
                    strArray[i] = list[i].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[i].ToString() + chArray[k].ToString());
                        list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZuB(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                ArrayList list = new ArrayList();
                if ((num < 1) || (num > 0x1a))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        if ((i != k) && (((i + i) + k) == num))
                        {
                            list.Add(i.ToString() + i.ToString() + k.ToString());
                        }
                    }
                }
                if ((num >= 3) && (num <= 0x18))
                {
                    for (int m = 0; m <= 7; m++)
                    {
                        for (int n = m + 1; n <= 8; n++)
                        {
                            for (int num6 = n + 1; num6 <= 9; num6++)
                            {
                                if (((m + n) + num6) == num)
                                {
                                    list.Add(m.ToString() + n.ToString() + num6.ToString());
                                }
                            }
                        }
                    }
                }
                CanonicalNumber = num.ToString();
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }
        }

        public class FJFC20X5 : Lottery.LotteryBase
        {
            public const string Code = "FJFC20X5";
            public const int ID = 30;
            public const double MaxMoney = 4004.0;
            public const string Name = "福建风采20选5";
            public const int PlayType_D = 0xbb9;
            public const int PlayType_F = 0xbba;
            public const string sID = "30";

            public FJFC20X5()
            {
                base.id = 30;
                base.name = "福建风采20选5";
                base.code = "FJFC20X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xbb9)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,19}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xbb9) ? 1 : 2))) && (strArray2.Length <= 2002.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0xbb9);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x15);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xbb9) && (play_type <= 0xbba));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num8 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num8++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num8)
                                    {
                                        case 5:
                                            num++;
                                            num4 += WinMoneyList[0];
                                            WinMoneyNoWithTax += WinMoneyList[1];
                                            break;

                                        case 4:
                                            num2++;
                                            num4 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                            break;

                                        case 3:
                                            num3++;
                                            num4 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 20)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xbb9, "单式"), new Lottery.PlayType(0xbba, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class FJTC22X5 : Lottery.LotteryBase
        {
            public const string Code = "FJTC22X5";
            public const int ID = 0x25;
            public const double MaxMoney = 4004.0;
            public const string Name = "福建体彩22选5";
            public const int PlayType_D = 0xe75;
            public const int PlayType_F = 0xe76;
            public const string sID = "37";

            public FJTC22X5()
            {
                base.id = 0x25;
                base.name = "福建体彩22选5";
                base.code = "FJTC22X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xe75)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,13}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xe75) ? 1 : 2))) && (strArray2.Length <= 2002.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0xe75);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x17);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xe75) && (play_type <= 0xe76));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num8 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num8++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num8)
                                    {
                                        case 5:
                                            num++;
                                            num4 += WinMoneyList[0];
                                            WinMoneyNoWithTax += WinMoneyList[1];
                                            break;

                                        case 4:
                                            num2++;
                                            num4 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                            break;

                                        case 3:
                                            num3++;
                                            num4 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x16)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xe75, "单式"), new Lottery.PlayType(0xe76, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class FJTC31X7 : Lottery.LotteryBase
        {
            public const string Code = "FJTC31X7";
            public const int ID = 0x23;
            public const double MaxMoney = 155040.0;
            public const string Name = "福建体彩31选7";
            public const int PlayType_D = 0xdad;
            public const int PlayType_F = 0xdae;
            public const string sID = "35";

            public FJTC31X7()
            {
                base.id = 0x23;
                base.name = "福建体彩31选7";
                base.code = "FJTC31X7";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xdad)
                {
                    str2 = @"(\d\d\s){6}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,19}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xdad) ? 1 : 2))) && (strArray2.Length <= 77520.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){7}[+]\s\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number.Substring(0, 20), ref canonicalNumber, 0xdad);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 7; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x20);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xdad) && (play_type <= 0xdae));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x19)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 0x10))
                {
                    return -3.0;
                }
                string str = WinNumber.Substring(0x17, 2);
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                double num9 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        if (strArray2.Length > 1)
                        {
                            int num11 = 0;
                            string[] strArray3 = strArray[i].Split(new char[] { ' ' });
                            for (int k = 0; k < strArray3.Length; k++)
                            {
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num11++;
                                }
                            }
                            if (num11 == 8)
                            {
                                num++;
                                num9 += WinMoneyList[0];
                                WinMoneyNoWithTax += WinMoneyList[1];
                            }
                        }
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 20)
                            {
                                string[] strArray4 = new string[7];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num14 = 0;
                                bool flag = false;
                                bool flag2 = true;
                                for (int m = 0; m < 7; m++)
                                {
                                    strArray4[m] = match.Groups["R" + m.ToString()].ToString().Trim();
                                    if (strArray4[m] == "")
                                    {
                                        flag2 = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray4[m] + " ") >= 0)
                                    {
                                        num14++;
                                    }
                                    if (str == strArray4[m])
                                    {
                                        flag = true;
                                    }
                                }
                                if (flag2)
                                {
                                    if (num14 == 7)
                                    {
                                        num2++;
                                        num9 += WinMoneyList[2];
                                        WinMoneyNoWithTax += WinMoneyList[3];
                                    }
                                    else if ((num14 == 6) && flag)
                                    {
                                        num3++;
                                        num9 += WinMoneyList[4];
                                        WinMoneyNoWithTax += WinMoneyList[5];
                                    }
                                    else if (num14 == 6)
                                    {
                                        num4++;
                                        num9 += WinMoneyList[6];
                                        WinMoneyNoWithTax += WinMoneyList[7];
                                    }
                                    else if ((num14 == 5) && flag)
                                    {
                                        num5++;
                                        num9 += WinMoneyList[8];
                                        WinMoneyNoWithTax += WinMoneyList[9];
                                    }
                                    else if (num14 == 5)
                                    {
                                        num6++;
                                        num9 += WinMoneyList[10];
                                        WinMoneyNoWithTax += WinMoneyList[11];
                                    }
                                    else if ((num14 == 4) && flag)
                                    {
                                        num7++;
                                        num9 += WinMoneyList[12];
                                        WinMoneyNoWithTax += WinMoneyList[13];
                                    }
                                    else if (num14 == 4)
                                    {
                                        num8++;
                                        num9 += WinMoneyList[14];
                                        WinMoneyNoWithTax += WinMoneyList[15];
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "幸运奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "特等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "一等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num7.ToString() + "注";
                }
                if (num8 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num8.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num9;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x1f)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xdad, "单式"), new Lottery.PlayType(0xdae, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class FJTC36X7 : Lottery.LotteryBase
        {
            public const string Code = "FJTC36X7";
            public const int ID = 0x24;
            public const double MaxMoney = 155040.0;
            public const string Name = "福建体彩36选7";
            public const int PlayType_D = 0xe11;
            public const int PlayType_F = 0xe12;
            public const string sID = "36";

            public FJTC36X7()
            {
                base.id = 0x24;
                base.name = "福建体彩36选7";
                base.code = "FJTC36X7";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xe11)
                {
                    str2 = @"(\d\d\s){6}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,19}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xe11) ? 1 : 2))) && (strArray2.Length <= 77520.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){7}[+]\s\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number.Substring(0, 20), ref canonicalNumber, 0xe11);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 7; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x25);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xe11) && (play_type <= 0xe12));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x19)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 0x10))
                {
                    return -3.0;
                }
                string str = WinNumber.Substring(0x17, 2);
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                double num9 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        if (strArray2.Length > 1)
                        {
                            int num11 = 0;
                            string[] strArray3 = strArray[i].Split(new char[] { ' ' });
                            for (int k = 0; k < strArray3.Length; k++)
                            {
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num11++;
                                }
                            }
                            if (num11 == 8)
                            {
                                num++;
                                num9 += WinMoneyList[0];
                                WinMoneyNoWithTax += WinMoneyList[1];
                            }
                        }
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 20)
                            {
                                string[] strArray4 = new string[7];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num14 = 0;
                                bool flag = false;
                                bool flag2 = true;
                                for (int m = 0; m < 7; m++)
                                {
                                    strArray4[m] = match.Groups["R" + m.ToString()].ToString().Trim();
                                    if (strArray4[m] == "")
                                    {
                                        flag2 = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray4[m] + " ") >= 0)
                                    {
                                        num14++;
                                    }
                                    if (str == strArray4[m])
                                    {
                                        flag = true;
                                    }
                                }
                                if (flag2)
                                {
                                    if (num14 == 7)
                                    {
                                        num2++;
                                        num9 += WinMoneyList[2];
                                        WinMoneyNoWithTax += WinMoneyList[3];
                                    }
                                    else if ((num14 == 6) && flag)
                                    {
                                        num3++;
                                        num9 += WinMoneyList[4];
                                        WinMoneyNoWithTax += WinMoneyList[5];
                                    }
                                    else if (num14 == 6)
                                    {
                                        num4++;
                                        num9 += WinMoneyList[6];
                                        WinMoneyNoWithTax += WinMoneyList[7];
                                    }
                                    else if ((num14 == 5) && flag)
                                    {
                                        num5++;
                                        num9 += WinMoneyList[8];
                                        WinMoneyNoWithTax += WinMoneyList[9];
                                    }
                                    else if (num14 == 5)
                                    {
                                        num6++;
                                        num9 += WinMoneyList[10];
                                        WinMoneyNoWithTax += WinMoneyList[11];
                                    }
                                    else if ((num14 == 4) && flag)
                                    {
                                        num7++;
                                        num9 += WinMoneyList[12];
                                        WinMoneyNoWithTax += WinMoneyList[13];
                                    }
                                    else if ((num14 == 4) || ((num14 == 3) && flag))
                                    {
                                        num8++;
                                        num9 += WinMoneyList[14];
                                        WinMoneyNoWithTax += WinMoneyList[15];
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "幸运奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "特等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "一等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num7.ToString() + "注";
                }
                if (num8 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num8.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num9;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x24)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xe11, "单式"), new Lottery.PlayType(0xe12, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class FZ36X7 : Lottery.LotteryBase
        {
            public const string Code = "FZ36X7";
            public const int ID = 10;
            public const double MaxMoney = 20000.0;
            public const string Name = "泛珠36选7";
            public const int PlayType_D = 0x3e9;
            public const int PlayType_F = 0x3ea;
            public const string sID = "10";

            public FZ36X7()
            {
                base.id = 10;
                base.name = "泛珠36选7";
                base.code = "FZ36X7";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x3e9)
                {
                    str2 = @"(\d\d\s){6}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,35}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x3e9) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){6}[+]\s\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number.Replace("+ ", ""), ref canonicalNumber, 0x3e9);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 7; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x25);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x3e9) && (play_type <= 0x3ea));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x16)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 12))
                {
                    return -3.0;
                }
                string str = WinNumber.Substring(20, 2);
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                double num7 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 20)
                            {
                                string[] strArray3 = new string[7];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num10 = 0;
                                bool flag = false;
                                bool flag2 = true;
                                for (int k = 0; k < 7; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag2 = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num10++;
                                    }
                                    if (str == strArray3[k])
                                    {
                                        flag = true;
                                    }
                                }
                                if (flag2)
                                {
                                    if ((num10 == 6) && flag)
                                    {
                                        num++;
                                        num7 += WinMoneyList[0];
                                        WinMoneyNoWithTax += WinMoneyList[1];
                                    }
                                    else if (num10 == 6)
                                    {
                                        num2++;
                                        num7 += WinMoneyList[2];
                                        WinMoneyNoWithTax += WinMoneyList[3];
                                    }
                                    else if ((num10 == 5) && flag)
                                    {
                                        num3++;
                                        num7 += WinMoneyList[4];
                                        WinMoneyNoWithTax += WinMoneyList[5];
                                    }
                                    else if (num10 == 5)
                                    {
                                        num4++;
                                        num7 += WinMoneyList[6];
                                        WinMoneyNoWithTax += WinMoneyList[7];
                                    }
                                    else if ((num10 == 4) && flag)
                                    {
                                        num5++;
                                        num7 += WinMoneyList[8];
                                        WinMoneyNoWithTax += WinMoneyList[9];
                                    }
                                    else if ((num10 == 4) || ((num10 == 3) && flag))
                                    {
                                        num6++;
                                        num7 += WinMoneyList[10];
                                        WinMoneyNoWithTax += WinMoneyList[11];
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num7;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x24)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x3e9, "单式"), new Lottery.PlayType(0x3ea, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    string str = LotteryMachine;
                    if (str != null)
                    {
                        if (!(str == "CR_YTCII2"))
                        {
                            if ((str == "RS6500") && ((PlayTypeID == 0x3e9) || (PlayTypeID == 0x3ea)))
                            {
                                return this.GetPrintKeyList_RS6500(numbers);
                            }
                        }
                        else if ((PlayTypeID == 0x3e9) || (PlayTypeID == 0x3ea))
                        {
                            return this.GetPrintKeyList_CR_YTCII2(numbers);
                        }
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CR_YTCII2(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class HBKLPK : Lottery.LotteryBase
        {
            public const string Code = "HBKLPK";
            public const int ID = 0x30;
            public const double MaxMoney = 200000.0;
            public const string Name = "湖北快乐扑克";
            public const int PlayType_Mixed = 0x12c0;
            public const int PlayType_RX1_D = 0x12c1;
            public const int PlayType_RX1_F = 0x12c2;
            public const int PlayType_RX2_D = 0x12c3;
            public const int PlayType_RX2_F = 0x12c4;
            public const int PlayType_RX3_D = 0x12c5;
            public const int PlayType_RX3_F = 0x12c6;
            public const int PlayType_X4_ZhiD = 0x12cb;
            public const int PlayType_X4_ZhiF = 0x12cc;
            public const int PlayType_X4_Zu12 = 0x12c8;
            public const int PlayType_X4_Zu24 = 0x12c7;
            public const int PlayType_X4_Zu4 = 0x12ca;
            public const int PlayType_X4_Zu6 = 0x12c9;
            public const string sID = "48";

            public HBKLPK()
            {
                base.id = 0x30;
                base.name = "湖北快乐扑克";
                base.code = "HBKLPK";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x12c0)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if ((PlayType == 0x12c1) || (PlayType == 0x12c2))
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if ((PlayType == 0x12c3) || (PlayType == 0x12c4))
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if ((PlayType == 0x12c5) || (PlayType == 0x12c6))
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if (PlayType == 0x12c7)
                {
                    return this.AnalyseScheme_X4_Zu24(Content, PlayType);
                }
                if (PlayType == 0x12c8)
                {
                    return this.AnalyseScheme_X4_Zu12(Content, PlayType);
                }
                if (PlayType == 0x12c9)
                {
                    return this.AnalyseScheme_X4_Zu6(Content, PlayType);
                }
                if (PlayType == 0x12ca)
                {
                    return this.AnalyseScheme_X4_Zu4(Content, PlayType);
                }
                if ((PlayType != 0x12cb) && (PlayType != 0x12cc))
                {
                    return "";
                }
                return this.AnalyseScheme_X4_Zhi(Content, PlayType);
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[任选一单式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x12c1);
                    }
                    if (strArray[i].StartsWith("[任选一复式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x12c2);
                    }
                    if (strArray[i].StartsWith("[任选二单式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x12c3);
                    }
                    if (strArray[i].StartsWith("[任选二复式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x12c4);
                    }
                    if (strArray[i].StartsWith("[任选三单式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x12c5);
                    }
                    if (strArray[i].StartsWith("[任选三复式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x12c6);
                    }
                    if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu24(base.FilterPreFix(strArray[i]), 0x12c7);
                    }
                    if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu12(base.FilterPreFix(strArray[i]), 0x12c8);
                    }
                    if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu6(base.FilterPreFix(strArray[i]), 0x12c9);
                    }
                    if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu4(base.FilterPreFix(strArray[i]), 0x12ca);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x12c1)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x12c2))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x12c1))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x12c3)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x12c4))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x12c3))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x12c5)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x12c6))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x12c5))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x12cb)
                {
                    str2 = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i].ToString());
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x12cb) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu12(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu12(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu24(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3,12}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu24(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu4(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu6(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu6(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex("((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                return "";
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x12c0) && (play_type <= 0x12cc));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 20))
                {
                    return -3.0;
                }
                if (!this.AnalyseWinNumber(WinNumber))
                {
                    return -5.0;
                }
                int winCount = 0;
                int num2 = 0;
                int num3 = 0;
                if (PlayType == 0x12c0)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13]);
                }
                if ((PlayType == 0x12c1) || (PlayType == 0x12c2))
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref winCount);
                }
                if ((PlayType == 0x12c3) || (PlayType == 0x12c4))
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref winCount);
                }
                if ((PlayType == 0x12c5) || (PlayType == 0x12c6))
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num2, ref num3);
                }
                if ((PlayType == 0x12cb) || (PlayType == 0x12cc))
                {
                    return this.ComputeWin_X4_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], ref num2, ref num3);
                }
                if (PlayType == 0x12c7)
                {
                    return this.ComputeWin_X4_Zu24(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref winCount);
                }
                if (PlayType == 0x12c8)
                {
                    return this.ComputeWin_X4_Zu12(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], ref winCount);
                }
                if (PlayType == 0x12c9)
                {
                    return this.ComputeWin_X4_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], ref winCount);
                }
                if (PlayType == 0x12ca)
                {
                    return this.ComputeWin_X4_Zu4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x12], WinMoneyList[0x13], ref winCount);
                }
                return -4.0;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8, double WinMoney9, double WinMoneyNoWithTax9, double WinMoney10, double WinMoneyNoWithTax10)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int winCount = 0;
                    int num14 = 0;
                    int num15 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[任选一单式]") || strArray[i].StartsWith("[任选一复式]"))
                    {
                        num += this.ComputeWin_RX1(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选二单式]") || strArray[i].StartsWith("[任选二复式]"))
                    {
                        num += this.ComputeWin_RX2(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选三单式]") || strArray[i].StartsWith("[任选三复式]"))
                    {
                        num += this.ComputeWin_RX3(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num4 += num14;
                        num5 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四直选单式]") || strArray[i].StartsWith("[选四直选复式]"))
                    {
                        num += this.ComputeWin_X4_Zhi(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, WinMoney6, WinMoneyNoWithTax6, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += num14;
                        num7 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        num += this.ComputeWin_X4_Zu24(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney7, WinMoneyNoWithTax7, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num8 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        num += this.ComputeWin_X4_Zu12(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney8, WinMoneyNoWithTax8, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num9 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        num += this.ComputeWin_X4_Zu6(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney9, WinMoneyNoWithTax9, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num10 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        num += this.ComputeWin_X4_Zu4(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney10, WinMoneyNoWithTax10, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num11 += winCount;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选一" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选二" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中4 " + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中3 " + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选24 " + num8.ToString() + "注");
                }
                if (num9 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选12 " + num9.ToString() + "注");
                }
                if (num10 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选6 " + num10.ToString() + "注");
                }
                if (num11 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选4 " + num11.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        WinCount++;
                                        num += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选一" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                int num = 0;
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                if (num == 2)
                                {
                                    WinCount++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选二" + ((int) WinCount).ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 3:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 2:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 4:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 3:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中4 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中3 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zu12(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu12(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选12 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu24(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu24(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选24 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选4 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu6(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选6 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private string FilterRepeated(string NumberPart)
            {
                string number = "";
                string[] strArray = NumberPart.Split(new char[] { ',' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (("23456789AJQK10".IndexOf(strArray[i]) >= 0) && (number.IndexOf(strArray[i]) == -1))
                    {
                        number = number + strArray[i] + ",";
                    }
                }
                number = number.Substring(0, number.Length - 1);
                return this.SortKLPK(number);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x12c0, "混合投注"), new Lottery.PlayType(0x12c1, "任选一单式"), new Lottery.PlayType(0x12c2, "任选一复式"), new Lottery.PlayType(0x12c3, "任选二单式"), new Lottery.PlayType(0x12c4, "任选二复式"), new Lottery.PlayType(0x12c5, "任选三单式"), new Lottery.PlayType(0x12c6, "任选三复式"), new Lottery.PlayType(0x12c7, "选四组选24"), new Lottery.PlayType(0x12c8, "选四组选12"), new Lottery.PlayType(0x12c9, "选四组选6"), new Lottery.PlayType(0x12ca, "选四组选4"), new Lottery.PlayType(0x12cb, "选四直选单式"), new Lottery.PlayType(0x12cc, "选四组选复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            private string SortKLPK(string Number)
            {
                string[] strArray = new string[13];
                string str = "";
                string[] strArray2 = Number.Split(new char[] { ',' });
                for (int i = 0; i < strArray2.Length; i++)
                {
                    if ("23456789AJQK10".IndexOf(strArray2[i]) >= 0)
                    {
                        if (strArray2[i] == "A")
                        {
                            strArray[0] = "A";
                        }
                        else if (strArray2[i] == "2")
                        {
                            strArray[1] = "2";
                        }
                        else if (strArray2[i] == "3")
                        {
                            strArray[2] = "3";
                        }
                        else if (strArray2[i] == "4")
                        {
                            strArray[3] = "4";
                        }
                        else if (strArray2[i] == "5")
                        {
                            strArray[4] = "5";
                        }
                        else if (strArray2[i] == "6")
                        {
                            strArray[5] = "6";
                        }
                        else if (strArray2[i] == "7")
                        {
                            strArray[6] = "7";
                        }
                        else if (strArray2[i] == "8")
                        {
                            strArray[7] = "8";
                        }
                        else if (strArray2[i] == "9")
                        {
                            strArray[8] = "9";
                        }
                        else if (strArray2[i] == "10")
                        {
                            strArray[9] = "10";
                        }
                        else if (strArray2[i] == "J")
                        {
                            strArray[10] = "J";
                        }
                        else if (strArray2[i] == "Q")
                        {
                            strArray[11] = "Q";
                        }
                        else if (strArray2[i] == "K")
                        {
                            strArray[12] = "K";
                        }
                    }
                }
                for (int j = 0; j < 13; j++)
                {
                    if (strArray[j] != null)
                    {
                        str = str + strArray[j] + ",";
                    }
                }
                return str.Substring(0, str.Length - 1);
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x12c0)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x12c1) || (PlayType == 0x12c2))
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x12c3) || (PlayType == 0x12c4))
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x12c5) || (PlayType == 0x12c6))
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x12c7)
                {
                    return this.ToSingle_X4_Zu24(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x12c8)
                {
                    return this.ToSingle_X4_Zu12(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x12c9)
                {
                    return this.ToSingle_X4_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x12ca)
                {
                    return this.ToSingle_X4_Zu4(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x12cb) && (PlayType != 0x12cc))
                {
                    return null;
                }
                return this.ToSingle_X4_Zhi(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[任选1单式]") || Number.StartsWith("[任选1复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX1(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选2单式]") || Number.StartsWith("[任选2复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX2(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选3单式]") || Number.StartsWith("[任选3复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX3(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选24]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu24(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选12]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu12(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选6]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu6(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选4]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu4(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (!Number.StartsWith("[选4直选单式]") && !Number.StartsWith("[选4直选复式]"))
                {
                    return null;
                }
                return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zhi(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                int num = 0;
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                    if (strArray[i] != "_")
                    {
                        Regex regex2 = new Regex("((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        if (regex2.IsMatch(strArray[i]))
                        {
                            num++;
                        }
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    if (str != "_")
                    {
                        str = str + ",_,_,_";
                        list.Add(str);
                    }
                }
                for (int m = 0; m < strArray[1].Length; m++)
                {
                    string str2 = strArray[1][m].ToString();
                    if (str2 != "_")
                    {
                        str2 = "_," + str2 + ",_,_";
                        list.Add(str2);
                    }
                }
                for (int n = 0; n < strArray[2].Length; n++)
                {
                    string str3 = strArray[2][n].ToString();
                    if (str3 != "_")
                    {
                        str3 = "_,_," + str3 + ",_";
                        list.Add(str3);
                    }
                }
                for (int num7 = 0; num7 < strArray[3].Length; num7++)
                {
                    string str4 = strArray[3][num7].ToString();
                    if (str4 != "_")
                    {
                        str4 = "_,_,_," + str4;
                        list.Add(str4);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num8 = 0; num8 < list.Count; num8++)
                {
                    strArray2[num8] = list[num8].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        string[] strArray3;
                        IntPtr ptr;
                        (strArray3 = strArray)[(int) (ptr = (IntPtr) j)] = strArray3[(int) ptr] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 5)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        strArray[j] = strArray[j] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 6)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu12(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu24(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                string[] strArray = CanonicalNumber.Split(new char[] { ',' });
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int i = 0; i < (length - 3); i++)
                {
                    for (int k = i + 1; k < (length - 2); k++)
                    {
                        for (int m = k + 1; m < (length - 1); m++)
                        {
                            for (int n = m + 1; n < length; n++)
                            {
                                list.Add(strArray[i].ToString() + "," + strArray[k].ToString() + "," + strArray[m].ToString() + "," + strArray[n].ToString());
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu4(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2])) && ((Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3]))) && (((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3]))))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[3]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]))) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3])))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }
        }

        public class HD15X5 : Lottery.LotteryBase
        {
            public const string Code = "HD15X5";
            public const int ID = 0x3b;
            public const double MaxMoney = 6006.0;
            public const string Name = "华东15选5";
            public const int PlayType_D = 0x170d;
            public const int PlayType_DT = 0x170f;
            public const int PlayType_F = 0x170e;
            public const string sID = "59";

            public HD15X5()
            {
                base.id = 0x3b;
                base.name = "华东15选5";
                base.code = "HD15X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x170d)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else if (PlayType == 0x170e)
                {
                    str2 = @"(\d\d\s){4,14}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){1,4}(,)(\s)(\d\d\s){1,13}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x170d) ? 1 : 2))) && (strArray2.Length <= 3003.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_F(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x170d)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else if (PlayType == 0x170e)
                {
                    str2 = @"(\d\d\s){4,14}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){1,4}(,)(\s)(\d\d\s){1,13}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x170d) ? 1 : 2))) && (strArray2.Length <= 3003.0))
                        {
                            if ((PlayType == 0x170e) && (strArray2.Length > 0x507))
                            {
                                if (strArray2.Length >= 1)
                                {
                                    for (int j = 0; j < strArray2.Length; j++)
                                    {
                                        str = str + strArray2[j] + "|1\n";
                                    }
                                }
                            }
                            else
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x170d);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x10);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x170d) && (play_type <= 0x170f));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num8 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num8++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num8)
                                    {
                                        case 5:
                                            if (this.isThreeContinuum(WinNumber))
                                            {
                                                num++;
                                                num4 += WinMoneyList[0];
                                                WinMoneyNoWithTax += WinMoneyList[1];
                                            }
                                            num2++;
                                            num4 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                            break;

                                        case 4:
                                            num3++;
                                            num4 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "特等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "一等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string ConvertFormatToElectronTicket_HPJX(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID == 0x170d) || (PlayTypeID == 0x170e))
                {
                    str = Number.Replace(" ", ",");
                }
                if (PlayTypeID == 0x170f)
                {
                    str = Number.Replace(" ", ",").Replace(",,,", "#00#");
                }
                return str;
            }

            private string ConvertFormatToElectronTicket_HPSH(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID == 0x170d) || (PlayTypeID == 0x170e))
                {
                    str = Number.Replace(" ", ",");
                }
                if (PlayTypeID == 0x170f)
                {
                    str = Number.Replace(" ", ",").Replace(",,,", "#00#");
                }
                return str;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 15)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            private string[] FilterRepeated(string[] NumberPart1, string[] NumberPart2)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart2.Length; i++)
                {
                    al.Add(NumberPart2[i]);
                }
                ArrayList list2 = new ArrayList();
                for (int j = 0; j < NumberPart1.Length; j++)
                {
                    int ball = _Convert.StrToInt(NumberPart1[j], -1);
                    if (!base.isExistBall(al, ball))
                    {
                        list2.Add(NumberPart1[j]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                list2.Sort(comparer);
                string[] strArray = new string[list2.Count];
                for (int k = 0; k < list2.Count; k++)
                {
                    strArray[k] = list2[k].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x170d, "单式"), new Lottery.PlayType(0x170e, "复式"), new Lottery.PlayType(0x170f, "胆拖") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                string str;
                Number = Number.Trim();
                if (Number == "")
                {
                    return "";
                }
                string[] numbers = Number.Split(new char[] { '\n' });
                if ((numbers == null) || (numbers.Length < 1))
                {
                    return "";
                }
                if ((((str = LotteryMachine) == null) || !(str == "FCR8000")) || ((PlayTypeID != 0x170d) && (PlayTypeID != 0x170e)))
                {
                    return "";
                }
                return this.GetPrintKeyList_FCR8000(numbers);
            }

            private string GetPrintKeyList_FCR8000(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            public override string HPSH_ToElectronicTicket(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                Number = Number.Trim();
                foreach (string str2 in Number.Replace(",", " ").Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            private bool isThreeContinuum(string Number)
            {
                string[] strArray = this.FilterRepeated(Number.Split(new char[] { ' ' }));
                if (strArray.Length >= 5)
                {
                    int[] numArray = new int[5];
                    for (int i = 0; i < 5; i++)
                    {
                        numArray[i] = int.Parse(strArray[i]);
                    }
                    for (int j = 0; j < 2; j++)
                    {
                        if ((((numArray[j] + 1) == numArray[j + 1]) && ((numArray[j] + 2) == numArray[j + 2])) && ((numArray[j] + 3) == numArray[j + 3]))
                        {
                            return true;
                        }
                    }
                }
                return false;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPJX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x170d)
                {
                    return this.ToElectronicTicket_HPJX_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x170e)
                {
                    return this.ToElectronicTicket_HPJX_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x170f)
                {
                    return this.ToElectronicTicket_HPJX_DT(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_DT(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    if (strArray.Length > 0x27)
                    {
                        for (int k = 0; k < strArray.Length; k += 5)
                        {
                            string number = "";
                            num3 = 0.0;
                            for (int m = 0; m < 5; m++)
                            {
                                if ((k + m) < strArray.Length)
                                {
                                    number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                    num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                                }
                            }
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                    else
                    {
                        for (int n = 0; n < strArray.Length; n++)
                        {
                            string str2 = "";
                            num3 = 0.0;
                            str2 = strArray[n].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[n].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x67, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, str2), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    if (strArray.Length > 0x27)
                    {
                        for (int k = 0; k < strArray.Length; k += 5)
                        {
                            string number = "";
                            num3 = 0.0;
                            for (int m = 0; m < 5; m++)
                            {
                                if ((k + m) < strArray.Length)
                                {
                                    number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                    num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                                }
                            }
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                    else
                    {
                        for (int n = 0; n < strArray.Length; n++)
                        {
                            string str2 = "";
                            num3 = 0.0;
                            str2 = strArray[n].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[n].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, str2), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x170d)
                {
                    return this.ToElectronicTicket_HPSH_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x170e)
                {
                    return this.ToElectronicTicket_HPSH_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x170f)
                {
                    return this.ToElectronicTicket_HPSH_DT(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_DT(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    if (strArray.Length > 0x27)
                    {
                        for (int k = 0; k < strArray.Length; k += 5)
                        {
                            string number = "";
                            num3 = 0.0;
                            for (int m = 0; m < 5; m++)
                            {
                                if ((k + m) < strArray.Length)
                                {
                                    number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                    num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                                }
                            }
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                    else
                    {
                        for (int n = 0; n < strArray.Length; n++)
                        {
                            string str2 = "";
                            num3 = 0.0;
                            str2 = strArray[n].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[n].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x67, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, str2), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    if (strArray.Length > 0x27)
                    {
                        for (int k = 0; k < strArray.Length; k += 5)
                        {
                            string number = "";
                            num3 = 0.0;
                            for (int m = 0; m < 5; m++)
                            {
                                if ((k + m) < strArray.Length)
                                {
                                    number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                    num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                                }
                            }
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                    else
                    {
                        for (int n = 0; n < strArray.Length; n++)
                        {
                            string str2 = "";
                            num3 = 0.0;
                            str2 = strArray[n].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[n].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, str2), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x170d)
                {
                    return this.ToSingle_DF(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x170e)
                {
                    return this.ToSingle_DF(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x170f)
                {
                    return this.ToSingle_DT(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_DF(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_DT(string Number, ref string CanonicalNumber)
            {
                string[] strArray = Number.Split(new char[] { ',' });
                CanonicalNumber = "";
                if (strArray.Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                string[] strArray2 = this.FilterRepeated(strArray[0].Trim().Split(new char[] { ' ' }));
                string[] strArray3 = this.FilterRepeated(strArray[1].Trim().Split(new char[] { ' ' }));
                string[] strArray4 = this.FilterRepeated(strArray2, strArray3);
                if ((((strArray4.Length + strArray3.Length) < 5) || (strArray4.Length < 1)) || (((strArray4.Length > 4) || (strArray3.Length < 2)) || (strArray3.Length > 14)))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray4.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray4[i] + " ";
                }
                CanonicalNumber = CanonicalNumber + ", ";
                for (int j = 0; j < strArray3.Length; j++)
                {
                    CanonicalNumber = CanonicalNumber + strArray3[j] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray4.Length;
                int num4 = strArray3.Length;
                switch (length)
                {
                    case 1:
                        for (int m = 0; m < (num4 - 3); m++)
                        {
                            for (int n = m + 1; n < (num4 - 2); n++)
                            {
                                for (int num7 = n + 1; num7 < (num4 - 1); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < num4; num8++)
                                    {
                                        list.Add(strArray4[0].ToString() + " " + strArray3[m].ToString() + " " + strArray3[n].ToString() + " " + strArray3[num7].ToString() + " " + strArray3[num8].ToString());
                                    }
                                }
                            }
                        }
                        break;

                    case 2:
                        for (int num9 = 0; num9 < (num4 - 2); num9++)
                        {
                            for (int num10 = num9 + 1; num10 < (num4 - 1); num10++)
                            {
                                for (int num11 = num10 + 1; num11 < num4; num11++)
                                {
                                    list.Add(strArray4[0].ToString() + " " + strArray4[1].ToString() + " " + strArray3[num9].ToString() + " " + strArray3[num10].ToString() + " " + strArray3[num11].ToString());
                                }
                            }
                        }
                        break;

                    case 3:
                        for (int num12 = 0; num12 < (num4 - 1); num12++)
                        {
                            for (int num13 = num12 + 1; num13 < num4; num13++)
                            {
                                list.Add(strArray4[0].ToString() + " " + strArray4[1].ToString() + " " + strArray4[2].ToString() + " " + strArray3[num12].ToString() + " " + strArray3[num13].ToString());
                            }
                        }
                        break;

                    case 4:
                        for (int num14 = 0; num14 < num4; num14++)
                        {
                            list.Add(strArray4[0].ToString() + " " + strArray4[1].ToString() + " " + strArray4[2].ToString() + " " + strArray4[3].ToString() + " " + strArray3[num14].ToString());
                        }
                        break;
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray5 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray5[k] = list[k].ToString();
                }
                return strArray5;
            }
        }

        public class HeBKLPK : Lottery.LotteryBase
        {
            public const string Code = "HeBKLPK";
            public const int ID = 50;
            public const double MaxMoney = 200000.0;
            public const string Name = "河北快乐扑克";
            public const int PlayType_Mixed = 0x1388;
            public const int PlayType_RX1_D = 0x1389;
            public const int PlayType_RX1_F = 0x138a;
            public const int PlayType_RX2_D = 0x138b;
            public const int PlayType_RX2_F = 0x138c;
            public const int PlayType_RX3_D = 0x138d;
            public const int PlayType_RX3_F = 0x138e;
            public const int PlayType_X4_ZhiD = 0x1393;
            public const int PlayType_X4_ZhiF = 0x1394;
            public const int PlayType_X4_Zu12 = 0x1390;
            public const int PlayType_X4_Zu24 = 0x138f;
            public const int PlayType_X4_Zu4 = 0x1392;
            public const int PlayType_X4_Zu6 = 0x1391;
            public const string sID = "50";

            public HeBKLPK()
            {
                base.id = 50;
                base.name = "河北快乐扑克";
                base.code = "HeBKLPK";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x1388)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if ((PlayType == 0x1389) || (PlayType == 0x138a))
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if ((PlayType == 0x138b) || (PlayType == 0x138c))
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if ((PlayType == 0x138d) || (PlayType == 0x138e))
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if (PlayType == 0x138f)
                {
                    return this.AnalyseScheme_X4_Zu24(Content, PlayType);
                }
                if (PlayType == 0x1390)
                {
                    return this.AnalyseScheme_X4_Zu12(Content, PlayType);
                }
                if (PlayType == 0x1391)
                {
                    return this.AnalyseScheme_X4_Zu6(Content, PlayType);
                }
                if (PlayType == 0x1392)
                {
                    return this.AnalyseScheme_X4_Zu4(Content, PlayType);
                }
                if ((PlayType != 0x1393) && (PlayType != 0x1394))
                {
                    return "";
                }
                return this.AnalyseScheme_X4_Zhi(Content, PlayType);
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[任选一单式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x1389);
                    }
                    if (strArray[i].StartsWith("[任选一复式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x138a);
                    }
                    if (strArray[i].StartsWith("[任选二单式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x138b);
                    }
                    if (strArray[i].StartsWith("[任选二复式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x138c);
                    }
                    if (strArray[i].StartsWith("[任选三单式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x138d);
                    }
                    if (strArray[i].StartsWith("[任选三复式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x138e);
                    }
                    if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu24(base.FilterPreFix(strArray[i]), 0x138f);
                    }
                    if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu12(base.FilterPreFix(strArray[i]), 0x1390);
                    }
                    if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu6(base.FilterPreFix(strArray[i]), 0x1391);
                    }
                    if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu4(base.FilterPreFix(strArray[i]), 0x1392);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1389)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x138a))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x1389))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x138b)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x138c))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x138b))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x138d)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x138e))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x138d))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1393)
                {
                    str2 = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i].ToString());
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1393) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu12(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu12(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu24(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3,12}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu24(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu4(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu6(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu6(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex("((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                return "";
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1388) && (play_type <= 0x1394));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 20))
                {
                    return -3.0;
                }
                if (!this.AnalyseWinNumber(WinNumber))
                {
                    return -5.0;
                }
                int winCount = 0;
                int num2 = 0;
                int num3 = 0;
                if (PlayType == 0x1388)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13]);
                }
                if ((PlayType == 0x1389) || (PlayType == 0x138a))
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref winCount);
                }
                if ((PlayType == 0x138b) || (PlayType == 0x138c))
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref winCount);
                }
                if ((PlayType == 0x138d) || (PlayType == 0x138e))
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num2, ref num3);
                }
                if ((PlayType == 0x1393) || (PlayType == 0x1394))
                {
                    return this.ComputeWin_X4_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], ref num2, ref num3);
                }
                if (PlayType == 0x138f)
                {
                    return this.ComputeWin_X4_Zu24(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref winCount);
                }
                if (PlayType == 0x1390)
                {
                    return this.ComputeWin_X4_Zu12(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], ref winCount);
                }
                if (PlayType == 0x1391)
                {
                    return this.ComputeWin_X4_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], ref winCount);
                }
                if (PlayType == 0x1392)
                {
                    return this.ComputeWin_X4_Zu4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x12], WinMoneyList[0x13], ref winCount);
                }
                return -4.0;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8, double WinMoney9, double WinMoneyNoWithTax9, double WinMoney10, double WinMoneyNoWithTax10)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int winCount = 0;
                    int num14 = 0;
                    int num15 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[任选一单式]") || strArray[i].StartsWith("[任选一复式]"))
                    {
                        num += this.ComputeWin_RX1(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选二单式]") || strArray[i].StartsWith("[任选二复式]"))
                    {
                        num += this.ComputeWin_RX2(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选三单式]") || strArray[i].StartsWith("[任选三复式]"))
                    {
                        num += this.ComputeWin_RX3(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num4 += num14;
                        num5 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四直选单式]") || strArray[i].StartsWith("[选四直选复式]"))
                    {
                        num += this.ComputeWin_X4_Zhi(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, WinMoney6, WinMoneyNoWithTax6, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += num14;
                        num7 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        num += this.ComputeWin_X4_Zu24(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney7, WinMoneyNoWithTax7, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num8 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        num += this.ComputeWin_X4_Zu12(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney8, WinMoneyNoWithTax8, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num9 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        num += this.ComputeWin_X4_Zu6(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney9, WinMoneyNoWithTax9, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num10 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        num += this.ComputeWin_X4_Zu4(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney10, WinMoneyNoWithTax10, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num11 += winCount;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选一" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选二" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中4 " + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中3 " + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选24 " + num8.ToString() + "注");
                }
                if (num9 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选12 " + num9.ToString() + "注");
                }
                if (num10 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选6 " + num10.ToString() + "注");
                }
                if (num11 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选4 " + num11.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        WinCount++;
                                        num += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选一" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                int num = 0;
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                if (num == 2)
                                {
                                    WinCount++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选二" + ((int) WinCount).ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 3:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 2:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 4:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 3:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中4 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中3 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zu12(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu12(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选12 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu24(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu24(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选24 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选4 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu6(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选6 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private string FilterRepeated(string NumberPart)
            {
                string number = "";
                string[] strArray = NumberPart.Split(new char[] { ',' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (("23456789AJQK10".IndexOf(strArray[i]) >= 0) && (number.IndexOf(strArray[i]) == -1))
                    {
                        number = number + strArray[i] + ",";
                    }
                }
                number = number.Substring(0, number.Length - 1);
                return this.SortKLPK(number);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1388, "混合投注"), new Lottery.PlayType(0x1389, "任选一单式"), new Lottery.PlayType(0x138a, "任选一复式"), new Lottery.PlayType(0x138b, "任选二单式"), new Lottery.PlayType(0x138c, "任选二复式"), new Lottery.PlayType(0x138d, "任选三单式"), new Lottery.PlayType(0x138e, "任选三复式"), new Lottery.PlayType(0x138f, "选四组选24"), new Lottery.PlayType(0x1390, "选四组选12"), new Lottery.PlayType(0x1391, "选四组选6"), new Lottery.PlayType(0x1392, "选四组选4"), new Lottery.PlayType(0x1393, "选四直选单式"), new Lottery.PlayType(0x1394, "选四组选复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            private string SortKLPK(string Number)
            {
                string[] strArray = new string[13];
                string str = "";
                string[] strArray2 = Number.Split(new char[] { ',' });
                for (int i = 0; i < strArray2.Length; i++)
                {
                    if ("23456789AJQK10".IndexOf(strArray2[i]) >= 0)
                    {
                        if (strArray2[i] == "A")
                        {
                            strArray[0] = "A";
                        }
                        else if (strArray2[i] == "2")
                        {
                            strArray[1] = "2";
                        }
                        else if (strArray2[i] == "3")
                        {
                            strArray[2] = "3";
                        }
                        else if (strArray2[i] == "4")
                        {
                            strArray[3] = "4";
                        }
                        else if (strArray2[i] == "5")
                        {
                            strArray[4] = "5";
                        }
                        else if (strArray2[i] == "6")
                        {
                            strArray[5] = "6";
                        }
                        else if (strArray2[i] == "7")
                        {
                            strArray[6] = "7";
                        }
                        else if (strArray2[i] == "8")
                        {
                            strArray[7] = "8";
                        }
                        else if (strArray2[i] == "9")
                        {
                            strArray[8] = "9";
                        }
                        else if (strArray2[i] == "10")
                        {
                            strArray[9] = "10";
                        }
                        else if (strArray2[i] == "J")
                        {
                            strArray[10] = "J";
                        }
                        else if (strArray2[i] == "Q")
                        {
                            strArray[11] = "Q";
                        }
                        else if (strArray2[i] == "K")
                        {
                            strArray[12] = "K";
                        }
                    }
                }
                for (int j = 0; j < 13; j++)
                {
                    if (strArray[j] != null)
                    {
                        str = str + strArray[j] + ",";
                    }
                }
                return str.Substring(0, str.Length - 1);
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x1388)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1389) || (PlayType == 0x138a))
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x138b) || (PlayType == 0x138c))
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x138d) || (PlayType == 0x138e))
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x138f)
                {
                    return this.ToSingle_X4_Zu24(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1390)
                {
                    return this.ToSingle_X4_Zu12(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1391)
                {
                    return this.ToSingle_X4_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1392)
                {
                    return this.ToSingle_X4_Zu4(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x1393) && (PlayType != 0x1394))
                {
                    return null;
                }
                return this.ToSingle_X4_Zhi(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[任选1单式]") || Number.StartsWith("[任选1复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX1(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选2单式]") || Number.StartsWith("[任选2复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX2(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选3单式]") || Number.StartsWith("[任选3复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX3(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选24]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu24(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选12]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu12(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选6]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu6(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选4]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu4(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (!Number.StartsWith("[选4直选单式]") && !Number.StartsWith("[选4直选复式]"))
                {
                    return null;
                }
                return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zhi(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                int num = 0;
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                    if (strArray[i] != "_")
                    {
                        Regex regex2 = new Regex("((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        if (regex2.IsMatch(strArray[i]))
                        {
                            num++;
                        }
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    if (str != "_")
                    {
                        str = str + ",_,_,_";
                        list.Add(str);
                    }
                }
                for (int m = 0; m < strArray[1].Length; m++)
                {
                    string str2 = strArray[1][m].ToString();
                    if (str2 != "_")
                    {
                        str2 = "_," + str2 + ",_,_";
                        list.Add(str2);
                    }
                }
                for (int n = 0; n < strArray[2].Length; n++)
                {
                    string str3 = strArray[2][n].ToString();
                    if (str3 != "_")
                    {
                        str3 = "_,_," + str3 + ",_";
                        list.Add(str3);
                    }
                }
                for (int num7 = 0; num7 < strArray[3].Length; num7++)
                {
                    string str4 = strArray[3][num7].ToString();
                    if (str4 != "_")
                    {
                        str4 = "_,_,_," + str4;
                        list.Add(str4);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num8 = 0; num8 < list.Count; num8++)
                {
                    strArray2[num8] = list[num8].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        string[] strArray3;
                        IntPtr ptr;
                        (strArray3 = strArray)[(int) (ptr = (IntPtr) j)] = strArray3[(int) ptr] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 5)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        strArray[j] = strArray[j] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 6)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu12(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu24(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                string[] strArray = CanonicalNumber.Split(new char[] { ',' });
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int i = 0; i < (length - 3); i++)
                {
                    for (int k = i + 1; k < (length - 2); k++)
                    {
                        for (int m = k + 1; m < (length - 1); m++)
                        {
                            for (int n = m + 1; n < length; n++)
                            {
                                list.Add(strArray[i].ToString() + "," + strArray[k].ToString() + "," + strArray[m].ToString() + "," + strArray[n].ToString());
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu4(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2])) && ((Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3]))) && (((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3]))))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[3]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]))) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3])))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }
        }

        public class HLJKLPK : Lottery.LotteryBase
        {
            public const string Code = "HLJKLPK";
            public const int ID = 0x34;
            public const double MaxMoney = 200000.0;
            public const string Name = "黑龙江快乐扑克";
            public const int PlayType_Mixed = 0x1450;
            public const int PlayType_RX1_D = 0x1451;
            public const int PlayType_RX1_F = 0x1452;
            public const int PlayType_RX2_D = 0x1453;
            public const int PlayType_RX2_F = 0x1454;
            public const int PlayType_RX3_D = 0x1455;
            public const int PlayType_RX3_F = 0x1456;
            public const int PlayType_X4_ZhiD = 0x145b;
            public const int PlayType_X4_ZhiF = 0x145c;
            public const int PlayType_X4_Zu12 = 0x1458;
            public const int PlayType_X4_Zu24 = 0x1457;
            public const int PlayType_X4_Zu4 = 0x145a;
            public const int PlayType_X4_Zu6 = 0x1459;
            public const string sID = "52";

            public HLJKLPK()
            {
                base.id = 0x34;
                base.name = "黑龙江快乐扑克";
                base.code = "HLJKLPK";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x1450)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if ((PlayType == 0x1451) || (PlayType == 0x1452))
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if ((PlayType == 0x1453) || (PlayType == 0x1454))
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if ((PlayType == 0x1455) || (PlayType == 0x1456))
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if (PlayType == 0x1457)
                {
                    return this.AnalyseScheme_X4_Zu24(Content, PlayType);
                }
                if (PlayType == 0x1458)
                {
                    return this.AnalyseScheme_X4_Zu12(Content, PlayType);
                }
                if (PlayType == 0x1459)
                {
                    return this.AnalyseScheme_X4_Zu6(Content, PlayType);
                }
                if (PlayType == 0x145a)
                {
                    return this.AnalyseScheme_X4_Zu4(Content, PlayType);
                }
                if ((PlayType != 0x145b) && (PlayType != 0x145c))
                {
                    return "";
                }
                return this.AnalyseScheme_X4_Zhi(Content, PlayType);
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[任选一单式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x1451);
                    }
                    if (strArray[i].StartsWith("[任选一复式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x1452);
                    }
                    if (strArray[i].StartsWith("[任选二单式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x1453);
                    }
                    if (strArray[i].StartsWith("[任选二复式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x1454);
                    }
                    if (strArray[i].StartsWith("[任选三单式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x1455);
                    }
                    if (strArray[i].StartsWith("[任选三复式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x1456);
                    }
                    if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu24(base.FilterPreFix(strArray[i]), 0x1457);
                    }
                    if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu12(base.FilterPreFix(strArray[i]), 0x1458);
                    }
                    if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu6(base.FilterPreFix(strArray[i]), 0x1459);
                    }
                    if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu4(base.FilterPreFix(strArray[i]), 0x145a);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1451)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x1452))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x1451))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1453)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x1454))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x1453))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1455)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x1456))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x1455))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x145b)
                {
                    str2 = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i].ToString());
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x145b) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu12(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu12(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu24(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3,12}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu24(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu4(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu6(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu6(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex("((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                return "";
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1450) && (play_type <= 0x145c));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 20))
                {
                    return -3.0;
                }
                if (!this.AnalyseWinNumber(WinNumber))
                {
                    return -5.0;
                }
                int winCount = 0;
                int num2 = 0;
                int num3 = 0;
                if (PlayType == 0x1450)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13]);
                }
                if ((PlayType == 0x1451) || (PlayType == 0x1452))
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref winCount);
                }
                if ((PlayType == 0x1453) || (PlayType == 0x1454))
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref winCount);
                }
                if ((PlayType == 0x1455) || (PlayType == 0x1456))
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num2, ref num3);
                }
                if ((PlayType == 0x145b) || (PlayType == 0x145c))
                {
                    return this.ComputeWin_X4_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], ref num2, ref num3);
                }
                if (PlayType == 0x1457)
                {
                    return this.ComputeWin_X4_Zu24(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref winCount);
                }
                if (PlayType == 0x1458)
                {
                    return this.ComputeWin_X4_Zu12(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], ref winCount);
                }
                if (PlayType == 0x1459)
                {
                    return this.ComputeWin_X4_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], ref winCount);
                }
                if (PlayType == 0x145a)
                {
                    return this.ComputeWin_X4_Zu4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x12], WinMoneyList[0x13], ref winCount);
                }
                return -4.0;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8, double WinMoney9, double WinMoneyNoWithTax9, double WinMoney10, double WinMoneyNoWithTax10)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int winCount = 0;
                    int num14 = 0;
                    int num15 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[任选一单式]") || strArray[i].StartsWith("[任选一复式]"))
                    {
                        num += this.ComputeWin_RX1(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选二单式]") || strArray[i].StartsWith("[任选二复式]"))
                    {
                        num += this.ComputeWin_RX2(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选三单式]") || strArray[i].StartsWith("[任选三复式]"))
                    {
                        num += this.ComputeWin_RX3(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num4 += num14;
                        num5 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四直选单式]") || strArray[i].StartsWith("[选四直选复式]"))
                    {
                        num += this.ComputeWin_X4_Zhi(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, WinMoney6, WinMoneyNoWithTax6, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += num14;
                        num7 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        num += this.ComputeWin_X4_Zu24(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney7, WinMoneyNoWithTax7, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num8 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        num += this.ComputeWin_X4_Zu12(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney8, WinMoneyNoWithTax8, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num9 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        num += this.ComputeWin_X4_Zu6(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney9, WinMoneyNoWithTax9, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num10 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        num += this.ComputeWin_X4_Zu4(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney10, WinMoneyNoWithTax10, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num11 += winCount;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选一" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选二" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中4 " + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中3 " + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选24 " + num8.ToString() + "注");
                }
                if (num9 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选12 " + num9.ToString() + "注");
                }
                if (num10 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选6 " + num10.ToString() + "注");
                }
                if (num11 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选4 " + num11.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        WinCount++;
                                        num += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选一" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                int num = 0;
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                if (num == 2)
                                {
                                    WinCount++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选二" + ((int) WinCount).ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 3:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 2:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 4:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 3:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中4 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中3 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zu12(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu12(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选12 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu24(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu24(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选24 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选4 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu6(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选6 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private string FilterRepeated(string NumberPart)
            {
                string number = "";
                string[] strArray = NumberPart.Split(new char[] { ',' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (("23456789AJQK10".IndexOf(strArray[i]) >= 0) && (number.IndexOf(strArray[i]) == -1))
                    {
                        number = number + strArray[i] + ",";
                    }
                }
                number = number.Substring(0, number.Length - 1);
                return this.SortKLPK(number);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1450, "混合投注"), new Lottery.PlayType(0x1451, "任选一单式"), new Lottery.PlayType(0x1452, "任选一复式"), new Lottery.PlayType(0x1453, "任选二单式"), new Lottery.PlayType(0x1454, "任选二复式"), new Lottery.PlayType(0x1455, "任选三单式"), new Lottery.PlayType(0x1456, "任选三复式"), new Lottery.PlayType(0x1457, "选四组选24"), new Lottery.PlayType(0x1458, "选四组选12"), new Lottery.PlayType(0x1459, "选四组选6"), new Lottery.PlayType(0x145a, "选四组选4"), new Lottery.PlayType(0x145b, "选四直选单式"), new Lottery.PlayType(0x145c, "选四组选复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            private string SortKLPK(string Number)
            {
                string[] strArray = new string[13];
                string str = "";
                string[] strArray2 = Number.Split(new char[] { ',' });
                for (int i = 0; i < strArray2.Length; i++)
                {
                    if ("23456789AJQK10".IndexOf(strArray2[i]) >= 0)
                    {
                        if (strArray2[i] == "A")
                        {
                            strArray[0] = "A";
                        }
                        else if (strArray2[i] == "2")
                        {
                            strArray[1] = "2";
                        }
                        else if (strArray2[i] == "3")
                        {
                            strArray[2] = "3";
                        }
                        else if (strArray2[i] == "4")
                        {
                            strArray[3] = "4";
                        }
                        else if (strArray2[i] == "5")
                        {
                            strArray[4] = "5";
                        }
                        else if (strArray2[i] == "6")
                        {
                            strArray[5] = "6";
                        }
                        else if (strArray2[i] == "7")
                        {
                            strArray[6] = "7";
                        }
                        else if (strArray2[i] == "8")
                        {
                            strArray[7] = "8";
                        }
                        else if (strArray2[i] == "9")
                        {
                            strArray[8] = "9";
                        }
                        else if (strArray2[i] == "10")
                        {
                            strArray[9] = "10";
                        }
                        else if (strArray2[i] == "J")
                        {
                            strArray[10] = "J";
                        }
                        else if (strArray2[i] == "Q")
                        {
                            strArray[11] = "Q";
                        }
                        else if (strArray2[i] == "K")
                        {
                            strArray[12] = "K";
                        }
                    }
                }
                for (int j = 0; j < 13; j++)
                {
                    if (strArray[j] != null)
                    {
                        str = str + strArray[j] + ",";
                    }
                }
                return str.Substring(0, str.Length - 1);
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x1450)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1451) || (PlayType == 0x1452))
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1453) || (PlayType == 0x1454))
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1455) || (PlayType == 0x1456))
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1457)
                {
                    return this.ToSingle_X4_Zu24(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1458)
                {
                    return this.ToSingle_X4_Zu12(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1459)
                {
                    return this.ToSingle_X4_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x145a)
                {
                    return this.ToSingle_X4_Zu4(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x145b) && (PlayType != 0x145c))
                {
                    return null;
                }
                return this.ToSingle_X4_Zhi(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[任选1单式]") || Number.StartsWith("[任选1复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX1(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选2单式]") || Number.StartsWith("[任选2复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX2(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选3单式]") || Number.StartsWith("[任选3复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX3(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选24]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu24(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选12]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu12(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选6]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu6(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选4]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu4(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (!Number.StartsWith("[选4直选单式]") && !Number.StartsWith("[选4直选复式]"))
                {
                    return null;
                }
                return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zhi(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                int num = 0;
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                    if (strArray[i] != "_")
                    {
                        Regex regex2 = new Regex("((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        if (regex2.IsMatch(strArray[i]))
                        {
                            num++;
                        }
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    if (str != "_")
                    {
                        str = str + ",_,_,_";
                        list.Add(str);
                    }
                }
                for (int m = 0; m < strArray[1].Length; m++)
                {
                    string str2 = strArray[1][m].ToString();
                    if (str2 != "_")
                    {
                        str2 = "_," + str2 + ",_,_";
                        list.Add(str2);
                    }
                }
                for (int n = 0; n < strArray[2].Length; n++)
                {
                    string str3 = strArray[2][n].ToString();
                    if (str3 != "_")
                    {
                        str3 = "_,_," + str3 + ",_";
                        list.Add(str3);
                    }
                }
                for (int num7 = 0; num7 < strArray[3].Length; num7++)
                {
                    string str4 = strArray[3][num7].ToString();
                    if (str4 != "_")
                    {
                        str4 = "_,_,_," + str4;
                        list.Add(str4);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num8 = 0; num8 < list.Count; num8++)
                {
                    strArray2[num8] = list[num8].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        string[] strArray3;
                        IntPtr ptr;
                        (strArray3 = strArray)[(int) (ptr = (IntPtr) j)] = strArray3[(int) ptr] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 5)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        strArray[j] = strArray[j] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 6)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu12(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu24(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                string[] strArray = CanonicalNumber.Split(new char[] { ',' });
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int i = 0; i < (length - 3); i++)
                {
                    for (int k = i + 1; k < (length - 2); k++)
                    {
                        for (int m = k + 1; m < (length - 1); m++)
                        {
                            for (int n = m + 1; n < length; n++)
                            {
                                list.Add(strArray[i].ToString() + "," + strArray[k].ToString() + "," + strArray[m].ToString() + "," + strArray[n].ToString());
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu4(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2])) && ((Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3]))) && (((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3]))))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[3]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]))) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3])))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }
        }

        public class HNFC22X5 : Lottery.LotteryBase
        {
            public const string Code = "HNFC22X5";
            public const int ID = 0x17;
            public const double MaxMoney = 52668.0;
            public const string Name = "湖南风采22选5";
            public const int PlayType_D = 0x8fd;
            public const int PlayType_F = 0x8fe;
            public const int PlayType_HY1_D = 0x8ff;
            public const int PlayType_HY1_F = 0x900;
            public const int PlayType_HY2_D = 0x901;
            public const int PlayType_HY2_F = 0x902;
            public const int PlayType_HY3_D = 0x903;
            public const int PlayType_HY3_F = 0x904;
            public const int PlayType_HY4_D = 0x905;
            public const int PlayType_HY4_F = 0x906;
            public const string sID = "23";

            public HNFC22X5()
            {
                base.id = 0x17;
                base.name = "湖南风采22选5";
                base.code = "HNFC22X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0x8fd) || (PlayType == 0x8fe))
                {
                    return this.AnalyseScheme_Zhi(Content, PlayType);
                }
                if ((PlayType == 0x8ff) || (PlayType == 0x900))
                {
                    return this.AnalyseScheme_HY1(Content, PlayType);
                }
                if ((PlayType == 0x901) || (PlayType == 0x902))
                {
                    return this.AnalyseScheme_HY2(Content, PlayType);
                }
                if ((PlayType == 0x903) || (PlayType == 0x904))
                {
                    return this.AnalyseScheme_HY3(Content, PlayType);
                }
                if ((PlayType != 0x905) && (PlayType != 0x906))
                {
                    return "";
                }
                return this.AnalyseScheme_HY4(Content, PlayType);
            }

            private string AnalyseScheme_HY1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x8ff)
                {
                    str2 = @"(\d\d)";
                }
                else
                {
                    str2 = @"((\d\d\s){1,21}\d\d)|(\d\d)";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HY1(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x8ff) ? 1 : 2))) && (strArray2.Length <= 26334.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_HY2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x901)
                {
                    str2 = @"(\d\d\s\d\d)";
                }
                else
                {
                    str2 = @"(\d\d\s){1,25}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HY2(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x901) ? 1 : 2))) && (strArray2.Length <= 26334.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_HY3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x903)
                {
                    str2 = @"(\d\d\s){2}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){2,25}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HY3(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x903) ? 1 : 2))) && (strArray2.Length <= 26334.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_HY4(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x905)
                {
                    str2 = @"(\d\d\s){3}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){3,21}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HY4(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x905) ? 1 : 2))) && (strArray2.Length <= 26334.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x8fd)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,25}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zhi(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x8fd) ? 1 : 2))) && (strArray2.Length <= 26334.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_Zhi(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x17);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x8fd) && (play_type <= 0x906));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 14))
                {
                    return -3.0;
                }
                if ((PlayType == 0x8fd) || (PlayType == 0x8fe))
                {
                    return this.ComputeWin_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if ((PlayType == 0x8ff) || (PlayType == 0x900))
                {
                    return this.ComputeWin_HY1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[6], WinMoneyList[7]);
                }
                if ((PlayType == 0x901) || (PlayType == 0x902))
                {
                    return this.ComputeWin_HY2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9]);
                }
                if ((PlayType == 0x903) || (PlayType == 0x904))
                {
                    return this.ComputeWin_HY3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11]);
                }
                if ((PlayType != 0x905) && (PlayType != 0x906))
                {
                    return -4.0;
                }
                return this.ComputeWin_HY4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13]);
            }

            private double ComputeWin_HY1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = WinNumber.Substring(0, 2);
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HY1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (strArray2[j] == str))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好运一奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_HY2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HY2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 5)
                            {
                                string[] strArray3 = new string[2];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num5 = 0;
                                bool flag = true;
                                for (int k = 0; k < 2; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num5++;
                                    }
                                }
                                if (flag && (num5 == 2))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好运二奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_HY3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HY3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 8)
                            {
                                string[] strArray3 = new string[3];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num5 = 0;
                                bool flag = true;
                                for (int k = 0; k < 3; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num5++;
                                    }
                                }
                                if (flag && (num5 == 3))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好运三奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_HY4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HY4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 11)
                            {
                                string[] strArray3 = new string[4];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num5 = 0;
                                bool flag = true;
                                for (int k = 0; k < 4; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num5++;
                                    }
                                }
                                if (flag && (num5 == 4))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好运四奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                double num3 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num7 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num7++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num7)
                                    {
                                        case 5:
                                            num++;
                                            num3 += WinMoney1;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                            break;

                                        case 4:
                                            num2++;
                                            num3 += WinMoney2;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num3;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x16)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x8fd, "单式"), new Lottery.PlayType(0x8fe, "复式"), new Lottery.PlayType(0x8ff, "好运一单式"), new Lottery.PlayType(0x900, "好运一复式"), new Lottery.PlayType(0x901, "好运二单式"), new Lottery.PlayType(0x902, "好运二复式"), new Lottery.PlayType(0x903, "好运三单式"), new Lottery.PlayType(0x904, "好运三复式"), new Lottery.PlayType(0x905, "好运四单式"), new Lottery.PlayType(0x906, "好运四复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string str;
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    if (((str = LotteryMachine) != null) && (str == "SN-2000"))
                    {
                        if (((PlayTypeID == 0x8fd) || (PlayTypeID == 0x8ff)) || (((PlayTypeID == 0x901) || (PlayTypeID == 0x903)) || (PlayTypeID == 0x905)))
                        {
                            return this.GetPrintKeyList_SN_2000_D(numbers);
                        }
                        if (((PlayTypeID == 0x8fe) || (PlayTypeID == 0x900)) || (((PlayTypeID == 0x902) || (PlayTypeID == 0x904)) || (PlayTypeID == 0x906)))
                        {
                            return this.GetPrintKeyList_SN_2000_F(numbers);
                        }
                    }
                }
                return "";
            }

            private string GetPrintKeyList_SN_2000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace("+", "").Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_2000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace("+", "").Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return (str + "[↑][E]");
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0x8fd) || (PlayType == 0x8fe))
                {
                    return this.ToSingle_Zhi(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x8ff) || (PlayType == 0x900))
                {
                    return this.ToSingle_HY1(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x901) || (PlayType == 0x902))
                {
                    return this.ToSingle_HY2(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x903) || (PlayType == 0x904))
                {
                    return this.ToSingle_HY3(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x905) && (PlayType != 0x906))
                {
                    return null;
                }
                return this.ToSingle_HY4(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_HY1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 1)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                return strArray;
            }

            private string[] ToSingle_HY2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 1); j++)
                {
                    for (int m = j + 1; m < length; m++)
                    {
                        list.Add(strArray[j] + " " + strArray[m]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_HY3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 2); j++)
                {
                    for (int m = j + 1; m < (length - 1); m++)
                    {
                        for (int n = m + 1; n < length; n++)
                        {
                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n]);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_HY4(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 3); j++)
                {
                    for (int m = j + 1; m < (length - 2); m++)
                    {
                        for (int n = m + 1; n < (length - 1); n++)
                        {
                            for (int num6 = n + 1; num6 < length; num6++)
                            {
                                list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6]);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class HNKY481 : Lottery.LotteryBase
        {
            public const string Code = "HNKY481";
            public const int ID = 0x44;
            public const double MaxMoney = 20000.0;
            public const string Name = "快赢481";
            public const int PlayType_RX1 = 0x1a91;
            public const int PlayType_RX2 = 0x1a92;
            public const int PlayType_RX3 = 0x1a93;
            public const int PlayType_X4ZX12 = 0x1a98;
            public const int PlayType_X4ZX12_F = 0x1a99;
            public const int PlayType_X4ZX24 = 0x1a96;
            public const int PlayType_X4ZX24_F = 0x1a97;
            public const int PlayType_X4ZX4 = 0x1a9c;
            public const int PlayType_X4ZX4_F = 0x1a9d;
            public const int PlayType_X4ZX6 = 0x1a9a;
            public const int PlayType_X4ZX6_F = 0x1a9b;
            public const int PlayType_X4ZXD = 0x1a94;
            public const int PlayType_X4ZXF = 0x1a95;
            public const string sID = "68";

            public HNKY481()
            {
                base.id = 0x44;
                base.name = "快赢481";
                base.code = "HNKY481";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x1a91)
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if (PlayType == 0x1a92)
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if (PlayType == 0x1a93)
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if ((PlayType == 0x1a94) || (PlayType == 0x1a95))
                {
                    return this.AnalyseScheme_Zhi(Content, PlayType);
                }
                if (((PlayType == 0x1a96) || (PlayType == 0x1a98)) || ((PlayType == 0x1a9a) || (PlayType == 0x1a9c)))
                {
                    return this.AnalyseScheme_Zu(Content, PlayType);
                }
                if (((PlayType != 0x1a97) && (PlayType != 0x1a99)) && ((PlayType != 0x1a9b) && (PlayType != 0x1a9d)))
                {
                    return "";
                }
                return this.AnalyseScheme_ZuF(Content, PlayType);
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(?<L0>(\d)|(_)|([(][\d]+?[)]))(?<L1>(\d)|(_)|([(][\d]+?[)]))(?<L2>(\d)|(_)|([(][\d]+?[)]))(?<L3>(\d)|(_)|([(][\d]+?[)]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = strArray[i];
                        string[] strArray2 = this.ToSingle_RX1(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(?<L0>(\d)|(_)|([(][\d]+?[)]))(?<L1>(\d)|(_)|([(][\d]+?[)]))(?<L2>(\d)|(_)|([(][\d]+?[)]))(?<L3>(\d)|(_)|([(][\d]+?[)]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = strArray[i];
                        string[] strArray2 = this.ToSingle_RX2(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            object obj2 = str;
                            str = string.Concat(new object[] { obj2, canonicalNumber, "|", strArray2.Length, "\n" });
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(?<L0>(\d)|(_)|([(][\d]+?[)]))(?<L1>(\d)|(_)|([(][\d]+?[)]))(?<L2>(\d)|(_)|([(][\d]+?[)]))(?<L3>(\d)|(_)|([(][\d]+?[)]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = strArray[i];
                        string[] strArray2 = this.ToSingle_RX3(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1a94)
                {
                    str2 = @"([\d]){4}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,8}[)])){4}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1a94) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(([\d])|([(][\d]{1,8}[)])){4}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = strArray[i];
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuF(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_Zhi(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 4; j++)
                    {
                        str = str + random.Next(1, 8).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1a91) && (play_type <= 0x1a9d));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 0x10))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                if (PlayType == 0x1a91)
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref num);
                }
                if (PlayType == 0x1a92)
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref num2);
                }
                if (PlayType == 0x1a93)
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], ref num3);
                }
                if ((PlayType == 0x1a94) || (PlayType == 0x1a95))
                {
                    return this.ComputeWin_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[6], WinMoneyList[7]);
                }
                if ((((PlayType != 0x1a96) && (PlayType != 0x1a98)) && ((PlayType != 0x1a9a) && (PlayType != 0x1a9c))) && (((PlayType != 0x1a97) && (PlayType != 0x1a99)) && ((PlayType != 0x1a9b) && (PlayType != 0x1a9d))))
                {
                    return -4.0;
                }
                return this.ComputeWin_Zu(PlayType, Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15]);
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCountRX1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX1 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            for (int k = 0; k < 4; k++)
                            {
                                if (WinNumber.Substring(k, 1) == strArray2[j].Substring(k, 1))
                                {
                                    WinCountRX1++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (WinCountRX1 > 0)
                {
                    Description = "任选一奖" + ((int) WinCountRX1).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCountRX2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX2 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                int num2 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            num2 = 0;
                            for (int k = 0; k < 4; k++)
                            {
                                if (WinNumber.Substring(k, 1) == strArray2[j].Substring(k, 1))
                                {
                                    num2++;
                                }
                            }
                            if (num2 == 2)
                            {
                                WinCountRX2++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                            }
                        }
                    }
                }
                if (WinCountRX2 > 0)
                {
                    Description = "任选二奖" + ((int) WinCountRX2).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney3, double WinMoneyNoWithTax3, ref int WinCountRX3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                int num2 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            num2 = 0;
                            for (int k = 0; k < 4; k++)
                            {
                                if (WinNumber.Substring(k, 1) == strArray2[j].Substring(k, 1))
                                {
                                    num2++;
                                }
                            }
                            if (num2 == 3)
                            {
                                WinCountRX3++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                        }
                    }
                }
                if (WinCountRX3 > 0)
                {
                    Description = "任选三奖" + ((int) WinCountRX3).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 4) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "单选奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu(int PlayType, string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 4)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 4);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                double num5 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (((base.Sort(strArray2[j]) == base.Sort(WinNumber)) || base.Sort(strArray2[j]).Equals(base.Sort(WinNumber))) && (strArray2[j].Length >= 4))
                            {
                                if (this.FilterRepeated(strArray2[j]).Length == 4)
                                {
                                    num4++;
                                    num5 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                if (this.FilterRepeated(strArray2[j]).Length == 3)
                                {
                                    num3++;
                                    num5 += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                                if ((this.FilterRepeated(strArray2[j]).Length == 2) && (base.Sort(strArray2[j]).Substring(1, 1) != base.Sort(strArray2[j]).Substring(2, 1)))
                                {
                                    num2++;
                                    num5 += WinMoney3;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                }
                                if ((this.FilterRepeated(base.Sort(strArray2[j])).Length == 2) && (base.Sort(strArray2[j]).Substring(1, 1) == base.Sort(strArray2[j]).Substring(2, 1)))
                                {
                                    num++;
                                    num5 += WinMoney4;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax4;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选4奖" + num.ToString() + "注。";
                }
                if (num2 > 0)
                {
                    Description = "组选6奖" + num2.ToString() + "注。";
                }
                if (num3 > 0)
                {
                    Description = "组选12奖" + num3.ToString() + "注。";
                }
                if (num4 > 0)
                {
                    Description = "组选24奖" + num4.ToString() + "注。";
                }
                return num5;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            private string[] FilterRepeated(string[] NumberPart, int MaxBall)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= MaxBall)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString();
                }
                return strArray;
            }

            private int getCount(ArrayList list, string value)
            {
                int num = 0;
                for (int i = 0; i < list.Count; i++)
                {
                    if (list[i].ToString() == value)
                    {
                        num++;
                    }
                }
                return num;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1a91, "任选一"), new Lottery.PlayType(0x1a92, "任选二"), new Lottery.PlayType(0x1a93, "任选三"), new Lottery.PlayType(0x1a94, "直选单式"), new Lottery.PlayType(0x1a95, "直选复式"), new Lottery.PlayType(0x1a96, "组选24单式"), new Lottery.PlayType(0x1a97, "组选24复式"), new Lottery.PlayType(0x1a98, "组选12单式"), new Lottery.PlayType(0x1a99, "组选12复式"), new Lottery.PlayType(0x1a9a, "组选6单式"), new Lottery.PlayType(0x1a9b, "组选6复式"), new Lottery.PlayType(0x1a9c, "组选4单式"), new Lottery.PlayType(0x1a9d, "组选4复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x1a91)
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a92)
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a93)
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1a94) || (PlayType == 0x1a95))
                {
                    return this.ToSingle_Zhi(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a96)
                {
                    return this.ToSingle_Zu24(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a98)
                {
                    return this.ToSingle_Zu12(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a9a)
                {
                    return this.ToSingle_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a9c)
                {
                    return this.ToSingle_Zu4(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a97)
                {
                    return this.ToSingle_Zu24_F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a99)
                {
                    return this.ToSingle_Zu12_F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a9b)
                {
                    return this.ToSingle_Zu6_F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a9d)
                {
                    return this.ToSingle_Zu4_F(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|(_)|([(][\d]+?[)]))(?<L1>(\d)|(_)|([(][\d]+?[)]))(?<L2>(\d)|(_)|([(][\d]+?[)]))(?<L3>(\d)|(_)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    char ch2 = strArray[0][j];
                    if (_Convert.StrToInt(ch2.ToString(), 0) > 0)
                    {
                        list.Add(str + "___");
                    }
                }
                for (int k = 0; k < strArray[1].Length; k++)
                {
                    string str2 = strArray[1][k].ToString();
                    char ch4 = strArray[1][k];
                    if (_Convert.StrToInt(ch4.ToString(), 0) > 0)
                    {
                        list.Add("_" + str2 + "__");
                    }
                }
                for (int m = 0; m < strArray[2].Length; m++)
                {
                    string str3 = strArray[2][m].ToString();
                    char ch6 = strArray[2][m];
                    if (_Convert.StrToInt(ch6.ToString(), 0) > 0)
                    {
                        list.Add("__" + str3 + "_");
                    }
                }
                for (int n = 0; n < strArray[3].Length; n++)
                {
                    string str4 = strArray[3][n].ToString();
                    char ch8 = strArray[3][n];
                    if (_Convert.StrToInt(ch8.ToString(), 0) > 0)
                    {
                        list.Add("___" + str4);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num6 = 0; num6 < list.Count; num6++)
                {
                    strArray2[num6] = list[num6].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|(_)|([(][\d]+?[)]))(?<L1>(\d)|(_)|([(][\d]+?[)]))(?<L2>(\d)|(_)|([(][\d]+?[)]))(?<L3>(\d)|(_)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0].Substring(j, 1);
                    if (str != "_")
                    {
                        for (int num3 = 0; num3 < strArray[1].Length; num3++)
                        {
                            string str2 = strArray[1].Substring(num3, 1);
                            if (str2 != "_")
                            {
                                list.Add(str + str2 + "__");
                            }
                        }
                    }
                }
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str3 = strArray[0].Substring(k, 1);
                    if (str3 != "_")
                    {
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str4 = strArray[2].Substring(num5, 1);
                            if (str4 != "_")
                            {
                                list.Add(str3 + "_" + str4 + "_");
                            }
                        }
                    }
                }
                for (int m = 0; m < strArray[0].Length; m++)
                {
                    string str5 = strArray[0].Substring(m, 1);
                    if (str5 != "_")
                    {
                        for (int num7 = 0; num7 < strArray[3].Length; num7++)
                        {
                            string str6 = strArray[3].Substring(num7, 1);
                            if (str6 != "_")
                            {
                                list.Add(str5 + "__" + str6);
                            }
                        }
                    }
                }
                for (int n = 0; n < strArray[1].Length; n++)
                {
                    string str7 = strArray[1].Substring(n, 1);
                    if (str7 != "_")
                    {
                        for (int num9 = 0; num9 < strArray[2].Length; num9++)
                        {
                            string str8 = strArray[2].Substring(num9, 1);
                            if (str8 != "_")
                            {
                                list.Add("_" + str7 + str8 + "_");
                            }
                        }
                    }
                }
                for (int num10 = 0; num10 < strArray[1].Length; num10++)
                {
                    string str9 = strArray[1].Substring(num10, 1);
                    if (str9 != "_")
                    {
                        for (int num11 = 0; num11 < strArray[3].Length; num11++)
                        {
                            string str10 = strArray[3].Substring(num11, 1);
                            if (str10 != "_")
                            {
                                list.Add("_" + str9 + "_" + str10);
                            }
                        }
                    }
                }
                for (int num12 = 0; num12 < strArray[2].Length; num12++)
                {
                    string str11 = strArray[2].Substring(num12, 1);
                    if (str11 != "_")
                    {
                        for (int num13 = 0; num13 < strArray[3].Length; num13++)
                        {
                            string str12 = strArray[3].Substring(num13, 1);
                            if (str12 != "_")
                            {
                                list.Add("__" + str11 + str12);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num14 = 0; num14 < list.Count; num14++)
                {
                    strArray2[num14] = list[num14].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|(_)|([(][\d]+?[)]))(?<L1>(\d)|(_)|([(][\d]+?[)]))(?<L2>(\d)|(_)|([(][\d]+?[)]))(?<L3>(\d)|(_)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0].Substring(j, 1);
                    if (str != "_")
                    {
                        for (int num3 = 0; num3 < strArray[1].Length; num3++)
                        {
                            string str2 = strArray[1].Substring(num3, 1);
                            if (str2 != "_")
                            {
                                for (int num4 = 0; num4 < strArray[2].Length; num4++)
                                {
                                    string str3 = strArray[2].Substring(num4, 1);
                                    if (str3 != "_")
                                    {
                                        list.Add(str + str2 + str3 + "_");
                                    }
                                }
                            }
                        }
                    }
                }
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str4 = strArray[0].Substring(k, 1);
                    if (str4 != "_")
                    {
                        for (int num6 = 0; num6 < strArray[1].Length; num6++)
                        {
                            string str5 = strArray[1].Substring(num6, 1);
                            if (str5 != "_")
                            {
                                for (int num7 = 0; num7 < strArray[3].Length; num7++)
                                {
                                    string str6 = strArray[3].Substring(num7, 1);
                                    if (str6 != "_")
                                    {
                                        list.Add(str4 + str5 + "_" + str6);
                                    }
                                }
                            }
                        }
                    }
                }
                for (int m = 0; m < strArray[0].Length; m++)
                {
                    string str7 = strArray[0].Substring(m, 1);
                    if (str7 != "_")
                    {
                        for (int num9 = 0; num9 < strArray[2].Length; num9++)
                        {
                            string str8 = strArray[2].Substring(num9, 1);
                            if (str8 != "_")
                            {
                                for (int num10 = 0; num10 < strArray[3].Length; num10++)
                                {
                                    string str9 = strArray[3].Substring(num10, 1);
                                    if (str9 != "_")
                                    {
                                        list.Add(str7 + "_" + str8 + str9);
                                    }
                                }
                            }
                        }
                    }
                }
                for (int n = 0; n < strArray[1].Length; n++)
                {
                    string str10 = strArray[1].Substring(n, 1);
                    if (str10 != "_")
                    {
                        for (int num12 = 0; num12 < strArray[2].Length; num12++)
                        {
                            string str11 = strArray[2].Substring(num12, 1);
                            if (str11 != "_")
                            {
                                for (int num13 = 0; num13 < strArray[3].Length; num13++)
                                {
                                    string str12 = strArray[3].Substring(num13, 1);
                                    if (str12 != "_")
                                    {
                                        list.Add("_" + str10 + str11 + str12);
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num14 = 0; num14 < list.Count; num14++)
                {
                    strArray2[num14] = list[num14].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zu(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x1a96)
                {
                    return this.ToSingle_Zu24(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a98)
                {
                    return this.ToSingle_Zu12(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a9a)
                {
                    return this.ToSingle_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a9c)
                {
                    return this.ToSingle_Zu4(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a97)
                {
                    return this.ToSingle_Zu24_F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a99)
                {
                    return this.ToSingle_Zu12_F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a9b)
                {
                    return this.ToSingle_Zu6_F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a9d)
                {
                    return this.ToSingle_Zu4_F(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_Zu12(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + strArray[1][n].ToString();
                        for (int num4 = 0; num4 < strArray[2].Length; num4++)
                        {
                            string str3 = str2 + strArray[2][num4].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string numberPart = str3 + strArray[3][num5].ToString();
                                if ((numberPart.Length >= 4) && (this.FilterRepeated(numberPart).Length == 3))
                                {
                                    list.Add(numberPart);
                                }
                            }
                        }
                    }
                }
                for (int k = 0; k < list.Count; k++)
                {
                    if (this.FilterRepeated(base.Sort(list[k].ToString())).Length == 1)
                    {
                        list.Remove(list[k]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zu12_F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = Number;
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 2); i++)
                {
                    for (int k = i + 1; k < (length - 1); k++)
                    {
                        for (int m = k + 1; m < length; m++)
                        {
                            list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[m].ToString() + chArray[m].ToString());
                            list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[k].ToString() + chArray[m].ToString());
                            list.Add(chArray[i].ToString() + chArray[i].ToString() + chArray[k].ToString() + chArray[m].ToString());
                        }
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu24(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + strArray[1][n].ToString();
                        for (int num4 = 0; num4 < strArray[2].Length; num4++)
                        {
                            string str3 = str2 + strArray[2][num4].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string numberPart = str3 + strArray[3][num5].ToString();
                                if ((numberPart.Length >= 4) && (this.FilterRepeated(numberPart).Length == 4))
                                {
                                    list.Add(numberPart);
                                }
                            }
                        }
                    }
                }
                for (int k = 0; k < list.Count; k++)
                {
                    if (this.FilterRepeated(base.Sort(list[k].ToString())).Length == 1)
                    {
                        list.Remove(list[k]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zu24_F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = Number;
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 3); i++)
                {
                    for (int k = i + 1; k < (length - 2); k++)
                    {
                        for (int m = k + 1; m < (length - 1); m++)
                        {
                            for (int n = m + 1; n < length; n++)
                            {
                                list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[m].ToString() + chArray[n].ToString());
                            }
                        }
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu4(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + strArray[1][n].ToString();
                        for (int num4 = 0; num4 < strArray[2].Length; num4++)
                        {
                            string str3 = str2 + strArray[2][num4].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                if (((str4.Length >= 4) && (this.FilterRepeated(base.Sort(str4)).Length == 2)) && (base.Sort(str4).Substring(1, 1) == base.Sort(str4).Substring(2, 1)))
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                for (int k = 0; k < list.Count; k++)
                {
                    if (this.FilterRepeated(base.Sort(list[k].ToString())).Length == 1)
                    {
                        list.Remove(list[k]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zu4_F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[i].ToString() + chArray[i].ToString() + chArray[k].ToString());
                        list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[k].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu6(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + strArray[1][n].ToString();
                        for (int num4 = 0; num4 < strArray[2].Length; num4++)
                        {
                            string str3 = str2 + strArray[2][num4].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string numberPart = str3 + strArray[3][num5].ToString();
                                if (((numberPart.Length >= 4) && (this.FilterRepeated(numberPart).Length == 2)) && (base.Sort(numberPart).Substring(1, 1) != base.Sort(numberPart).Substring(2, 1)))
                                {
                                    list.Add(numberPart);
                                }
                            }
                        }
                    }
                }
                for (int k = 0; k < list.Count; k++)
                {
                    if (this.FilterRepeated(base.Sort(list[k].ToString())).Length == 1)
                    {
                        list.Remove(list[k]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zu6_F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[i].ToString() + chArray[k].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }
        }

        public class JQC : Lottery.LotteryBase
        {
            public const string Code = "JQC";
            public const int ID = 2;
            public const double MaxMoney = 20000.0;
            public const string Name = "四场进球彩";
            public const int PlayType_D = 0xc9;
            public const int PlayType_F = 0xca;
            public const string sID = "2";

            public JQC()
            {
                base.id = 2;
                base.name = "四场进球彩";
                base.code = "JQC";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xc9)
                {
                    str2 = "([0123]){8}";
                }
                else
                {
                    str2 = "(([0123])|([(][0123]{1,4}[)])){8}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xc9) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Number = Number.Replace("*", "0");
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0xc9);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 8; j++)
                    {
                        str = str + random.Next(0, 4).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xc9) && (play_type <= 0xca));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 8)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 2))
                {
                    return -3.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 8)
                            {
                                int num5 = 0;
                                for (int k = 0; k < 8; k++)
                                {
                                    if ((strArray2[j][k] == WinNumber[k]) || (WinNumber[k] == '*'))
                                    {
                                        num5++;
                                    }
                                }
                                if (num5 == 8)
                                {
                                    num++;
                                    num2 += WinMoneyList[0];
                                    WinMoneyNoWithTax += WinMoneyList[1];
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private string ConvertFormatToElectronTicket_DYJ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (PlayTypeID == 0xc9)
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + ";\n";
                    }
                }
                if (PlayTypeID == 0xca)
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int k = 0; k < strArray2.Length; k++)
                    {
                        string[] strArray3 = new string[8];
                        Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[k]);
                        for (int m = 0; m < 8; m++)
                        {
                            strArray3[m] = match.Groups["L" + m.ToString()].ToString().Trim();
                            if (strArray3[m] == "")
                            {
                                return "";
                            }
                            if (strArray3[m].Length > 1)
                            {
                                strArray3[m] = strArray3[m].Substring(1, strArray3[m].Length - 2);
                                if (strArray3[m].Length > 1)
                                {
                                    strArray3[m] = this.FilterRepeated(strArray3[m]);
                                }
                                if (strArray3[m] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray3[m] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + ";\n";
                    }
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string ConvertFormatToElectronTicket_HPSD(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (PlayTypeID == 0xc9)
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (PlayTypeID == 0xca)
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int k = 0; k < strArray2.Length; k++)
                    {
                        string[] strArray3 = new string[8];
                        Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[k]);
                        for (int m = 0; m < 8; m++)
                        {
                            strArray3[m] = match.Groups["L" + m.ToString()].ToString().Trim();
                            if (strArray3[m] == "")
                            {
                                return "";
                            }
                            if (strArray3[m].Length > 1)
                            {
                                strArray3[m] = strArray3[m].Substring(1, strArray3[m].Length - 2);
                                if (strArray3[m].Length > 1)
                                {
                                    strArray3[m] = this.FilterRepeated(strArray3[m]);
                                }
                                if (strArray3[m] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray3[m] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xc9, "单式"), new Lottery.PlayType(0xca, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    switch (LotteryMachine)
                    {
                        case "CR_YTCII2":
                            if (PlayTypeID != 0xc9)
                            {
                                if (PlayTypeID != 0xca)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CR_YTCII2_F(numbers);
                            }
                            return this.GetPrintKeyList_CR_YTCII2_D(numbers);

                        case "TCBJYTD":
                            if (PlayTypeID != 0xc9)
                            {
                                if (PlayTypeID != 0xca)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TCBJYTD_F(numbers);
                            }
                            return this.GetPrintKeyList_TCBJYTD_D(numbers);

                        case "TGAMPOS4000":
                            if (PlayTypeID != 0xc9)
                            {
                                if (PlayTypeID != 0xca)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TGAMPOS4000_F(numbers);
                            }
                            return this.GetPrintKeyList_TGAMPOS4000_D(numbers);

                        case "CP86":
                            if (PlayTypeID != 0xc9)
                            {
                                if (PlayTypeID != 0xca)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CP86_F(numbers);
                            }
                            return this.GetPrintKeyList_CP86_D(numbers);

                        case "MODEL_4000":
                            if (PlayTypeID != 0xc9)
                            {
                                if (PlayTypeID != 0xca)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_MODEL_4000_F(numbers);
                            }
                            return this.GetPrintKeyList_MODEL_4000_D(numbers);

                        case "CORONISTPT":
                            if (PlayTypeID != 0xc9)
                            {
                                if (PlayTypeID != 0xca)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CORONISTPT_F(numbers);
                            }
                            return this.GetPrintKeyList_CORONISTPT_D(numbers);

                        case "RS6500":
                            if (PlayTypeID != 0xc9)
                            {
                                if (PlayTypeID != 0xca)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_RS6500_F(numbers);
                            }
                            return this.GetPrintKeyList_RS6500_D(numbers);

                        case "ks230":
                            if (PlayTypeID != 0xc9)
                            {
                                if (PlayTypeID != 0xca)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_ks230_F(numbers);
                            }
                            return this.GetPrintKeyList_ks230_D(numbers);

                        case "LA-600A":
                            if (PlayTypeID != 0xc9)
                            {
                                if (PlayTypeID == 0xca)
                                {
                                    return this.GetPrintKeyList_LA_600A_F(numbers);
                                }
                                break;
                            }
                            return this.GetPrintKeyList_LA_600A_D(numbers);
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CORONISTPT_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 8; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 7)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 8; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 7)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 8; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 7)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 8; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 7)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 8; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 7)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 8; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 7)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 8; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 7)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 8; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 7)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 8; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 7)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public string[,] SplitLotteryNumberForGrid(string Number)
            {
                string[] strArray = Number.Split(new char[] { '\n' });
                if (strArray.Length == 0)
                {
                    return null;
                }
                ArrayList[] listArray = new ArrayList[strArray.Length];
                for (int i = 0; i < listArray.Length; i++)
                {
                    listArray[i] = new ArrayList();
                    int startIndex = 0;
                    string str = strArray[i];
                    if (str.Length < 8)
                    {
                        str = str.PadRight(8, ' ');
                    }
                    while ((startIndex < str.Length) && (listArray[i].Count < 8))
                    {
                        if (str.Substring(startIndex, 1) != "(")
                        {
                            listArray[i].Add(str.Substring(startIndex, 1));
                            startIndex++;
                        }
                        else
                        {
                            int num3 = startIndex + 1;
                            while (str.Substring(num3, 1) != ")")
                            {
                                num3++;
                            }
                            string str2 = str.Substring(startIndex, num3 - startIndex);
                            listArray[i].Add(str2.Substring(1, str2.Length - 1));
                            startIndex = num3 + 1;
                        }
                    }
                }
                string[,] strArray2 = new string[listArray.Length, 8];
                for (int j = 0; j < listArray.Length; j++)
                {
                    for (int k = 0; (k < listArray[j].Count) && (k < 8); k++)
                    {
                        strArray2[j, k] = listArray[j][k].ToString();
                    }
                }
                return strArray2;
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0xc9)
                {
                    return this.ToElectronicTicket_DYJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xca)
                {
                    return this.ToElectronicTicket_DYJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0xc9)
                {
                    return this.ToElectronicTicket_HPSD_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xca)
                {
                    return this.ToElectronicTicket_HPSD_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = new string[8];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 8; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    for (int num7 = 0; num7 < strArray[5].Length; num7++)
                                    {
                                        string str6 = str5 + strArray[5][num7].ToString();
                                        for (int num8 = 0; num8 < strArray[6].Length; num8++)
                                        {
                                            string str7 = str6 + strArray[6][num8].ToString();
                                            for (int num9 = 0; num9 < strArray[7].Length; num9++)
                                            {
                                                string str8 = str7 + strArray[7][num9].ToString();
                                                list.Add(str8);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class JX11X5 : Lottery.LotteryBase
        {
            public const string Code = "JX11X5";
            public const int ID = 70;
            public const double MaxMoney = 200000.0;
            public const string Name = "11选5";
            public const int PlayType_RX1 = 0x1b59;
            public const int PlayType_RX2 = 0x1b5a;
            public const int PlayType_RX3 = 0x1b5b;
            public const int PlayType_RX4 = 0x1b5c;
            public const int PlayType_RX5 = 0x1b5d;
            public const int PlayType_RX6 = 0x1b5e;
            public const int PlayType_RX7 = 0x1b5f;
            public const int PlayType_RX8 = 0x1b60;
            public const int PlayType_ZhiQ2 = 0x1b61;
            public const int PlayType_ZhiQ3 = 0x1b62;
            public const int PlayType_ZuQ2 = 0x1b63;
            public const int PlayType_ZuQ3 = 0x1b64;
            public const string sID = "70";

            public JX11X5()
            {
                base.id = 70;
                base.name = "11选5";
                base.code = "JX11X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x1b59)
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if (PlayType == 0x1b5a)
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if (PlayType == 0x1b5b)
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if (PlayType == 0x1b5c)
                {
                    return this.AnalyseScheme_RX4(Content, PlayType);
                }
                if (PlayType == 0x1b5d)
                {
                    return this.AnalyseScheme_RX5(Content, PlayType);
                }
                if (PlayType == 0x1b5e)
                {
                    return this.AnalyseScheme_RX6(Content, PlayType);
                }
                if (PlayType == 0x1b5f)
                {
                    return this.AnalyseScheme_RX7(Content, PlayType);
                }
                if (PlayType == 0x1b60)
                {
                    return this.AnalyseScheme_RX8(Content, PlayType);
                }
                if (PlayType == 0x1b61)
                {
                    return this.AnalyseScheme_ZhiQ2(Content, PlayType);
                }
                if (PlayType == 0x1b62)
                {
                    return this.AnalyseScheme_ZhiQ3(Content, PlayType);
                }
                if (PlayType == 0x1b63)
                {
                    return this.AnalyseScheme_ZuQ2(Content, PlayType);
                }
                if (PlayType == 0x1b64)
                {
                    return this.AnalyseScheme_ZuQ3(Content, PlayType);
                }
                return "";
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){1,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){2,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX3(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){3,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX4(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX5(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){4,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX5(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX6(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){5,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX6(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX7(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){6,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX7(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX8(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){7,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX8(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiQ2(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){0,8}(\d\d))[|]((\d\d\s){0,9}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiQ2(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiQ3(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){0,8}\d\d)[|]((\d\d\s){0,8}\d\d)[|]((\d\d\s){0,8}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiQ3(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuQ2(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(\d\d\s){1,10}\d\d";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuQ2(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuQ3(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(\d\d\s){2,10}\d\d";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuQ3(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"((\d\d\s){4}\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < Type; j++)
                    {
                        str = str + random.Next(1, 11).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1b59) && (play_type <= 0x1b64));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 0x18))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                int num12 = 0;
                if (PlayType == 0x1b59)
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref num);
                }
                if (PlayType == 0x1b5a)
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref num2);
                }
                if (PlayType == 0x1b5b)
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], ref num3);
                }
                if (PlayType == 0x1b5c)
                {
                    return this.ComputeWin_RX4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[6], WinMoneyList[7], ref num4);
                }
                if (PlayType == 0x1b5d)
                {
                    return this.ComputeWin_RX5(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], ref num5);
                }
                if (PlayType == 0x1b5e)
                {
                    return this.ComputeWin_RX6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11], ref num6);
                }
                if (PlayType == 0x1b5f)
                {
                    return this.ComputeWin_RX7(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref num7);
                }
                if (PlayType == 0x1b60)
                {
                    return this.ComputeWin_RX8(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], ref num8);
                }
                if (PlayType == 0x1b61)
                {
                    return this.ComputeWin_ZhiQ2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], ref num9);
                }
                if (PlayType == 0x1b62)
                {
                    return this.ComputeWin_ZhiQ3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x12], WinMoneyList[0x13], ref num10);
                }
                if (PlayType == 0x1b63)
                {
                    return this.ComputeWin_ZuQ2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[20], WinMoneyList[0x15], ref num11);
                }
                if (PlayType == 0x1b64)
                {
                    return this.ComputeWin_ZuQ3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x16], WinMoneyList[0x17], ref num12);
                }
                return -4.0;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCountRX1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX1 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[1];
                            Match match = new Regex(@"(?<R0>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 1; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.Substring(0, 2) == strArray3[k])
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 1))
                            {
                                WinCountRX1++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCountRX1 > 0)
                {
                    Description = "任选一奖" + ((int) WinCountRX1).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCountRX2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX2 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[2];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 2; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 2))
                            {
                                WinCountRX2++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                            }
                        }
                    }
                }
                if (WinCountRX2 > 0)
                {
                    Description = "任选二奖" + ((int) WinCountRX2).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney3, double WinMoneyNoWithTax3, ref int WinCountRX3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[3];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 3; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 3))
                            {
                                WinCountRX3++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                        }
                    }
                }
                if (WinCountRX3 > 0)
                {
                    Description = "任选三奖" + ((int) WinCountRX3).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney4, double WinMoneyNoWithTax4, ref int WinCountRX4)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX4 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[4];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 4; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 4))
                            {
                                WinCountRX4++;
                                num += WinMoney4;
                                WinMoneyNoWithTax += WinMoneyNoWithTax4;
                            }
                        }
                    }
                }
                if (WinCountRX4 > 0)
                {
                    Description = "任选四奖" + ((int) WinCountRX4).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX5(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney5, double WinMoneyNoWithTax5, ref int WinCountRX5)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX5 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX5(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[5];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 5; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 5))
                            {
                                WinCountRX5++;
                                num += WinMoney5;
                                WinMoneyNoWithTax += WinMoneyNoWithTax5;
                            }
                        }
                    }
                }
                if (WinCountRX5 > 0)
                {
                    Description = "任选五奖" + ((int) WinCountRX5).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney6, double WinMoneyNoWithTax6, ref int WinCountRX6)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX6 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX6(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[6];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 6; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 5))
                            {
                                WinCountRX6++;
                                num += WinMoney6;
                                WinMoneyNoWithTax += WinMoneyNoWithTax6;
                            }
                        }
                    }
                }
                if (WinCountRX6 > 0)
                {
                    Description = "任选六奖" + ((int) WinCountRX6).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX7(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney7, double WinMoneyNoWithTax7, ref int WinCountRX7)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX7 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX7(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[7];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 7; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 5))
                            {
                                WinCountRX7++;
                                num += WinMoney7;
                                WinMoneyNoWithTax += WinMoneyNoWithTax7;
                            }
                        }
                    }
                }
                if (WinCountRX7 > 0)
                {
                    Description = "任选七奖" + ((int) WinCountRX7).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX8(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney8, double WinMoneyNoWithTax8, ref int WinCountRX8)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX8 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX8(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[8];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d\s)(?<R7>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 8; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 5))
                            {
                                WinCountRX8++;
                                num += WinMoney8;
                                WinMoneyNoWithTax += WinMoneyNoWithTax8;
                            }
                        }
                    }
                }
                if (WinCountRX8 > 0)
                {
                    Description = "任选八奖" + ((int) WinCountRX8).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_ZhiQ2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney9, double WinMoneyNoWithTax9, ref int WinCount_ZhiQ2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCount_ZhiQ2 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiQ2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            bool flag = false;
                            Regex regex = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                            if (regex.IsMatch(strArray2[j]) && (WinNumber.Substring(0, 5) == strArray2[j]))
                            {
                                flag = true;
                            }
                            if (flag)
                            {
                                WinCount_ZhiQ2++;
                                num += WinMoney9;
                                WinMoneyNoWithTax += WinMoneyNoWithTax9;
                            }
                        }
                    }
                }
                if (WinCount_ZhiQ2 > 0)
                {
                    Description = "直选前二奖" + ((int) WinCount_ZhiQ2).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_ZhiQ3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney10, double WinMoneyNoWithTax10, ref int WinCount_ZhiQ3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCount_ZhiQ3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiQ3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            bool flag = false;
                            Regex regex = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                            if (regex.IsMatch(strArray2[j]) && (WinNumber.Substring(0, 8) == strArray2[j]))
                            {
                                flag = true;
                            }
                            if (flag)
                            {
                                WinCount_ZhiQ3++;
                                num += WinMoney10;
                                WinMoneyNoWithTax += WinMoneyNoWithTax10;
                            }
                        }
                    }
                }
                if (WinCount_ZhiQ3 > 0)
                {
                    Description = "直选前三奖" + ((int) WinCount_ZhiQ3).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_ZuQ2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney11, double WinMoneyNoWithTax11, ref int WinCount_ZuQ2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCount_ZuQ2 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuQ2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            int num4 = 0;
                            string[] strArray3 = new string[2];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            for (int k = 0; k < 2; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    break;
                                }
                                if (WinNumber.Substring(0, 5).IndexOf(strArray3[k]) >= 0)
                                {
                                    num4++;
                                }
                            }
                            if (num4 == 2)
                            {
                                WinCount_ZuQ2++;
                                num += WinMoney11;
                                WinMoneyNoWithTax += WinMoneyNoWithTax11;
                            }
                        }
                    }
                }
                if (WinCount_ZuQ2 > 0)
                {
                    Description = "组选前二奖" + ((int) WinCount_ZuQ2).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_ZuQ3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney12, double WinMoneyNoWithTax12, ref int WinCount_ZuQ3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCount_ZuQ3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuQ3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            int num4 = 0;
                            string[] strArray3 = new string[3];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            for (int k = 0; k < 3; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    break;
                                }
                                if (WinNumber.Substring(0, 8).IndexOf(strArray3[k]) >= 0)
                                {
                                    num4++;
                                }
                            }
                            if (num4 == 3)
                            {
                                WinCount_ZuQ3++;
                                num += WinMoney12;
                                WinMoneyNoWithTax += WinMoneyNoWithTax12;
                            }
                        }
                    }
                }
                if (WinCount_ZuQ3 > 0)
                {
                    Description = "组选前三奖" + ((int) WinCount_ZuQ3).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private string[] FilterRepeated(string[] NumberPart, int MaxBall)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= MaxBall)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1b59, "任选一"), new Lottery.PlayType(0x1b5a, "任选二"), new Lottery.PlayType(0x1b5b, "任选三"), new Lottery.PlayType(0x1b5c, "任选四"), new Lottery.PlayType(0x1b5d, "任选五"), new Lottery.PlayType(0x1b5e, "任选六"), new Lottery.PlayType(0x1b5f, "任选七"), new Lottery.PlayType(0x1b60, "任选八"), new Lottery.PlayType(0x1b61, "直选前二"), new Lottery.PlayType(0x1b62, "直选前三"), new Lottery.PlayType(0x1b63, "组选前二"), new Lottery.PlayType(0x1b64, "组选前三") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x1b59)
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1b5a)
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1b5b)
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1b5c)
                {
                    return this.ToSingle_RX4(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1b5d)
                {
                    return this.ToSingle_RX5(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1b5e)
                {
                    return this.ToSingle_RX6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1b5f)
                {
                    return this.ToSingle_RX7(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1b60)
                {
                    return this.ToSingle_RX8(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1b61)
                {
                    return this.ToSingle_ZhiQ2(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1b62)
                {
                    return this.ToSingle_ZhiQ3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1b63)
                {
                    return this.ToSingle_ZuQ2(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1b64)
                {
                    return this.ToSingle_ZuQ3(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 1)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < length; j++)
                {
                    list.Add(strArray[j]);
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 1); j++)
                {
                    for (int m = j + 1; m < length; m++)
                    {
                        list.Add(strArray[j] + " " + strArray[m]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 2); j++)
                {
                    for (int m = j + 1; m < (length - 1); m++)
                    {
                        for (int n = m + 1; n < length; n++)
                        {
                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n]);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX4(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 3); j++)
                {
                    for (int m = j + 1; m < (length - 2); m++)
                    {
                        for (int n = m + 1; n < (length - 1); n++)
                        {
                            for (int num6 = n + 1; num6 < length; num6++)
                            {
                                list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6]);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX5(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX6(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 6)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 5); j++)
                {
                    for (int m = j + 1; m < (length - 4); m++)
                    {
                        for (int n = m + 1; n < (length - 3); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 2); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 1); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < length; num8++)
                                    {
                                        list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8]);
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX7(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX8(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 8)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 7); j++)
                {
                    for (int m = j + 1; m < (length - 6); m++)
                    {
                        for (int n = m + 1; n < (length - 5); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 4); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 3); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 2); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < (length - 1); num9++)
                                        {
                                            for (int num10 = num9 + 1; num10 < length; num10++)
                                            {
                                                list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9] + " " + strArray[num10]);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZhiQ2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { '|' })[0].Trim().Split(new char[] { ' ' }), 11);
                string[] strArray2 = this.FilterRepeated(Number.Trim().Split(new char[] { '|' })[1].Trim().Split(new char[] { ' ' }), 11);
                if ((strArray.Length < 1) && (strArray2.Length < 1))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                CanonicalNumber = CanonicalNumber + "|";
                for (int j = 0; j < strArray2.Length; j++)
                {
                    CanonicalNumber = CanonicalNumber + strArray2[j] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                int num4 = strArray2.Length;
                for (int k = 0; k < length; k++)
                {
                    for (int n = 0; n < num4; n++)
                    {
                        if (strArray[k] != strArray2[n])
                        {
                            list.Add(strArray[k] + " " + strArray2[n]);
                        }
                    }
                }
                string[] strArray3 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray3[m] = list[m].ToString();
                }
                return strArray3;
            }

            private string[] ToSingle_ZhiQ3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { '|' })[0].Trim().Split(new char[] { ' ' }), 11);
                string[] strArray2 = this.FilterRepeated(Number.Trim().Split(new char[] { '|' })[1].Trim().Split(new char[] { ' ' }), 11);
                string[] strArray3 = this.FilterRepeated(Number.Trim().Split(new char[] { '|' })[2].Trim().Split(new char[] { ' ' }), 11);
                if (((strArray.Length < 1) && (strArray2.Length < 1)) && (strArray3.Length < 1))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                CanonicalNumber = CanonicalNumber + "|";
                for (int j = 0; j < strArray2.Length; j++)
                {
                    CanonicalNumber = CanonicalNumber + strArray2[j] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                CanonicalNumber = CanonicalNumber + "|";
                for (int k = 0; k < strArray3.Length; k++)
                {
                    CanonicalNumber = CanonicalNumber + strArray3[k] + " ";
                }
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                int num5 = strArray2.Length;
                int num6 = strArray3.Length;
                for (int m = 0; m < length; m++)
                {
                    for (int num8 = 0; num8 < num5; num8++)
                    {
                        for (int num9 = 0; num9 < num6; num9++)
                        {
                            if (((strArray[m] != strArray2[num8]) && (strArray2[num8] != strArray3[num9])) && (strArray3[num9] != strArray[m]))
                            {
                                list.Add(strArray[m] + " " + strArray2[num8] + " " + strArray3[num9]);
                            }
                        }
                    }
                }
                string[] strArray4 = new string[list.Count];
                for (int n = 0; n < list.Count; n++)
                {
                    strArray4[n] = list[n].ToString();
                }
                return strArray4;
            }

            private string[] ToSingle_ZuQ2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 1); j++)
                {
                    for (int m = j + 1; m < length; m++)
                    {
                        list.Add(strArray[j] + " " + strArray[m]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZuQ3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 2); j++)
                {
                    for (int m = j + 1; m < (length - 1); m++)
                    {
                        for (int n = m + 1; n < length; n++)
                        {
                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n]);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class JXFC3D : Lottery.LotteryBase
        {
            public const string Code = " JXFC3D";
            public const int ID = 0x43;
            public const double MaxMoney = 20000.0;
            public const string Name = "江西福彩3D";
            public const int PlayType_ZhiBC = 0x1a39;
            public const int PlayType_ZhiBW = 0x1a34;
            public const int PlayType_ZhiD = 0x1a2d;
            public const int PlayType_ZhiDT = 0x1a3b;
            public const int PlayType_ZhiDX = 0x1a46;
            public const int PlayType_ZhiECH = 0x1a3a;
            public const int PlayType_ZhiF = 0x1a35;
            public const int PlayType_ZhiH = 0x1a30;
            public const int PlayType_ZhiJO = 0x1a42;
            public const int PlayType_ZhiKD = 0x1a3d;
            public const int PlayType_Zu3D = 0x1a2e;
            public const int PlayType_Zu3DX = 0x1a47;
            public const int PlayType_Zu3F = 0x1a36;
            public const int PlayType_Zu3H = 0x1a31;
            public const int PlayType_Zu3JO = 0x1a43;
            public const int PlayType_Zu3KD = 0x1a3e;
            public const int PlayType_Zu6D = 0x1a2f;
            public const int PlayType_Zu6DX = 0x1a48;
            public const int PlayType_Zu6F = 0x1a37;
            public const int PlayType_Zu6H = 0x1a32;
            public const int PlayType_Zu6JO = 0x1a44;
            public const int PlayType_Zu6KD = 0x1a3f;
            public const int PlayType_ZuheDT = 0x1a3c;
            public const int PlayType_ZuheDX = 0x1a49;
            public const int PlayType_ZuheF = 0x1a38;
            public const int PlayType_ZuheH = 0x1a33;
            public const int PlayType_ZuheHSW = 0x1a41;
            public const int PlayType_ZuheJO = 0x1a45;
            public const int PlayType_ZuheKD = 0x1a40;
            public const string sID = "67";

            public JXFC3D()
            {
                base.id = 0x43;
                base.name = "江西福彩3D";
                base.code = "JXFC3D";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0x1a2d) || (PlayType == 0x1a34))
                {
                    return this.AnalyseScheme_ZhiD_BW(Content, PlayType);
                }
                if (((PlayType == 0x1a2e) || (PlayType == 0x1a2f)) || (PlayType == 0x1a37))
                {
                    return this.AnalyseScheme_Zu3D_Zu6(Content, PlayType);
                }
                if (PlayType == 0x1a30)
                {
                    return this.AnalyseScheme_ZhiH(Content, PlayType);
                }
                if (PlayType == 0x1a31)
                {
                    return this.AnalyseScheme_Zu3H(Content, PlayType);
                }
                if (PlayType == 0x1a32)
                {
                    return this.AnalyseScheme_Zu6H(Content, PlayType);
                }
                if (PlayType == 0x1a33)
                {
                    return this.AnalyseScheme_ZuheH(Content, PlayType);
                }
                if (PlayType == 0x1a35)
                {
                    return this.AnalyseScheme_ZhiF(Content, PlayType);
                }
                if (PlayType == 0x1a36)
                {
                    return this.AnalyseScheme_Zu3F(Content, PlayType);
                }
                if (PlayType == 0x1a38)
                {
                    return this.AnalyseScheme_ZuheF(Content, PlayType);
                }
                if (PlayType == 0x1a39)
                {
                    return this.AnalyseScheme_ZhiBC(Content, PlayType);
                }
                if (PlayType == 0x1a3a)
                {
                    return this.AnalyseScheme_ZhiECH(Content, PlayType);
                }
                if (PlayType == 0x1a3b)
                {
                    return this.AnalyseScheme_ZhiDT(Content, PlayType);
                }
                if (PlayType == 0x1a3c)
                {
                    return this.AnalyseScheme_ZuheDT(Content, PlayType);
                }
                if (PlayType == 0x1a3d)
                {
                    return this.AnalyseScheme_ZhiKD(Content, PlayType);
                }
                if (PlayType == 0x1a3e)
                {
                    return this.AnalyseScheme_Zu3KD(Content, PlayType);
                }
                if (PlayType == 0x1a3f)
                {
                    return this.AnalyseScheme_Zu6KD(Content, PlayType);
                }
                if (PlayType == 0x1a40)
                {
                    return this.AnalyseScheme_ZuheKD(Content, PlayType);
                }
                if (PlayType == 0x1a41)
                {
                    return this.AnalyseScheme_ZuheHSW(Content, PlayType);
                }
                if (PlayType == 0x1a42)
                {
                    Content = Content.Replace("偶", "0").Replace("奇", "1");
                    return this.AnalyseScheme_ZhiJO(Content, PlayType);
                }
                if (PlayType == 0x1a43)
                {
                    Content = Content.Replace("偶", "0").Replace("奇", "1");
                    return this.AnalyseScheme_Zu3JO(Content, PlayType);
                }
                if (PlayType == 0x1a44)
                {
                    Content = Content.Replace("偶", "0").Replace("奇", "1");
                    return this.AnalyseScheme_Zu6JO(Content, PlayType);
                }
                if (PlayType == 0x1a45)
                {
                    Content = Content.Replace("偶", "0").Replace("奇", "1");
                    return this.AnalyseScheme_ZuheJO(Content, PlayType);
                }
                if (PlayType == 0x1a46)
                {
                    Content = Content.Replace("小", "0").Replace("大", "1");
                    return this.AnalyseScheme_ZhiDX(Content, PlayType);
                }
                if (PlayType == 0x1a47)
                {
                    Content = Content.Replace("小", "0").Replace("大", "1");
                    return this.AnalyseScheme_Zu3DX(Content, PlayType);
                }
                if (PlayType == 0x1a48)
                {
                    Content = Content.Replace("小", "0").Replace("大", "1");
                    return this.AnalyseScheme_Zu6DX(Content, PlayType);
                }
                if (PlayType == 0x1a49)
                {
                    Content = Content.Replace("小", "0").Replace("大", "1");
                    return this.AnalyseScheme_ZuheDX(Content, PlayType);
                }
                return "";
            }

            private string AnalyseScheme_ZhiBC(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,10}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiBC(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiD_BW(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1a2d)
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){3}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiD_BW(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1a2d) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiDT(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}[,]([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiDT(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiDX(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex("([0-1]{3})", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiDX(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiECH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,10}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiECH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiF(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){3,10}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiF(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([2][0-7]{1})|([1][\d]{1})|([\d]{1})", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiJO(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex("([0-1]){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiJO(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiKD(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiKD(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3D_Zu6(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if ((PlayType == 0x1a2e) || (PlayType == 0x1a2f))
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"([\d]){4,10}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3D_Zu6(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= (((PlayType == 0x1a2e) || (PlayType == 0x1a2f)) ? 1 : 2)))
                        {
                            if (this.FilterRepeated(base.Sort(match.Value)).Length == 2)
                            {
                                if (PlayType != 0x1a37)
                                {
                                    str = str + match.Value + "|1\n";
                                }
                            }
                            else
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3DX(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex("([0-1]{3})", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3DX(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,10}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3H(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([2][0-7]{1})|([1][\d]{1})|([\d]{1})", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3H(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3JO(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex("([0-1]){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3JO(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3KD(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex("([1-9]){1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3KD(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu6DX(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex("([0-1]{3})", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu6DX(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu6H(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([2][0-7]{1})|([1][\d]{1})|([\d]{1})", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu6H(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu6JO(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex("([0-1]){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu6JO(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu6KD(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex("([2-9]){1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu6KD(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuheDT(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}[,]([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuheDT(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuheDX(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex("([0-1]{3})", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuheDX(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuheF(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,10}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuheF(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuheH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([2][0-7]{1})|([1][\d]{1})|([\d]{1})", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuheH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuheHSW(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuheHSW(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuheJO(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex("([0-1]){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuheJO(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuheKD(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex("([1-9]){1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuheKD(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length > 0))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_ZhiD_BW(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 3; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1a2d) && (play_type <= 0x1a49));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                if ((PlayType == 0x1a2d) || (PlayType == 0x1a34))
                {
                    return this.ComputeWin_ZhiD_BW(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (((PlayType == 0x1a2e) || (PlayType == 0x1a2f)) || (PlayType == 0x1a37))
                {
                    return this.ComputeWin_Zu3D_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x1a30)
                {
                    return this.ComputeWin_ZhiH(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (PlayType == 0x1a31)
                {
                    return this.ComputeWin_Zu3H(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3]);
                }
                if (PlayType == 0x1a32)
                {
                    return this.ComputeWin_Zu6H(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x1a33)
                {
                    return this.ComputeWin_ZuheH(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x1a35)
                {
                    return this.ComputeWin_ZhiF(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (PlayType == 0x1a36)
                {
                    return this.ComputeWin_Zu3F(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3]);
                }
                if (PlayType == 0x1a38)
                {
                    return this.ComputeWin_ZuheF(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x1a39)
                {
                    return this.ComputeWin_ZhiBC(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (PlayType == 0x1a3a)
                {
                    return this.ComputeWin_ZhiECH(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (PlayType == 0x1a3b)
                {
                    return this.ComputeWin_ZhiDT(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (PlayType == 0x1a3c)
                {
                    return this.ComputeWin_ZuheDT(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x1a3d)
                {
                    return this.ComputeWin_ZhiKD(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (PlayType == 0x1a3e)
                {
                    return this.ComputeWin_Zu3KD(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3]);
                }
                if (PlayType == 0x1a3f)
                {
                    return this.ComputeWin_Zu6KD(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x1a40)
                {
                    return this.ComputeWin_ZuheKD(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x1a41)
                {
                    return this.ComputeWin_ZuheHSW(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x1a42)
                {
                    Number = Number.Replace("偶", "0").Replace("奇", "1");
                    return this.ComputeWin_ZhiJO(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (PlayType == 0x1a43)
                {
                    Number = Number.Replace("偶", "0").Replace("奇", "1");
                    return this.ComputeWin_Zu3JO(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3]);
                }
                if (PlayType == 0x1a44)
                {
                    Number = Number.Replace("偶", "0").Replace("奇", "1");
                    return this.ComputeWin_Zu6JO(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x1a45)
                {
                    Number = Number.Replace("偶", "0").Replace("奇", "1");
                    return this.ComputeWin_ZuheJO(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x1a46)
                {
                    Number = Number.Replace("小", "0").Replace("大", "1");
                    return this.ComputeWin_ZhiDX(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (PlayType == 0x1a47)
                {
                    Number = Number.Replace("小", "0").Replace("大", "1");
                    return this.ComputeWin_Zu3DX(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3]);
                }
                if (PlayType == 0x1a48)
                {
                    Number = Number.Replace("小", "0").Replace("大", "1");
                    return this.ComputeWin_Zu6DX(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x1a49)
                {
                    Number = Number.Replace("小", "0").Replace("大", "1");
                    return this.ComputeWin_ZuheDX(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                return -4.0;
            }

            private double ComputeWin_ZhiBC(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiBC(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "直选包串奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZhiD_BW(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiD_BW(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "直选奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZhiDT(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiDT(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "直选胆拖奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZhiDX(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiDX(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "直选大小奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZhiECH(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiECH(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "直选二重号奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZhiF(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiF(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "直选复式奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZhiH(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiH(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "直选和值奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZhiJO(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiJO(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "直选奇偶奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZhiKD(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiKD(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "直选跨度奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu3D_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                double num3 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    if (strArray[i].Length >= 3)
                    {
                        if (this.FilterRepeated(base.Sort(strArray[i])).Length == 2)
                        {
                            if (base.Sort(strArray[i]) == base.Sort(WinNumber))
                            {
                                num++;
                                num3 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                        else
                        {
                            string[] strArray2 = this.ToSingle_Zu3D_Zu6(strArray[i], ref canonicalNumber);
                            if ((strArray2 != null) && (strArray2.Length >= 1))
                            {
                                for (int j = 0; j < strArray2.Length; j++)
                                {
                                    if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                                    {
                                        num2++;
                                        num3 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选3奖" + num.ToString() + "注。";
                }
                if (num2 > 0)
                {
                    Description = "组选6奖" + num2.ToString() + "注。";
                }
                return num3;
            }

            private double ComputeWin_Zu3DX(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu3DX(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组3大小奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu3F(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu3F(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组3复式奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu3H(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu3H(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选3和值奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu3JO(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu3JO(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组3奇偶奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu3KD(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu3KD(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组3跨度奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu6DX(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu6DX(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组6大小奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu6H(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu6H(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选6和值奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu6JO(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu6JO(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组6奇偶奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu6KD(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu6KD(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组6跨度奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZuheDT(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                string str = this.FilterRepeated(WinNumber);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuheDT(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (str.Length == 1)
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else if (str.Length == 2)
                                {
                                    num++;
                                    num2 += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                                else if (str.Length == 3)
                                {
                                    num++;
                                    num2 += WinMoney3;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组合胆拖奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZuheDX(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                string str = this.FilterRepeated(WinNumber);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuheDX(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if ((str.Length == 1) || (str.Length == 2))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else if (str.Length == 3)
                                {
                                    num++;
                                    num2 += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组合大小奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZuheF(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                string str = this.FilterRepeated(WinNumber);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuheF(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                if (str.Length == 1)
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else if (str.Length == 2)
                                {
                                    num++;
                                    num2 += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                                else if (str.Length == 3)
                                {
                                    num++;
                                    num2 += WinMoney3;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组合复式奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZuheH(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                string str = this.FilterRepeated(WinNumber);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuheH(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (str.Length == 1)
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else if (str.Length == 2)
                                {
                                    num++;
                                    num2 += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                                else if (str.Length == 3)
                                {
                                    num++;
                                    num2 += WinMoney3;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组合和值奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZuheHSW(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                string str = this.FilterRepeated(WinNumber);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuheHSW(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if ((str.Length == 1) || (str.Length == 2))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else if (str.Length == 3)
                                {
                                    num++;
                                    num2 += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "和数尾组合奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZuheJO(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                string str = this.FilterRepeated(WinNumber);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuheJO(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if ((str.Length == 1) || (str.Length == 2))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else if (str.Length == 3)
                                {
                                    num++;
                                    num2 += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组合奇偶奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZuheKD(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                string str = this.FilterRepeated(WinNumber);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuheKD(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (str.Length == 2)
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else if (str.Length == 3)
                                {
                                    num++;
                                    num2 += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组合跨度奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private string ConvertFormatToElectronTicket_HPJX(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((((PlayTypeID == 0x1a30) || (PlayTypeID == 0x1a31)) || ((PlayTypeID == 0x1a32) || (PlayTypeID == 0x1a33))) || (((PlayTypeID == 0x1a3d) || (PlayTypeID == 0x1a3e)) || ((PlayTypeID == 0x1a3f) || (PlayTypeID == 0x1a40))))
                {
                    return Number;
                }
                if ((PlayTypeID == 0x1a3b) || (PlayTypeID == 0x1a3c))
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int j = 0; j < strArray.Length; j++)
                    {
                        for (int k = 0; k < strArray[j].Length; k++)
                        {
                            str = str + strArray[j].Substring(k, 1) + ",";
                        }
                        str = str.Substring(0, str.Length - 1).Replace(",,,", "#0#") + "\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                    return str;
                }
                if (PlayTypeID == 0x1a34)
                {
                    string[] strArray2 = new string[3];
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                    for (int m = 0; m < 3; m++)
                    {
                        strArray2[m] = match.Groups["L" + m.ToString()].ToString().Trim();
                        if (strArray2[m] == "")
                        {
                            return "";
                        }
                        if (strArray2[m].Length > 1)
                        {
                            strArray2[m] = strArray2[m].Substring(1, strArray2[m].Length - 2);
                            if (strArray2[m].Length > 1)
                            {
                                strArray2[m] = this.FilterRepeated(strArray2[m]);
                            }
                            if (strArray2[m] == "")
                            {
                                return "";
                            }
                        }
                        str = str + strArray2[m] + ",";
                    }
                    if (str.EndsWith(","))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                    return str;
                }
                string[] strArray3 = Number.Split(new char[] { '\n' });
                for (int i = 0; i < strArray3.Length; i++)
                {
                    for (int n = 0; n < strArray3[i].Length; n++)
                    {
                        str = str + strArray3[i].Substring(n, 1) + ",";
                    }
                    str = str.Substring(0, str.Length - 1) + "\n";
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { 
                    new Lottery.PlayType(0x1a2d, "直选单式"), new Lottery.PlayType(0x1a2e, "组选3单式"), new Lottery.PlayType(0x1a2f, "组选6单式"), new Lottery.PlayType(0x1a30, "直选和值"), new Lottery.PlayType(0x1a31, "组选3和值"), new Lottery.PlayType(0x1a32, "组选6和值"), new Lottery.PlayType(0x1a33, "组合和值"), new Lottery.PlayType(0x1a34, "直选按位包号"), new Lottery.PlayType(0x1a35, "直选复式"), new Lottery.PlayType(0x1a36, "组选3复式"), new Lottery.PlayType(0x1a37, "组选6复式"), new Lottery.PlayType(0x1a38, "组合复式"), new Lottery.PlayType(0x1a39, "直选包串"), new Lottery.PlayType(0x1a3a, "直选二重号"), new Lottery.PlayType(0x1a3b, "直选胆拖"), new Lottery.PlayType(0x1a3c, "组合胆拖"), 
                    new Lottery.PlayType(0x1a3d, "直选跨度"), new Lottery.PlayType(0x1a3e, "组选3跨度"), new Lottery.PlayType(0x1a3f, "组选6跨度"), new Lottery.PlayType(0x1a40, "组合跨度"), new Lottery.PlayType(0x1a41, "和数尾组合"), new Lottery.PlayType(0x1a42, "直选奇偶"), new Lottery.PlayType(0x1a43, "组选3奇偶"), new Lottery.PlayType(0x1a44, "组选6奇偶"), new Lottery.PlayType(0x1a45, "组合奇偶"), new Lottery.PlayType(0x1a46, "直选大小"), new Lottery.PlayType(0x1a47, "组选3大小"), new Lottery.PlayType(0x1a48, "组选6大小"), new Lottery.PlayType(0x1a49, "组合大小")
                 };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPJX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x1a2d)
                {
                    return this.ToElectronicTicket_HPJX_ZhiD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a2e)
                {
                    return this.ToElectronicTicket_HPJX_Zu3D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a2f)
                {
                    return this.ToElectronicTicket_HPJX_Zu6D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a30)
                {
                    return this.ToElectronicTicket_HPJX_ZhiH(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a31)
                {
                    return this.ToElectronicTicket_HPJX_Zu3H(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a32)
                {
                    return this.ToElectronicTicket_HPJX_Zu6H(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a33)
                {
                    return this.ToElectronicTicket_HPJX_ZuheH(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a34)
                {
                    return this.ToElectronicTicket_HPJX_ZhiBW(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a35)
                {
                    return this.ToElectronicTicket_HPJX_ZhiF(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a36)
                {
                    return this.ToElectronicTicket_HPJX_Zu3F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a37)
                {
                    return this.ToElectronicTicket_HPJX_Zu6F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a38)
                {
                    return this.ToElectronicTicket_HPJX_ZuheF(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a39)
                {
                    return this.ToElectronicTicket_HPJX_ZhiBC(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a3a)
                {
                    return this.ToElectronicTicket_HPJX_ZhiECH(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a3b)
                {
                    return this.ToElectronicTicket_HPJX_ZhiDT(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a3c)
                {
                    return this.ToElectronicTicket_HPJX_ZuheDT(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a3d)
                {
                    return this.ToElectronicTicket_HPJX_ZhiKD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a3e)
                {
                    return this.ToElectronicTicket_HPJX_Zu3KD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a3f)
                {
                    return this.ToElectronicTicket_HPJX_Zu6KD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a40)
                {
                    return this.ToElectronicTicket_HPJX_ZuheKD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a41)
                {
                    return this.ToElectronicTicket_HPJX_ZuheHSW(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a42)
                {
                    return this.ToElectronicTicket_HPJX_ZhiJO(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a43)
                {
                    return this.ToElectronicTicket_HPJX_Zu3JO(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a44)
                {
                    return this.ToElectronicTicket_HPJX_Zu6JO(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a45)
                {
                    return this.ToElectronicTicket_HPJX_ZuheJO(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a46)
                {
                    return this.ToElectronicTicket_HPJX_ZhiDX(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a47)
                {
                    return this.ToElectronicTicket_HPJX_Zu3DX(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a48)
                {
                    return this.ToElectronicTicket_HPJX_Zu6DX(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1a49)
                {
                    return this.ToElectronicTicket_HPJX_ZuheDX(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZhiBC(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd5, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZhiBW(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd0, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZhiD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZhiDT(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd7, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZhiDX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xe2, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZhiECH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd6, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZhiF(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd1, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZhiH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xcc, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZhiJO(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xde, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZhiKD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd9, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_Zu3D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_Zu3DX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xe3, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_Zu3F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(210, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_Zu3H(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xcd, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_Zu3JO(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xdf, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_Zu3KD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xda, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_Zu6D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xcb, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_Zu6DX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xe4, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_Zu6F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd3, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_Zu6H(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xce, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_Zu6JO(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xe0, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_Zu6KD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xdb, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZuheDT(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd8, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZuheDX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xe5, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZuheF(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd4, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZuheH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xcf, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZuheHSW(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xdd, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZuheJO(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xe1, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZuheKD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(220, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0x1a2d) || (PlayType == 0x1a34))
                {
                    return this.ToSingle_ZhiD_BW(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a35)
                {
                    return this.ToSingle_ZhiF(Number, ref CanonicalNumber);
                }
                if (((PlayType == 0x1a2e) || (PlayType == 0x1a2f)) || (PlayType == 0x1a37))
                {
                    return this.ToSingle_Zu3D_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a36)
                {
                    return this.ToSingle_Zu3F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a38)
                {
                    return this.ToSingle_ZuheF(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a30)
                {
                    return this.ToSingle_ZhiH(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a31)
                {
                    return this.ToSingle_Zu3H(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a32)
                {
                    return this.ToSingle_Zu6H(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a33)
                {
                    return this.ToSingle_ZuheH(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a39)
                {
                    return this.ToSingle_ZhiBC(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a3a)
                {
                    return this.ToSingle_ZhiECH(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a3b)
                {
                    return this.ToSingle_ZhiDT(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a3c)
                {
                    return this.ToSingle_ZuheDT(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a3d)
                {
                    return this.ToSingle_ZhiKD(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a3e)
                {
                    return this.ToSingle_Zu3KD(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a3f)
                {
                    return this.ToSingle_Zu6KD(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a40)
                {
                    return this.ToSingle_ZuheKD(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a41)
                {
                    return this.ToSingle_ZuheHSW(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a42)
                {
                    Number = Number.Replace("偶", "0").Replace("奇", "1");
                    return this.ToSingle_ZhiJO(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a43)
                {
                    Number = Number.Replace("偶", "0").Replace("奇", "1");
                    return this.ToSingle_Zu3JO(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a44)
                {
                    Number = Number.Replace("偶", "0").Replace("奇", "1");
                    return this.ToSingle_Zu6JO(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a45)
                {
                    Number = Number.Replace("偶", "0").Replace("奇", "1");
                    return this.ToSingle_ZuheJO(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a46)
                {
                    Number = Number.Replace("小", "0").Replace("大", "1");
                    return this.ToSingle_ZhiDX(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a47)
                {
                    Number = Number.Replace("小", "0").Replace("大", "1");
                    return this.ToSingle_Zu3DX(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a48)
                {
                    Number = Number.Replace("小", "0").Replace("大", "1");
                    return this.ToSingle_Zu6DX(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1a49)
                {
                    Number = Number.Replace("小", "0").Replace("大", "1");
                    return this.ToSingle_ZuheDX(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_ZhiBC(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < length; i++)
                {
                    for (int k = 0; k < length; k++)
                    {
                        for (int m = 0; m < length; m++)
                        {
                            list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[m].ToString());
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZhiD_BW(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[3];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            list.Add(str3);
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZhiDT(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[2];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d){1,2})[,](?<L1>(\d){2,})", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                }
                char[] chArray = strArray[0].ToCharArray();
                char[] chArray2 = this.FilterRepeated(strArray[1]).ToCharArray();
                for (int j = 0; j < chArray2.Length; j++)
                {
                    if (strArray[0].IndexOf(chArray2[j]) >= 0)
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                }
                CanonicalNumber = strArray[0] + "," + this.FilterRepeated(strArray[1]);
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                int num4 = chArray2.Length;
                switch (length)
                {
                    case 1:
                        list.Add(chArray[0].ToString() + chArray[0].ToString() + chArray[0].ToString());
                        for (int m = 0; m < num4; m++)
                        {
                            list.Add(chArray[0].ToString() + chArray[0].ToString() + chArray2[m].ToString());
                            list.Add(chArray[0].ToString() + chArray2[m].ToString() + chArray[0].ToString());
                            list.Add(chArray2[m].ToString() + chArray[0].ToString() + chArray[0].ToString());
                            for (int n = 0; n < num4; n++)
                            {
                                list.Add(chArray[0].ToString() + chArray2[m].ToString() + chArray2[n].ToString());
                                list.Add(chArray2[m].ToString() + chArray[0].ToString() + chArray2[n].ToString());
                                list.Add(chArray2[m].ToString() + chArray2[n].ToString() + chArray[0].ToString());
                            }
                        }
                        break;

                    case 2:
                        if (chArray[0] != chArray[1])
                        {
                            for (int num7 = 0; num7 < length; num7++)
                            {
                                for (int num8 = 0; num8 < length; num8++)
                                {
                                    if (num7 != num8)
                                    {
                                        list.Add(chArray[num7].ToString() + chArray[num7].ToString() + chArray[num8].ToString());
                                        list.Add(chArray[num7].ToString() + chArray[num8].ToString() + chArray[num7].ToString());
                                        list.Add(chArray[num8].ToString() + chArray[num7].ToString() + chArray[num7].ToString());
                                    }
                                }
                            }
                        }
                        else
                        {
                            list.Add(chArray[0].ToString() + chArray[0].ToString() + chArray[0].ToString());
                        }
                        if (chArray[0] != chArray[1])
                        {
                            for (int num9 = 0; num9 < length; num9++)
                            {
                                for (int num10 = 0; num10 < length; num10++)
                                {
                                    for (int num11 = 0; num11 < num4; num11++)
                                    {
                                        if (num9 != num10)
                                        {
                                            list.Add(chArray[num9].ToString() + chArray[num10].ToString() + chArray2[num11].ToString());
                                            list.Add(chArray[num9].ToString() + chArray2[num11].ToString() + chArray[num10].ToString());
                                            list.Add(chArray2[num11].ToString() + chArray[num9].ToString() + chArray[num10].ToString());
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int num12 = 0; num12 < num4; num12++)
                            {
                                list.Add(chArray[0].ToString() + chArray[0].ToString() + chArray2[num12].ToString());
                                list.Add(chArray[0].ToString() + chArray2[num12].ToString() + chArray[0].ToString());
                                list.Add(chArray2[num12].ToString() + chArray[0].ToString() + chArray[0].ToString());
                            }
                        }
                        break;
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZhiDX(string Number, ref string CanonicalNumber)
            {
                Regex regex = new Regex("^[0-1][0-1][0-1]{1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (regex.Match(Number).Success)
                {
                    Number = Number.Substring(0, 3);
                    CanonicalNumber = Number;
                }
                else
                {
                    CanonicalNumber = "";
                    return null;
                }
                Number = Number.Replace("1", "(56789)").Replace("0", "(01234)");
                string[] strArray = new string[3];
                Match match2 = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match2.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            return null;
                        }
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            list.Add(str3);
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZhiECH(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < length; i++)
                {
                    for (int k = 0; k < length; k++)
                    {
                        if (i != k)
                        {
                            list.Add(chArray[i].ToString() + chArray[i].ToString() + chArray[k].ToString());
                            list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[i].ToString());
                            list.Add(chArray[k].ToString() + chArray[i].ToString() + chArray[i].ToString());
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZhiF(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < length; i++)
                {
                    for (int k = 0; k < length; k++)
                    {
                        for (int m = 0; m < length; m++)
                        {
                            if (((i != k) && (i != m)) && (k != m))
                            {
                                list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[m].ToString());
                            }
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZhiH(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 0) || (num > 0x1b))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        for (int m = 0; m <= 9; m++)
                        {
                            if (((i + k) + m) == num)
                            {
                                list.Add(i.ToString() + k.ToString() + m.ToString());
                            }
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZhiJO(string Number, ref string CanonicalNumber)
            {
                Regex regex = new Regex("^[0-1][0-1][0-1]{1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (regex.Match(Number).Success)
                {
                    Number = Number.Substring(0, 3);
                    CanonicalNumber = Number;
                }
                else
                {
                    CanonicalNumber = "";
                    return null;
                }
                Number = Number.Replace("1", "(13579)").Replace("0", "(02468)");
                string[] strArray = new string[3];
                Match match2 = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match2.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            return null;
                        }
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            list.Add(str3);
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZhiKD(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 0) || (num > 9))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i < (10 - int.Parse(CanonicalNumber)); i++)
                {
                    for (int n = i + 1; n < (int.Parse(CanonicalNumber) + i); n++)
                    {
                        list.Add(i.ToString() + n.ToString() + ((int.Parse(CanonicalNumber) + i)).ToString());
                    }
                }
                ArrayList list2 = new ArrayList();
                for (int j = 0; j < 3; j++)
                {
                    for (int num5 = 0; num5 < 3; num5++)
                    {
                        for (int num6 = 0; num6 < 3; num6++)
                        {
                            for (int num7 = 0; num7 < list.Count; num7++)
                            {
                                if (((j != num5) && (num5 != num6)) && (num6 != j))
                                {
                                    char[] chArray = list[num7].ToString().ToCharArray();
                                    list2.Add(chArray[j].ToString() + chArray[num5].ToString() + chArray[num6].ToString());
                                }
                            }
                        }
                    }
                }
                for (int k = 0; k < (10 - int.Parse(CanonicalNumber)); k++)
                {
                    if (int.Parse(CanonicalNumber) == 0)
                    {
                        list2.Add(k.ToString() + k.ToString() + k.ToString());
                    }
                    else
                    {
                        list2.Add(k.ToString() + ((int.Parse(CanonicalNumber) + k)).ToString() + ((int.Parse(CanonicalNumber) + k)).ToString());
                        list2.Add(k.ToString() + k.ToString() + ((int.Parse(CanonicalNumber) + k)).ToString());
                        list2.Add(((int.Parse(CanonicalNumber) + k)).ToString() + ((int.Parse(CanonicalNumber) + k)).ToString() + k.ToString());
                        list2.Add(((int.Parse(CanonicalNumber) + k)).ToString() + k.ToString() + k.ToString());
                        list2.Add(((int.Parse(CanonicalNumber) + k)).ToString() + k.ToString() + ((int.Parse(CanonicalNumber) + k)).ToString());
                        list2.Add(k.ToString() + ((int.Parse(CanonicalNumber) + k)).ToString() + k.ToString());
                    }
                }
                if (list2.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list2.Count];
                for (int m = 0; m < list2.Count; m++)
                {
                    strArray[m] = list2[m].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3D_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = Number.Trim();
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                if (length == 2)
                {
                    for (int j = 0; j < (length - 1); j++)
                    {
                        for (int k = j + 1; k < length; k++)
                        {
                            list.Add(chArray[j].ToString() + chArray[j].ToString() + chArray[k].ToString());
                            list.Add(chArray[j].ToString() + chArray[k].ToString() + chArray[k].ToString());
                        }
                    }
                }
                else
                {
                    for (int m = 0; m < (length - 2); m++)
                    {
                        for (int n = m + 1; n < (length - 1); n++)
                        {
                            for (int num6 = n + 1; num6 < length; num6++)
                            {
                                list.Add(chArray[m].ToString() + chArray[n].ToString() + chArray[num6].ToString());
                            }
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int i = 0; i < list.Count; i++)
                {
                    strArray[i] = list[i].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3DX(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                char[] chArray = Number.ToCharArray();
                Regex regex = new Regex("^[0-1][0-1][0-1]{1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (regex.Match(Number).Success)
                {
                    if ((((chArray[0] != chArray[1]) || (chArray[0] != chArray[2])) || (chArray[1] != chArray[2])) && ((chArray[0] == '1') || (chArray[2] == '0')))
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    Number = Number.Substring(0, 3);
                    CanonicalNumber = Number;
                }
                else
                {
                    CanonicalNumber = "";
                    return null;
                }
                Number = Number.Replace("1", "(56789)").Replace("0", "(01234)");
                string[] strArray = new string[3];
                Match match2 = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match2.Groups["L" + i.ToString()].ToString().Trim();
                    strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                    strArray[i] = this.FilterRepeated(strArray[i]);
                }
                ArrayList list = new ArrayList();
                if ((chArray[0] == chArray[1]) && (chArray[0] == chArray[2]))
                {
                    for (int k = 0; k < strArray[0].Length; k++)
                    {
                        for (int m = 0; m < strArray[1].Length; m++)
                        {
                            if (k != m)
                            {
                                list.Add(strArray[0][k].ToString() + strArray[0][k].ToString() + strArray[1][m].ToString());
                            }
                        }
                    }
                }
                if ((chArray[0] == chArray[1]) && (chArray[0] != chArray[2]))
                {
                    for (int n = 0; n < strArray[0].Length; n++)
                    {
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            list.Add(strArray[0][n].ToString() + strArray[0][n].ToString() + strArray[2][num5].ToString());
                        }
                    }
                }
                if ((chArray[1] == chArray[2]) && (chArray[0] != chArray[1]))
                {
                    for (int num6 = 0; num6 < strArray[1].Length; num6++)
                    {
                        for (int num7 = 0; num7 < strArray[0].Length; num7++)
                        {
                            list.Add(strArray[0][num7].ToString() + strArray[1][num6].ToString() + strArray[1][num6].ToString());
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zu3F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[i].ToString() + chArray[k].ToString());
                        list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3H(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 1) || (num > 0x1a))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        if ((i != k) && (((i + i) + k) == num))
                        {
                            list.Add(i.ToString() + i.ToString() + k.ToString());
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3JO(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Regex regex = new Regex("^[0-1][0-1][0-1]{1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (regex.Match(Number).Success)
                {
                    Number = Number.Substring(0, 3);
                    CanonicalNumber = Number;
                }
                else
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = Number.ToCharArray();
                Number = Number.Replace("1", "(13579)").Replace("0", "(02468)");
                string[] strArray = new string[3];
                Match match2 = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match2.Groups["L" + i.ToString()].ToString().Trim();
                    strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                    strArray[i] = this.FilterRepeated(strArray[i]);
                }
                ArrayList list = new ArrayList();
                if ((chArray[0] == chArray[1]) && (chArray[0] == chArray[2]))
                {
                    for (int k = 0; k < strArray[0].Length; k++)
                    {
                        for (int m = 0; m < strArray[1].Length; m++)
                        {
                            if (k != m)
                            {
                                list.Add(strArray[0][k].ToString() + strArray[0][k].ToString() + strArray[1][m].ToString());
                            }
                        }
                    }
                }
                if ((chArray[0] == chArray[1]) && (chArray[0] != chArray[2]))
                {
                    for (int n = 0; n < strArray[0].Length; n++)
                    {
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            list.Add(strArray[0][n].ToString() + strArray[0][n].ToString() + strArray[2][num5].ToString());
                        }
                    }
                }
                if ((chArray[0] == chArray[2]) && (chArray[0] != chArray[1]))
                {
                    for (int num6 = 0; num6 < strArray[0].Length; num6++)
                    {
                        for (int num7 = 0; num7 < strArray[1].Length; num7++)
                        {
                            list.Add(strArray[0][num6].ToString() + strArray[0][num6].ToString() + strArray[1][num7].ToString());
                        }
                    }
                }
                if ((chArray[1] == chArray[2]) && (chArray[0] != chArray[1]))
                {
                    for (int num8 = 0; num8 < strArray[1].Length; num8++)
                    {
                        for (int num9 = 0; num9 < strArray[0].Length; num9++)
                        {
                            list.Add(strArray[0][num9].ToString() + strArray[1][num8].ToString() + strArray[1][num8].ToString());
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zu3KD(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 1) || (num > 9))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i < (10 - int.Parse(CanonicalNumber)); i++)
                {
                    list.Add(i.ToString() + ((int.Parse(CanonicalNumber) + i)).ToString() + ((int.Parse(CanonicalNumber) + i)).ToString());
                    list.Add(i.ToString() + i.ToString() + ((int.Parse(CanonicalNumber) + i)).ToString());
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu6DX(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                char[] chArray = Number.ToCharArray();
                Regex regex = new Regex("^[0-1][0-1][0-1]{1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (regex.Match(Number).Success)
                {
                    if ((((chArray[0] != chArray[1]) || (chArray[0] != chArray[2])) || (chArray[1] != chArray[2])) && ((chArray[0] == '1') || (chArray[2] == '0')))
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    Number = Number.Substring(0, 3);
                    CanonicalNumber = Number;
                }
                else
                {
                    CanonicalNumber = "";
                    return null;
                }
                Number = Number.Replace("1", "(56789)").Replace("0", "(01234)");
                string[] strArray = new string[3];
                Match match2 = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match2.Groups["L" + i.ToString()].ToString().Trim();
                    strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                    strArray[i] = this.FilterRepeated(strArray[i]);
                }
                ArrayList list = new ArrayList();
                if ((chArray[0] == chArray[1]) && (chArray[0] == chArray[2]))
                {
                    for (int k = 0; k < (strArray[0].Length - 2); k++)
                    {
                        for (int m = k + 1; m < (strArray[1].Length - 1); m++)
                        {
                            for (int n = m + 1; n < strArray[2].Length; n++)
                            {
                                list.Add(strArray[0][k].ToString() + strArray[1][m].ToString() + strArray[2][n].ToString());
                            }
                        }
                    }
                }
                if ((chArray[0] == chArray[1]) && (chArray[0] != chArray[2]))
                {
                    for (int num5 = 0; num5 < (strArray[0].Length - 1); num5++)
                    {
                        for (int num6 = num5 + 1; num6 < strArray[1].Length; num6++)
                        {
                            for (int num7 = 0; num7 < strArray[2].Length; num7++)
                            {
                                list.Add(strArray[0][num5].ToString() + strArray[1][num6].ToString() + strArray[2][num7].ToString());
                            }
                        }
                    }
                }
                if ((chArray[1] == chArray[2]) && (chArray[0] != chArray[1]))
                {
                    for (int num8 = 0; num8 < strArray[0].Length; num8++)
                    {
                        for (int num9 = 0; num9 < (strArray[1].Length - 1); num9++)
                        {
                            for (int num10 = num9 + 1; num10 < strArray[2].Length; num10++)
                            {
                                list.Add(strArray[0][num8].ToString() + strArray[1][num9].ToString() + strArray[2][num10].ToString());
                            }
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zu6H(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 3) || (num > 0x18))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i <= 7; i++)
                {
                    for (int k = i + 1; k <= 8; k++)
                    {
                        for (int m = k + 1; m <= 9; m++)
                        {
                            if (((i + k) + m) == num)
                            {
                                list.Add(i.ToString() + k.ToString() + m.ToString());
                            }
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu6JO(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Regex regex = new Regex("^[0-1][0-1][0-1]{1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (regex.Match(Number).Success)
                {
                    Number = Number.Substring(0, 3);
                    CanonicalNumber = Number;
                }
                else
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = Number.ToCharArray();
                Number = Number.Replace("1", "(13579)").Replace("0", "(02468)");
                string[] strArray = new string[3];
                Match match2 = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match2.Groups["L" + i.ToString()].ToString().Trim();
                    strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                    strArray[i] = this.FilterRepeated(strArray[i]);
                }
                ArrayList list = new ArrayList();
                if ((chArray[0] == chArray[1]) && (chArray[0] == chArray[2]))
                {
                    for (int k = 0; k < (strArray[0].Length - 2); k++)
                    {
                        for (int m = k + 1; m < (strArray[1].Length - 1); m++)
                        {
                            for (int n = m + 1; n < strArray[2].Length; n++)
                            {
                                list.Add(strArray[0][k].ToString() + strArray[1][m].ToString() + strArray[2][n].ToString());
                            }
                        }
                    }
                }
                if ((chArray[0] == chArray[1]) && (chArray[0] != chArray[2]))
                {
                    for (int num5 = 0; num5 < (strArray[0].Length - 1); num5++)
                    {
                        for (int num6 = num5 + 1; num6 < strArray[1].Length; num6++)
                        {
                            for (int num7 = 0; num7 < strArray[2].Length; num7++)
                            {
                                list.Add(strArray[0][num5].ToString() + strArray[1][num6].ToString() + strArray[2][num7].ToString());
                            }
                        }
                    }
                }
                if ((chArray[0] == chArray[2]) && (chArray[0] != chArray[1]))
                {
                    for (int num8 = 0; num8 < (strArray[0].Length - 1); num8++)
                    {
                        for (int num9 = 0; num9 < strArray[1].Length; num9++)
                        {
                            for (int num10 = num8 + 1; num10 < strArray[2].Length; num10++)
                            {
                                list.Add(strArray[0][num8].ToString() + strArray[1][num9].ToString() + strArray[2][num10].ToString());
                            }
                        }
                    }
                }
                if ((chArray[1] == chArray[2]) && (chArray[0] != chArray[1]))
                {
                    for (int num11 = 0; num11 < strArray[0].Length; num11++)
                    {
                        for (int num12 = 0; num12 < (strArray[1].Length - 1); num12++)
                        {
                            for (int num13 = num12 + 1; num13 < strArray[2].Length; num13++)
                            {
                                list.Add(strArray[0][num11].ToString() + strArray[1][num12].ToString() + strArray[2][num13].ToString());
                            }
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zu6KD(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 2) || (num > 9))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i < (10 - int.Parse(CanonicalNumber)); i++)
                {
                    for (int k = i + 1; k < (int.Parse(CanonicalNumber) + i); k++)
                    {
                        list.Add(i.ToString() + k.ToString() + ((int.Parse(CanonicalNumber) + i)).ToString());
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZuheDT(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[2];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d){1,2})[,](?<L1>(\d){2,})", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                }
                char[] chArray = strArray[0].ToCharArray();
                char[] chArray2 = this.FilterRepeated(strArray[1]).ToCharArray();
                for (int j = 0; j < chArray2.Length; j++)
                {
                    if (strArray[0].IndexOf(chArray2[j]) >= 0)
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                }
                CanonicalNumber = strArray[0] + "," + this.FilterRepeated(strArray[1]);
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                int num4 = chArray2.Length;
                switch (length)
                {
                    case 1:
                        list.Add(chArray[0].ToString() + chArray[0].ToString() + chArray[0].ToString());
                        for (int m = 0; m < num4; m++)
                        {
                            list.Add(chArray[0].ToString() + chArray[0].ToString() + chArray2[m].ToString());
                            list.Add(chArray[0].ToString() + chArray2[m].ToString() + chArray2[m].ToString());
                        }
                        for (int n = 0; n < (num4 - 1); n++)
                        {
                            for (int num7 = n + 1; num7 < num4; num7++)
                            {
                                list.Add(chArray[0].ToString() + chArray2[n].ToString() + chArray2[num7].ToString());
                            }
                        }
                        break;

                    case 2:
                        if (chArray[0] != chArray[1])
                        {
                            list.Add(chArray[0].ToString() + chArray[0].ToString() + chArray[1].ToString());
                            list.Add(chArray[0].ToString() + chArray[1].ToString() + chArray[1].ToString());
                        }
                        else
                        {
                            list.Add(chArray[0].ToString() + chArray[0].ToString() + chArray[0].ToString());
                        }
                        for (int num8 = 0; num8 < num4; num8++)
                        {
                            list.Add(chArray[0].ToString() + chArray[1].ToString() + chArray2[num8].ToString());
                        }
                        break;
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZuheDX(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                char[] chArray = Number.ToCharArray();
                Regex regex = new Regex("^[0-1][0-1][0-1]{1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (regex.Match(Number).Success)
                {
                    if ((((chArray[0] != chArray[1]) || (chArray[0] != chArray[2])) || (chArray[1] != chArray[2])) && ((chArray[0] == '1') || (chArray[2] == '0')))
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    Number = Number.Substring(0, 3);
                    CanonicalNumber = Number;
                }
                else
                {
                    CanonicalNumber = "";
                    return null;
                }
                Number = Number.Replace("1", "(56789)").Replace("0", "(01234)");
                string[] strArray = new string[3];
                Match match2 = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match2.Groups["L" + i.ToString()].ToString().Trim();
                    strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                    strArray[i] = this.FilterRepeated(strArray[i]);
                }
                ArrayList list = new ArrayList();
                if ((chArray[0] == chArray[1]) && (chArray[0] == chArray[2]))
                {
                    for (int k = 0; k < strArray[0].Length; k++)
                    {
                        list.Add(strArray[0][k].ToString() + strArray[0][k].ToString() + strArray[0][k].ToString());
                    }
                    for (int m = 0; m < (strArray[0].Length - 2); m++)
                    {
                        for (int num4 = m + 1; num4 < (strArray[1].Length - 1); num4++)
                        {
                            for (int num5 = num4 + 1; num5 < strArray[2].Length; num5++)
                            {
                                list.Add(strArray[0][m].ToString() + strArray[1][num4].ToString() + strArray[2][num5].ToString());
                            }
                        }
                    }
                    for (int n = 0; n < strArray[0].Length; n++)
                    {
                        for (int num7 = 0; num7 < strArray[1].Length; num7++)
                        {
                            if (n != num7)
                            {
                                list.Add(strArray[0][n].ToString() + strArray[0][n].ToString() + strArray[1][num7].ToString());
                            }
                        }
                    }
                }
                if ((chArray[0] == chArray[1]) && (chArray[0] != chArray[2]))
                {
                    for (int num8 = 0; num8 < (strArray[0].Length - 1); num8++)
                    {
                        for (int num9 = num8 + 1; num9 < strArray[1].Length; num9++)
                        {
                            for (int num10 = 0; num10 < strArray[2].Length; num10++)
                            {
                                list.Add(strArray[0][num8].ToString() + strArray[1][num9].ToString() + strArray[2][num10].ToString());
                            }
                        }
                    }
                    for (int num11 = 0; num11 < strArray[0].Length; num11++)
                    {
                        for (int num12 = 0; num12 < strArray[2].Length; num12++)
                        {
                            list.Add(strArray[0][num11].ToString() + strArray[0][num11].ToString() + strArray[2][num12].ToString());
                        }
                    }
                }
                if ((chArray[1] == chArray[2]) && (chArray[0] != chArray[1]))
                {
                    for (int num13 = 0; num13 < strArray[0].Length; num13++)
                    {
                        for (int num14 = 0; num14 < (strArray[1].Length - 1); num14++)
                        {
                            for (int num15 = num14 + 1; num15 < strArray[2].Length; num15++)
                            {
                                list.Add(strArray[0][num13].ToString() + strArray[1][num14].ToString() + strArray[2][num15].ToString());
                            }
                        }
                    }
                    for (int num16 = 0; num16 < strArray[1].Length; num16++)
                    {
                        for (int num17 = 0; num17 < strArray[0].Length; num17++)
                        {
                            list.Add(strArray[1][num16].ToString() + strArray[1][num16].ToString() + strArray[0][num17].ToString());
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZuheF(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int n = i + 1; n < length; n++)
                    {
                        list.Add(chArray[i].ToString() + chArray[i].ToString() + chArray[n].ToString());
                        list.Add(chArray[i].ToString() + chArray[n].ToString() + chArray[n].ToString());
                    }
                }
                for (int j = 0; j < length; j++)
                {
                    for (int num5 = 0; num5 < length; num5++)
                    {
                        for (int num6 = 0; num6 < length; num6++)
                        {
                            if (((j == num5) && (j == num6)) && (num5 == num6))
                            {
                                list.Add(chArray[j].ToString() + chArray[num5].ToString() + chArray[num6].ToString());
                            }
                        }
                    }
                }
                for (int k = 0; k < (length - 2); k++)
                {
                    for (int num8 = k + 1; num8 < (length - 1); num8++)
                    {
                        for (int num9 = num8 + 1; num9 < length; num9++)
                        {
                            list.Add(chArray[k].ToString() + chArray[num8].ToString() + chArray[num9].ToString());
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray[m] = list[m].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZuheH(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 0) || (num > 0x1b))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i <= 9; i++)
                {
                    if (((i + i) + i) == num)
                    {
                        list.Add(i.ToString() + i.ToString() + i.ToString());
                    }
                }
                for (int j = 0; j <= 9; j++)
                {
                    for (int n = 0; n <= 9; n++)
                    {
                        if ((j != n) && (((j + j) + n) == num))
                        {
                            list.Add(j.ToString() + j.ToString() + n.ToString());
                        }
                    }
                }
                for (int k = 0; k <= 7; k++)
                {
                    for (int num6 = k + 1; num6 <= 8; num6++)
                    {
                        for (int num7 = num6 + 1; num7 <= 9; num7++)
                        {
                            if (((k + num6) + num7) == num)
                            {
                                list.Add(k.ToString() + num6.ToString() + num7.ToString());
                            }
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray[m] = list[m].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZuheHSW(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 0) || (num > 9))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i < 3; i++)
                {
                    for (int m = 0; m < 10; m++)
                    {
                        for (int n = 0; n < 10; n++)
                        {
                            if (((m + n) + n) == int.Parse(((i == 0) ? null : i.ToString()) + ((string) CanonicalNumber)))
                            {
                                list.Add(m.ToString() + n.ToString() + n.ToString());
                            }
                        }
                    }
                }
                for (int j = 0; j < 3; j++)
                {
                    for (int num6 = 0; num6 < 8; num6++)
                    {
                        for (int num7 = num6 + 1; num7 < 9; num7++)
                        {
                            for (int num8 = num7 + 1; num8 < 10; num8++)
                            {
                                if (((num6 + num7) + num8) == int.Parse(((j == 0) ? null : j.ToString()) + ((string) CanonicalNumber)))
                                {
                                    list.Add(num6.ToString() + num7.ToString() + num8.ToString());
                                }
                            }
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray[k] = list[k].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZuheJO(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Regex regex = new Regex("^[0-1][0-1][0-1]{1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (regex.Match(Number).Success)
                {
                    Number = Number.Substring(0, 3);
                    CanonicalNumber = Number;
                }
                else
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = Number.ToCharArray();
                Number = Number.Replace("1", "(13579)").Replace("0", "(02468)");
                string[] strArray = new string[3];
                Match match2 = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match2.Groups["L" + i.ToString()].ToString().Trim();
                    strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                    strArray[i] = this.FilterRepeated(strArray[i]);
                }
                ArrayList list = new ArrayList();
                if ((chArray[0] == chArray[1]) && (chArray[0] == chArray[2]))
                {
                    for (int k = 0; k < strArray[0].Length; k++)
                    {
                        list.Add(strArray[0][k].ToString() + strArray[0][k].ToString() + strArray[0][k].ToString());
                    }
                    for (int m = 0; m < (strArray[0].Length - 2); m++)
                    {
                        for (int num4 = m + 1; num4 < (strArray[1].Length - 1); num4++)
                        {
                            for (int num5 = num4 + 1; num5 < strArray[2].Length; num5++)
                            {
                                list.Add(strArray[0][m].ToString() + strArray[1][num4].ToString() + strArray[2][num5].ToString());
                            }
                        }
                    }
                    for (int n = 0; n < strArray[0].Length; n++)
                    {
                        for (int num7 = 0; num7 < strArray[1].Length; num7++)
                        {
                            if (n != num7)
                            {
                                list.Add(strArray[0][n].ToString() + strArray[0][n].ToString() + strArray[1][num7].ToString());
                            }
                        }
                    }
                }
                if ((chArray[0] == chArray[1]) && (chArray[0] != chArray[2]))
                {
                    for (int num8 = 0; num8 < (strArray[0].Length - 1); num8++)
                    {
                        for (int num9 = num8 + 1; num9 < strArray[1].Length; num9++)
                        {
                            for (int num10 = 0; num10 < strArray[2].Length; num10++)
                            {
                                list.Add(strArray[0][num8].ToString() + strArray[1][num9].ToString() + strArray[2][num10].ToString());
                            }
                        }
                    }
                    for (int num11 = 0; num11 < strArray[0].Length; num11++)
                    {
                        for (int num12 = 0; num12 < strArray[2].Length; num12++)
                        {
                            list.Add(strArray[0][num11].ToString() + strArray[0][num11].ToString() + strArray[2][num12].ToString());
                        }
                    }
                }
                if ((chArray[0] == chArray[2]) && (chArray[0] != chArray[1]))
                {
                    for (int num13 = 0; num13 < (strArray[0].Length - 1); num13++)
                    {
                        for (int num14 = 0; num14 < strArray[1].Length; num14++)
                        {
                            for (int num15 = num13 + 1; num15 < strArray[2].Length; num15++)
                            {
                                list.Add(strArray[0][num13].ToString() + strArray[1][num14].ToString() + strArray[2][num15].ToString());
                            }
                        }
                    }
                    for (int num16 = 0; num16 < strArray[0].Length; num16++)
                    {
                        for (int num17 = 0; num17 < strArray[1].Length; num17++)
                        {
                            list.Add(strArray[0][num16].ToString() + strArray[0][num16].ToString() + strArray[1][num17].ToString());
                        }
                    }
                }
                if ((chArray[1] == chArray[2]) && (chArray[0] != chArray[1]))
                {
                    for (int num18 = 0; num18 < strArray[0].Length; num18++)
                    {
                        for (int num19 = 0; num19 < (strArray[1].Length - 1); num19++)
                        {
                            for (int num20 = num19 + 1; num20 < strArray[2].Length; num20++)
                            {
                                list.Add(strArray[0][num18].ToString() + strArray[1][num19].ToString() + strArray[2][num20].ToString());
                            }
                        }
                    }
                    for (int num21 = 0; num21 < strArray[1].Length; num21++)
                    {
                        for (int num22 = 0; num22 < strArray[0].Length; num22++)
                        {
                            list.Add(strArray[1][num21].ToString() + strArray[1][num21].ToString() + strArray[0][num22].ToString());
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZuheKD(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 1) || (num > 9))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i < (10 - int.Parse(CanonicalNumber)); i++)
                {
                    list.Add(i.ToString() + ((int.Parse(CanonicalNumber) + i)).ToString() + ((int.Parse(CanonicalNumber) + i)).ToString());
                    list.Add(i.ToString() + i.ToString() + ((int.Parse(CanonicalNumber) + i)).ToString());
                }
                for (int j = 0; j < (10 - int.Parse(CanonicalNumber)); j++)
                {
                    for (int m = j + 1; m < (int.Parse(CanonicalNumber) + j); m++)
                    {
                        list.Add(j.ToString() + m.ToString() + ((int.Parse(CanonicalNumber) + j)).ToString());
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray[k] = list[k].ToString();
                }
                return strArray;
            }
        }

        public class JXSSC : Lottery.LotteryBase
        {
            public const string Code = "JXSSC";
            public const int ID = 0x3d;
            public const double MaxMoney = 200000.0;
            public const string Name = "江西时时彩";
            public const int PlayType_2X_ZhiB = 0x17e0;
            public const int PlayType_2X_ZuB = 0x17de;
            public const int PlayType_2X_ZuBD = 0x17df;
            public const int PlayType_2X_ZuD = 0x17db;
            public const int PlayType_2X_ZuF = 0x17dc;
            public const int PlayType_2X_ZuFW = 0x17dd;
            public const int PlayType_3X_Zu3D = 0x17e1;
            public const int PlayType_3X_Zu3F = 0x17e2;
            public const int PlayType_3X_Zu6D = 0x17e3;
            public const int PlayType_3X_Zu6F = 0x17e4;
            public const int PlayType_5X_TXD = 0x17d9;
            public const int PlayType_5X_TXF = 0x17da;
            public const int PlayType_D = 0x17d5;
            public const int PlayType_DX = 0x17d8;
            public const int PlayType_F = 0x17d6;
            public const int PlayType_RX1 = 0x17e5;
            public const int PlayType_RX2 = 0x17e6;
            public const int PlayType_ZH = 0x17d7;
            public const string sID = "61";

            public JXSSC()
            {
                base.id = 0x3d;
                base.name = "江西时时彩";
                base.code = "JXSSC";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x17d5)
                {
                    return this.AnalyseScheme_D(Content, PlayType);
                }
                if (PlayType == 0x17d6)
                {
                    return this.AnalyseScheme_F(Content, PlayType);
                }
                if (PlayType == 0x17d7)
                {
                    return this.AnalyseScheme_ZH(Content, PlayType);
                }
                if (PlayType == 0x17d8)
                {
                    return this.AnalyseScheme_DX(Content, PlayType);
                }
                if ((PlayType == 0x17d9) || (PlayType == 0x17da))
                {
                    return this.AnalyseScheme_5X_TX(Content, PlayType);
                }
                if (PlayType == 0x17db)
                {
                    return this.AnalyseScheme_2X_ZuD(Content, PlayType);
                }
                if (PlayType == 0x17dc)
                {
                    return this.AnalyseScheme_2X_ZuF(Content, PlayType);
                }
                if (PlayType == 0x17dd)
                {
                    return this.AnalyseScheme_2X_ZuFW(Content, PlayType);
                }
                if (PlayType == 0x17de)
                {
                    return this.AnalyseScheme_2X_ZuB(Content, PlayType);
                }
                if (PlayType == 0x17df)
                {
                    return this.AnalyseScheme_2X_ZuBD(Content, PlayType);
                }
                if (PlayType == 0x17e0)
                {
                    return this.AnalyseScheme_2X_ZhiB(Content, PlayType);
                }
                if (PlayType == 0x17e1)
                {
                    return this.AnalyseScheme_3X_Zu3D(Content, PlayType);
                }
                if (PlayType == 0x17e3)
                {
                    return this.AnalyseScheme_3X_Zu6D(Content, PlayType);
                }
                if (PlayType == 0x17e2)
                {
                    return this.AnalyseScheme_3X_Zu3F(Content, PlayType);
                }
                if (PlayType == 0x17e4)
                {
                    return this.AnalyseScheme_3X_Zu6F(Content, PlayType);
                }
                if (PlayType == 0x17e5)
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if (PlayType == 0x17e6)
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                return "";
            }

            private string AnalyseScheme_2X_ZhiB(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZhiB(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2X_ZuB(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuB(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2X_ZuBD(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuBD(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2X_ZuD(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x17db)
                {
                    str2 = @"(\d){2}";
                }
                else
                {
                    str2 = @"(\d){3,10}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuD(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x17db) ? 1 : 2)))
                        {
                            if (this.FilterRepeated(base.Sort(match.Value)).Length == 2)
                            {
                                if (PlayType != 0x17dc)
                                {
                                    str = str + match.Value + "|1\n";
                                }
                            }
                            else
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2X_ZuF(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x17db)
                {
                    str2 = @"(\d){2}";
                }
                else
                {
                    str2 = @"(\d){3,10}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuF(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x17db) ? 1 : 2)))
                        {
                            if (this.FilterRepeated(base.Sort(match.Value)).Length == 2)
                            {
                                if (PlayType != 0x17dc)
                                {
                                    str = str + match.Value + "|1\n";
                                }
                            }
                            else
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2X_ZuFW(string Content, int PlayType)
            {
                string[] strArray = Content.Trim().Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"([(](\d){2,10}[)][(](\d){2,10}[)])|([\d][(](\d){2,10}[)])|([(](\d){2,10}[)][\d])";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    strArray[i] = base.FilterPreFix(strArray[i]);
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuFW(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_Zu3D(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_Zu3D(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_Zu3F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,10}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_Zu3F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_Zu6D(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_Zu6D(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_Zu6F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){3,10}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_Zu6F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_5X_TX(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x17d9)
                {
                    str2 = @"([\d]){5}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){5}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_5X_TX(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x17d9) ? 1 : 2))) && (strArray2.Length <= 100000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_D(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(([\d])|([-])){4}[\d]";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_D(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_DX(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "([[]猜大小[]])*?([大小单双]){2}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_DX(match.Value.Replace("[猜大小]", ""), ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(([\d])|([-])){4}[\d]";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"(([-])|(\d)|([(][\d]+?[)])){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"(([-])|(\d)|([(][\d]+?[)])){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(([\d-])|([(][\d]+?[)])){4}(([\d])|([(][\d]+?[)]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_F(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x17d9)
                {
                    str2 = @"([\d]){5}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){5}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_5X_TX(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                str = str + strArray2[j] + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"([\d]){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                if ((((Type != 5) && (Type != 4)) && ((Type != 3) && (Type != 2))) && ((Type != 1) && (Type != -1)))
                {
                    Type = 5;
                }
                if (Type == -1)
                {
                    return this.BuildNumber_DX(Num);
                }
                return this.BuildNumber_54321(Num, Type);
            }

            private string BuildNumber_54321(int Num, int Type)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = Type; j < 5; j++)
                    {
                        str = str + "-";
                    }
                    for (int k = 0; k < Type; k++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            private string BuildNumber_DX(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 2; j++)
                    {
                        str = str + "大小单双".Substring(random.Next(0, 4), 1);
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x17d5) && (play_type <= 0x17e6));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 30))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int winCountDX = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                int num12 = 0;
                int num13 = 0;
                int num14 = 0;
                int num15 = 0;
                if (PlayType == 0x17d5)
                {
                    return this.ComputeWin_D(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], ref num, ref num2, ref num3, ref num4, ref num5);
                }
                if (PlayType == 0x17d6)
                {
                    return this.ComputeWin_F(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], ref num, ref num2, ref num3, ref num4, ref num5);
                }
                if (PlayType == 0x17d7)
                {
                    return this.ComputeWin_ZH(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], ref num, ref num2, ref num3, ref num4, ref num5);
                }
                if (PlayType == 0x17d8)
                {
                    return this.ComputeWin_DX(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11], ref winCountDX);
                }
                if ((PlayType == 0x17d9) || (PlayType == 0x17da))
                {
                    return this.ComputeWin_5X_TX(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13], WinMoneyList[20], WinMoneyList[0x15], ref num9, ref num10, ref num11);
                }
                if (PlayType == 0x17db)
                {
                    return this.ComputeWin_2X_ZuD(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref num7);
                }
                if (PlayType == 0x17dc)
                {
                    return this.ComputeWin_2X_ZuF(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], ref num7, ref num8);
                }
                if (PlayType == 0x17dd)
                {
                    return this.ComputeWin_2X_ZuFW(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], ref num7, ref num8);
                }
                if (PlayType == 0x17de)
                {
                    return this.ComputeWin_2X_ZuB(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], ref num7, ref num8);
                }
                if (PlayType == 0x17df)
                {
                    return this.ComputeWin_2X_ZuBD(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], ref num7, ref num8);
                }
                if (PlayType == 0x17e0)
                {
                    return this.ComputeWin_2X_ZhiB(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[6], WinMoneyList[7], ref num4);
                }
                if (PlayType == 0x17e1)
                {
                    return this.ComputeWin_3X_Zu3D(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x16], WinMoneyList[0x17], ref num12);
                }
                if (PlayType == 0x17e3)
                {
                    return this.ComputeWin_3X_Zu6D(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x18], WinMoneyList[0x19], ref num13);
                }
                if (PlayType == 0x17e2)
                {
                    return this.ComputeWin_3X_Zu3F(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x16], WinMoneyList[0x17], ref num12);
                }
                if (PlayType == 0x17e4)
                {
                    return this.ComputeWin_3X_Zu6F(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x18], WinMoneyList[0x19], ref num13);
                }
                if (PlayType == 0x17e5)
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x1a], WinMoneyList[0x1b], ref num14);
                }
                if (PlayType == 0x17e6)
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x1c], WinMoneyList[0x1d], ref num15);
                }
                return -4.0;
            }

            private double ComputeWin_2X_ZhiB(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount2X)
            {
                WinCount2X = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZhiB(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                WinCount2X++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount2X > 0)
                {
                    base.MergeWinDescription(ref Description, "二星直选奖" + ((int) WinCount2X).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_2X_ZuB(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_2X_Zu, ref int WinCount_2X_Zu_DZH)
            {
                WinCount_2X_Zu = 0;
                WinCount_2X_Zu_DZH = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                bool flag = WinNumber[0] == WinNumber[1];
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuB(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (!flag)
                                {
                                    WinCount_2X_Zu++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    WinCount_2X_Zu_DZH++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (WinCount_2X_Zu_DZH > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖(对子号)" + ((int) WinCount_2X_Zu_DZH).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_2X_ZuBD(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_2X_Zu, ref int WinCount_2X_Zu_DZH)
            {
                WinCount_2X_Zu = 0;
                WinCount_2X_Zu_DZH = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                bool flag = WinNumber[0] == WinNumber[1];
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuBD(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (!flag)
                                {
                                    WinCount_2X_Zu++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    WinCount_2X_Zu_DZH++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (WinCount_2X_Zu_DZH > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖(对子号)" + ((int) WinCount_2X_Zu_DZH).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_2X_ZuD(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_2X_Zu)
            {
                WinCount_2X_Zu = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuD(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                WinCount_2X_Zu++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_2X_ZuF(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_2X_Zu, ref int WinCount_2X_Zu_DZH)
            {
                WinCount_2X_Zu = 0;
                WinCount_2X_Zu_DZH = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                bool flag = WinNumber[0] == WinNumber[1];
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuF(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (!flag)
                                {
                                    WinCount_2X_Zu++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    WinCount_2X_Zu_DZH++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (WinCount_2X_Zu_DZH > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖(对子号)" + ((int) WinCount_2X_Zu_DZH).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_2X_ZuFW(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_2X_Zu, ref int WinCount_2X_Zu_DZH)
            {
                WinCount_2X_Zu = 0;
                WinCount_2X_Zu_DZH = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                bool flag = WinNumber[0] == WinNumber[1];
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuFW(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (!flag)
                                {
                                    WinCount_2X_Zu++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    WinCount_2X_Zu_DZH++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (WinCount_2X_Zu_DZH > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖(对子号)" + ((int) WinCount_2X_Zu_DZH).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_Zu3D(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_3X_Zu3)
            {
                WinCount_3X_Zu3 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(2, 3);
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_Zu3D(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j].Substring(2, 3)) == base.Sort(WinNumber)))
                            {
                                WinCount_3X_Zu3++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_3X_Zu3 > 0)
                {
                    base.MergeWinDescription(ref Description, "三星组选三奖" + ((int) WinCount_3X_Zu3).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_Zu3F(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_3X_Zu3)
            {
                WinCount_3X_Zu3 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(2, 3);
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_Zu3F(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j].Substring(2, 3)) == base.Sort(WinNumber)))
                            {
                                WinCount_3X_Zu3++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_3X_Zu3 > 0)
                {
                    base.MergeWinDescription(ref Description, "三星组选三奖" + ((int) WinCount_3X_Zu3).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_Zu6D(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_3X_Zu6)
            {
                WinCount_3X_Zu6 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(2, 3);
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_Zu6D(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j].Substring(2, 3)) == base.Sort(WinNumber)))
                            {
                                WinCount_3X_Zu6++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_3X_Zu6 > 0)
                {
                    base.MergeWinDescription(ref Description, "三星组选六奖" + ((int) WinCount_3X_Zu6).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_Zu6F(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_3X_Zu6)
            {
                WinCount_3X_Zu6 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(2, 3);
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_Zu6F(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j].Substring(2, 3)) == base.Sort(WinNumber)))
                            {
                                WinCount_3X_Zu6++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_3X_Zu6 > 0)
                {
                    base.MergeWinDescription(ref Description, "三星组选六奖" + ((int) WinCount_3X_Zu6).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_5X_TX(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, ref int WinCount_5XTX_1, ref int WinCount_5XTX_2, ref int WinCount_5XTX_3)
            {
                WinCount_5XTX_1 = 0;
                WinCount_5XTX_2 = 0;
                WinCount_5XTX_3 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_5X_TX(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 5)
                            {
                                if (strArray2[j] == WinNumber)
                                {
                                    WinCount_5XTX_1++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                if ((strArray2[j].Substring(2, 3) == WinNumber.Substring(2, 3)) || (strArray2[j].Substring(0, 3) == WinNumber.Substring(0, 3)))
                                {
                                    WinCount_5XTX_2++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                                if ((strArray2[j].Substring(3, 2) == WinNumber.Substring(3, 2)) || (strArray2[j].Substring(0, 2) == WinNumber.Substring(0, 2)))
                                {
                                    WinCount_5XTX_3++;
                                    num += WinMoney3;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_5XTX_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选一等奖" + ((int) WinCount_5XTX_1).ToString() + "注");
                }
                if (WinCount_5XTX_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选二等奖" + ((int) WinCount_5XTX_2).ToString() + "注");
                }
                if (WinCount_5XTX_3 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选三等奖" + ((int) WinCount_5XTX_3).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_D(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, ref int WinCount5X, ref int WinCount4X, ref int WinCount3X, ref int WinCount2X, ref int WinCount1X)
            {
                WinCount5X = 0;
                WinCount4X = 0;
                WinCount3X = 0;
                WinCount2X = 0;
                WinCount1X = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_D(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"-(\d){4}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (regexArray[0].IsMatch(strArray2[j]) && (strArray2[j] == WinNumber))
                            {
                                WinCount5X++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                            else if (regexArray[1].IsMatch(strArray2[j]) && (strArray2[j].Substring(1, 4) == WinNumber.Substring(1, 4)))
                            {
                                WinCount4X++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                            }
                            else if (regexArray[2].IsMatch(strArray2[j]) && (strArray2[j].Substring(2, 3) == WinNumber.Substring(2, 3)))
                            {
                                WinCount3X++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                            else if (regexArray[3].IsMatch(strArray2[j]) && (strArray2[j].Substring(3, 2) == WinNumber.Substring(3, 2)))
                            {
                                WinCount2X++;
                                num += WinMoney4;
                                WinMoneyNoWithTax += WinMoneyNoWithTax4;
                            }
                            else if (regexArray[4].IsMatch(strArray2[j]) && (strArray2[j].Substring(4, 1) == WinNumber.Substring(4, 1)))
                            {
                                WinCount1X++;
                                num += WinMoney5;
                                WinMoneyNoWithTax += WinMoneyNoWithTax5;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount5X > 0)
                {
                    base.MergeWinDescription(ref Description, "五星奖" + ((int) WinCount5X).ToString() + "注");
                }
                if (WinCount4X > 0)
                {
                    base.MergeWinDescription(ref Description, "四星奖" + ((int) WinCount4X).ToString() + "注");
                }
                if (WinCount3X > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + ((int) WinCount3X).ToString() + "注");
                }
                if (WinCount2X > 0)
                {
                    base.MergeWinDescription(ref Description, "二星奖" + ((int) WinCount2X).ToString() + "注");
                }
                if (WinCount1X > 0)
                {
                    base.MergeWinDescription(ref Description, "一星奖" + ((int) WinCount1X).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_DX(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCountDX)
            {
                WinCountDX = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = "";
                string str2 = "";
                int num = _Convert.StrToInt(WinNumber.Substring(3, 1), 0);
                str = str + ((num <= 4) ? "小" : "大") + (((num % 2) == 0) ? "双" : "单");
                num = _Convert.StrToInt(WinNumber.Substring(4, 1), 0);
                str2 = str2 + ((num <= 4) ? "小" : "大") + (((num % 2) == 0) ? "双" : "单");
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_DX(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (((strArray2[j].Length >= 2) && (str.IndexOf(strArray2[j][0]) >= 0)) && (str2.IndexOf(strArray2[j][1]) >= 0))
                            {
                                WinCountDX++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCountDX > 0)
                {
                    base.MergeWinDescription(ref Description, "猜大小奖" + ((int) WinCountDX).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_F(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, ref int WinCount5X, ref int WinCount4X, ref int WinCount3X, ref int WinCount2X, ref int WinCount1X)
            {
                WinCount5X = 0;
                WinCount4X = 0;
                WinCount3X = 0;
                WinCount2X = 0;
                WinCount1X = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_F(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"-(\d){4}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (regexArray[0].IsMatch(strArray2[j]) && (strArray2[j] == WinNumber))
                            {
                                WinCount5X++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                            else if (regexArray[1].IsMatch(strArray2[j]) && (strArray2[j].Substring(1, 4) == WinNumber.Substring(1, 4)))
                            {
                                WinCount4X++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                            }
                            else if (regexArray[2].IsMatch(strArray2[j]) && (strArray2[j].Substring(2, 3) == WinNumber.Substring(2, 3)))
                            {
                                WinCount3X++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                            else if (regexArray[3].IsMatch(strArray2[j]) && (strArray2[j].Substring(3, 2) == WinNumber.Substring(3, 2)))
                            {
                                WinCount2X++;
                                num += WinMoney4;
                                WinMoneyNoWithTax += WinMoneyNoWithTax4;
                            }
                            else if (regexArray[4].IsMatch(strArray2[j]) && (strArray2[j].Substring(4, 1) == WinNumber.Substring(4, 1)))
                            {
                                WinCount1X++;
                                num += WinMoney5;
                                WinMoneyNoWithTax += WinMoneyNoWithTax5;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount5X > 0)
                {
                    base.MergeWinDescription(ref Description, "五星奖" + ((int) WinCount5X).ToString() + "注");
                }
                if (WinCount4X > 0)
                {
                    base.MergeWinDescription(ref Description, "四星奖" + ((int) WinCount5X).ToString() + "注");
                }
                if (WinCount3X > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + ((int) WinCount3X).ToString() + "注");
                }
                if (WinCount2X > 0)
                {
                    base.MergeWinDescription(ref Description, "二星奖" + ((int) WinCount2X).ToString() + "注");
                }
                if (WinCount1X > 0)
                {
                    base.MergeWinDescription(ref Description, "一星奖" + ((int) WinCount1X).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_RX1)
            {
                WinCount_RX1 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 5)
                            {
                                for (int k = 0; k < strArray2[j].Length; k++)
                                {
                                    if (strArray2[j].Substring(k, 1) == WinNumber.Substring(k, 1))
                                    {
                                        WinCount_RX1++;
                                        num += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_RX1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选一奖" + ((int) WinCount_RX1).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_RX2)
            {
                WinCount_RX2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 5)
                            {
                                int num4 = 0;
                                for (int k = 0; k < strArray2[j].Length; k++)
                                {
                                    if (strArray2[j].Substring(k, 1) == WinNumber.Substring(k, 1))
                                    {
                                        num4++;
                                    }
                                    if (num4 == 2)
                                    {
                                        WinCount_RX2++;
                                        num += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_RX2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选二奖" + ((int) WinCount_RX2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_ZH(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, ref int WinCount5X, ref int WinCount4X, ref int WinCount3X, ref int WinCount2X, ref int WinCount1X)
            {
                WinCount5X = 0;
                WinCount4X = 0;
                WinCount3X = 0;
                WinCount2X = 0;
                WinCount1X = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZH(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"-(\d){4}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (regexArray[0].IsMatch(strArray2[j]) && (strArray2[j] == WinNumber))
                            {
                                WinCount5X++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                            else if (regexArray[1].IsMatch(strArray2[j]) && (strArray2[j].Substring(1, 4) == WinNumber.Substring(1, 4)))
                            {
                                WinCount4X++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                            }
                            else if (regexArray[2].IsMatch(strArray2[j]) && (strArray2[j].Substring(2, 3) == WinNumber.Substring(2, 3)))
                            {
                                WinCount3X++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                            else if (regexArray[3].IsMatch(strArray2[j]) && (strArray2[j].Substring(3, 2) == WinNumber.Substring(3, 2)))
                            {
                                WinCount2X++;
                                num += WinMoney4;
                                WinMoneyNoWithTax += WinMoneyNoWithTax4;
                            }
                            else if (regexArray[4].IsMatch(strArray2[j]) && (strArray2[j].Substring(4, 1) == WinNumber.Substring(4, 1)))
                            {
                                WinCount1X++;
                                num += WinMoney5;
                                WinMoneyNoWithTax += WinMoneyNoWithTax5;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount5X > 0)
                {
                    base.MergeWinDescription(ref Description, "五星奖" + ((int) WinCount5X).ToString() + "注");
                }
                if (WinCount4X > 0)
                {
                    base.MergeWinDescription(ref Description, "四星奖" + ((int) WinCount4X).ToString() + "注");
                }
                if (WinCount3X > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + ((int) WinCount3X).ToString() + "注");
                }
                if (WinCount2X > 0)
                {
                    base.MergeWinDescription(ref Description, "二星奖" + ((int) WinCount2X).ToString() + "注");
                }
                if (WinCount1X > 0)
                {
                    base.MergeWinDescription(ref Description, "一星奖" + ((int) WinCount1X).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private string ConvertFormatToElectronTicket_HPJX(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((((PlayTypeID == 0x17d5) || (PlayTypeID == 0x17d6)) || ((PlayTypeID == 0x17d9) || (PlayTypeID == 0x17da))) || (((PlayTypeID == 0x17e1) || (PlayTypeID == 0x17e3)) || ((PlayTypeID == 0x17e5) || (PlayTypeID == 0x17e6))))
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            if (((j % 5) == 0) && (j > 0))
                            {
                                str = str.Substring(0, str.Length - 1) + "\n" + strArray[i].Substring(j, 1) + ",";
                            }
                            else
                            {
                                str = str + strArray[i].Substring(j, 1) + ",";
                            }
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                if (PlayTypeID == 0x17d7)
                {
                    string[] strArray2 = new string[5];
                    Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                    for (int k = 0; k < 5; k++)
                    {
                        strArray2[k] = match.Groups["L" + k.ToString()].ToString().Trim();
                        if (strArray2[k].Length > 1)
                        {
                            strArray2[k] = strArray2[k].Substring(1, strArray2[k].Length - 2);
                        }
                        str = str + strArray2[k].ToString() + ",";
                    }
                    if (str.EndsWith(","))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                if (PlayTypeID == 0x17d8)
                {
                    Number = Number.Replace("大", "2").Replace("小", "1").Replace("单", "5").Replace("双", "4");
                    string[] strArray3 = Number.Split(new char[] { '\n' });
                    for (int m = 0; m < strArray3.Length; m++)
                    {
                        for (int n = 0; n < strArray3[m].Length; n++)
                        {
                            if (((n % 2) == 0) && (n > 0))
                            {
                                str = str.Substring(0, str.Length - 1) + "\n" + strArray3[m].Substring(n, 1) + ",";
                            }
                            else
                            {
                                str = str + strArray3[m].Substring(n, 1) + ",";
                            }
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                if (PlayTypeID == 0x17db)
                {
                    string[] strArray4 = Number.Split(new char[] { '\n' });
                    for (int num6 = 0; num6 < strArray4.Length; num6++)
                    {
                        str = str + "_,_,_,";
                        for (int num7 = 0; num7 < strArray4[num6].Length; num7++)
                        {
                            str = str + strArray4[num6].Substring(num7, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (((PlayTypeID == 0x17dc) || (PlayTypeID == 0x17e2)) || (PlayTypeID == 0x17e4))
                {
                    string[] strArray5 = Number.Split(new char[] { '\n' });
                    for (int num8 = 0; num8 < strArray5.Length; num8++)
                    {
                        for (int num9 = 0; num9 < strArray5[num8].Length; num9++)
                        {
                            str = str + strArray5[num8].Substring(num9, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (PlayTypeID == 0x17dd)
                {
                    string[] strArray6 = Number.Split(new char[] { '\n' });
                    for (int num10 = 0; num10 < strArray6.Length; num10++)
                    {
                        str = str + "_,_,_,";
                        string[] strArray7 = new string[2];
                        Match match2 = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray6[num10]);
                        for (int num11 = 0; num11 < 2; num11++)
                        {
                            strArray7[num11] = match2.Groups["L" + num11.ToString()].ToString().Trim();
                            if (strArray7[num11].Length > 1)
                            {
                                strArray7[num11] = strArray7[num11].Substring(1, strArray7[num11].Length - 2);
                            }
                            str = str + strArray7[num11].ToString() + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (((PlayTypeID == 0x17de) || (PlayTypeID == 0x17df)) || (PlayTypeID == 0x17e0))
                {
                    str = Number + ",";
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str.Replace("-", "_");
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789-".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { 
                    new Lottery.PlayType(0x17d5, "单式"), new Lottery.PlayType(0x17d6, "复式"), new Lottery.PlayType(0x17d7, "组合玩法"), new Lottery.PlayType(0x17d8, "猜大小"), new Lottery.PlayType(0x17d9, "五星通选单式"), new Lottery.PlayType(0x17da, "五星通选复式"), new Lottery.PlayType(0x17db, "二星组选单式"), new Lottery.PlayType(0x17dc, "二星组选复式"), new Lottery.PlayType(0x17dd, "二星组选分位"), new Lottery.PlayType(0x17de, "二星组选包点"), new Lottery.PlayType(0x17df, "二星组选包胆"), new Lottery.PlayType(0x17e0, "二星直选包点"), new Lottery.PlayType(0x17e1, "三星组选三单式"), new Lottery.PlayType(0x17e2, "三星组选三复式"), new Lottery.PlayType(0x17e3, "三星组选六单式"), new Lottery.PlayType(0x17e4, "三星组选六复式"), 
                    new Lottery.PlayType(0x17e5, "任选一"), new Lottery.PlayType(0x17e6, "任选二")
                 };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string str;
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    if (((str = LotteryMachine) != null) && (str == "LT-E"))
                    {
                        if (PlayTypeID == 0x17d5)
                        {
                            return this.GetPrintKeyList_LT_E_D(numbers);
                        }
                        if (PlayTypeID == 0x17d6)
                        {
                            return this.GetPrintKeyList_LT_E_F(numbers);
                        }
                        if (PlayTypeID == 0x17d7)
                        {
                            return this.GetPrintKeyList_LT_E_Zu(numbers);
                        }
                        if (PlayTypeID == 0x17d8)
                        {
                            return this.GetPrintKeyList_LT_E_DX(numbers);
                        }
                    }
                }
                return "";
            }

            private string GetPrintKeyList_LT_E_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").Replace("-", "").Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7");
                    if (str3.Length == 1)
                    {
                        str = str + "[Q]";
                    }
                    if (str3.Length == 2)
                    {
                        str = str + "[R]";
                    }
                    if (str3.Length == 3)
                    {
                        str = str + "[3]";
                    }
                    if (str3.Length == 5)
                    {
                        str = str + "[1]";
                    }
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E_DX(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2)
                    {
                        if (ch.ToString() == "小")
                        {
                            str = str + "[Q]";
                        }
                        if (ch.ToString() == "大")
                        {
                            str = str + "[R]";
                        }
                        if (ch.ToString() == "单")
                        {
                            str = str + "[S]";
                        }
                        if (ch.ToString() == "双")
                        {
                            str = str + "[双]";
                        }
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7").Replace("双", "1");
            }

            private string GetPrintKeyList_LT_E_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").Replace("-", "").Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7");
                    if (str3.Length == 2)
                    {
                        str = str + "[Q]";
                    }
                    if (str3.Length == 3)
                    {
                        str = str + "[R]";
                    }
                    if (str3.Length == 5)
                    {
                        str = str + "[1]";
                    }
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E_Zu(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    int num = 0;
                    for (int i = 0; i < str2.Length; i++)
                    {
                        if (str2.Substring(i, 1) == "-")
                        {
                            num++;
                        }
                    }
                    switch (num)
                    {
                        case 0:
                            str = str + "[X]";
                            break;

                        case 2:
                            str = str + "[T]";
                            break;

                        case 3:
                            str = str + "[S]";
                            break;
                    }
                    str = str + num.ToString();
                    foreach (char ch in str2)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7").Replace("X", "4");
            }

            private string HPJX_ConvertFormatToElectronTicket(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (((PlayTypeID == 0x17d5) || (PlayTypeID == 0x17d6)) || (((PlayTypeID == 0x17d9) || (PlayTypeID == 0x17da)) || (PlayTypeID == 0x17d7)))
                {
                    str = str + Number.Replace(",", "");
                }
                if (PlayTypeID == 0x17d8)
                {
                    Number = Number.Replace("2", "大").Replace("1", "小").Replace("5", "单").Replace("4", "双");
                    str = str + Number.Replace(",", "");
                }
                if (PlayTypeID == 0x17db)
                {
                    str = str + Number.Replace(",", "");
                }
                if (PlayTypeID == 0x17dc)
                {
                    str = str + Number.Replace(",", "");
                }
                return str.Replace("-", "_");
            }

            public override string HPJX_ToElectronicTicket(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                if (PlayTypeID == 0x17d5)
                {
                    return this.HPJX_ToElectronicTicket_D(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (PlayTypeID == 0x17d6)
                {
                    return this.HPJX_ToElectronicTicket_F(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (PlayTypeID == 0x17d7)
                {
                    return this.HPJX_ToElectronicTicket_ZH(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (PlayTypeID == 0x17d8)
                {
                    return this.HPJX_ToElectronicTicket_DX(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (PlayTypeID == 0x17d9)
                {
                    return this.HPJX_ToElectronicTicket_5X_TXD(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (PlayTypeID == 0x17da)
                {
                    return this.HPJX_ToElectronicTicket_5X_TXF(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (PlayTypeID == 0x17db)
                {
                    return this.HPJX_ToElectronicTicket_2X_ZuD(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (PlayTypeID == 0x17dc)
                {
                    return this.HPJX_ToElectronicTicket_2X_ZuF(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                return "";
            }

            private string HPJX_ToElectronicTicket_2X_ZuD(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPJX_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            private string HPJX_ToElectronicTicket_2X_ZuF(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPJX_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            private string HPJX_ToElectronicTicket_5X_TXD(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPJX_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            private string HPJX_ToElectronicTicket_5X_TXF(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPJX_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            private string HPJX_ToElectronicTicket_D(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPJX_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            private string HPJX_ToElectronicTicket_DX(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPJX_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            private string HPJX_ToElectronicTicket_F(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPJX_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            private string HPJX_ToElectronicTicket_ZH(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPJX_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPJX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x17d5)
                {
                    return this.ToElectronicTicket_HPJX_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17d6)
                {
                    return this.ToElectronicTicket_HPJX_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17d7)
                {
                    return this.ToElectronicTicket_HPJX_ZH(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17d8)
                {
                    return this.ToElectronicTicket_HPJX_DX(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17d9)
                {
                    return this.ToElectronicTicket_HPJX_5X_TXD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17da)
                {
                    return this.ToElectronicTicket_HPJX_5X_TXF(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17db)
                {
                    return this.ToElectronicTicket_HPJX_2X_ZuD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17dc)
                {
                    return this.ToElectronicTicket_HPJX_2X_ZuF(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17dd)
                {
                    return this.ToElectronicTicket_HPJX_2X_ZuFW(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17de)
                {
                    return this.ToElectronicTicket_HPJX_2X_ZuB(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17df)
                {
                    return this.ToElectronicTicket_HPJX_2X_ZuBD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17e0)
                {
                    return this.ToElectronicTicket_HPJX_2X_ZhiB(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17e1)
                {
                    return this.ToElectronicTicket_HPJX_3X_Zu3D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17e2)
                {
                    return this.ToElectronicTicket_HPJX_3X_Zu3F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17e3)
                {
                    return this.ToElectronicTicket_HPJX_3X_Zu6D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17e4)
                {
                    return this.ToElectronicTicket_HPJX_3X_Zu6F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17e5)
                {
                    return this.ToElectronicTicket_HPJX_RX1(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x17e6)
                {
                    return this.ToElectronicTicket_HPJX_RX2(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_2X_ZhiB(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_2X_ZhiB(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (!string.IsNullOrEmpty(strArray[k].ToString()))
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x131, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_2X_ZuB(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_2X_ZuB(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (!string.IsNullOrEmpty(strArray[k].ToString()))
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(310, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_2X_ZuBD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_2X_ZuBD(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (!string.IsNullOrEmpty(strArray[k].ToString()))
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x137, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_2X_ZuD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_2X_ZuD(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && !string.IsNullOrEmpty(strArray[k + m].ToString()))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x133, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_2X_ZuF(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_2X_ZuF(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (!string.IsNullOrEmpty(strArray[k].ToString()))
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x134, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_2X_ZuFW(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_2X_ZuFW(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (!string.IsNullOrEmpty(strArray[k].ToString()))
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x135, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_3X_Zu3D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_3X_Zu3D(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && !string.IsNullOrEmpty(strArray[k + m].ToString()))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0];
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x139, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_3X_Zu3F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_3X_Zu3F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (!string.IsNullOrEmpty(strArray[k].ToString()))
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(320, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_3X_Zu6D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_3X_Zu6D(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && !string.IsNullOrEmpty(strArray[k + m].ToString()))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0];
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x13a, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_3X_Zu6F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_3X_Zu6F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (!string.IsNullOrEmpty(strArray[k].ToString()))
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x141, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_5X_TXD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_5X_TX(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && !string.IsNullOrEmpty(strArray[k + m].ToString()))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0];
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x138, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_5X_TXF(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                ArrayList list = new ArrayList();
                string[] strArray = this.AnalyseSchemeToElectronicTicket_F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && !string.IsNullOrEmpty(strArray[k + m].ToString()))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0];
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x138, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_D(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && !string.IsNullOrEmpty(strArray[k + m].ToString()))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0];
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x12d, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_DX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_DX(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && !string.IsNullOrEmpty(strArray[k + m].ToString()))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0];
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x132, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (!string.IsNullOrEmpty(strArray[k].ToString()))
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x12e, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_RX1(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_RX1(Number, PlayTypeID).Split(new char[] { '\n' });
                ArrayList list = new ArrayList();
                Money = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if (strArray2 == null)
                    {
                        return null;
                    }
                    if (strArray2.Length == 0)
                    {
                        return null;
                    }
                    int num2 = 0;
                    if ((Multiple % MaxMultiple) != 0)
                    {
                        num2 = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                    }
                    else
                    {
                        num2 = Multiple / MaxMultiple;
                    }
                    int multiple = 1;
                    double num4 = 0.0;
                    for (int k = 1; k < (num2 + 1); k++)
                    {
                        if ((k * MaxMultiple) < Multiple)
                        {
                            multiple = MaxMultiple;
                        }
                        else
                        {
                            multiple = Multiple - ((k - 1) * MaxMultiple);
                        }
                        for (int m = 0; m < strArray2.Length; m += 5)
                        {
                            string number = "";
                            num4 = 0.0;
                            for (int n = 0; n < 5; n++)
                            {
                                if (((m + n) < strArray2.Length) && !string.IsNullOrEmpty(strArray2[m + n].ToString()))
                                {
                                    number = number + strArray2[m + n].ToString();
                                    num4 += 2.0;
                                }
                            }
                            Money += num4 * multiple;
                            list.Add(new Lottery.Ticket(0x13b, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num4 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_RX2(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_RX1(Number, PlayTypeID).Split(new char[] { '\n' });
                ArrayList list = new ArrayList();
                Money = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if (strArray2 == null)
                    {
                        return null;
                    }
                    if (strArray2.Length == 0)
                    {
                        return null;
                    }
                    int num2 = 0;
                    if ((Multiple % MaxMultiple) != 0)
                    {
                        num2 = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                    }
                    else
                    {
                        num2 = Multiple / MaxMultiple;
                    }
                    int multiple = 1;
                    double num4 = 0.0;
                    for (int k = 1; k < (num2 + 1); k++)
                    {
                        if ((k * MaxMultiple) < Multiple)
                        {
                            multiple = MaxMultiple;
                        }
                        else
                        {
                            multiple = Multiple - ((k - 1) * MaxMultiple);
                        }
                        for (int m = 0; m < strArray2.Length; m += 5)
                        {
                            string number = "";
                            num4 = 0.0;
                            for (int n = 0; n < 5; n++)
                            {
                                if (((m + n) < strArray2.Length) && !string.IsNullOrEmpty(strArray2[m + n].ToString()))
                                {
                                    number = number + strArray2[m + n].ToString();
                                    num4 += 2.0;
                                }
                            }
                            Money += num4 * multiple;
                            list.Add(new Lottery.Ticket(0x13c, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num4 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_ZH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_ZH(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (!string.IsNullOrEmpty(strArray[k].ToString()))
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x13f, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x17d5)
                {
                    return this.ToSingle_D(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17d6)
                {
                    return this.ToSingle_F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17d7)
                {
                    return this.ToSingle_ZH(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17d8)
                {
                    return this.ToSingle_DX(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x17d9) || (PlayType == 0x17da))
                {
                    return this.ToSingle_5X_TX(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17db)
                {
                    return this.ToSingle_2X_ZuD(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17dc)
                {
                    return this.ToSingle_2X_ZuF(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17dd)
                {
                    return this.ToSingle_2X_ZuFW(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17de)
                {
                    return this.ToSingle_2X_ZuB(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17df)
                {
                    return this.ToSingle_2X_ZuBD(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17e0)
                {
                    return this.ToSingle_2X_ZhiB(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17e1)
                {
                    return this.ToSingle_3X_Zu3D(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17e2)
                {
                    return this.ToSingle_3X_Zu3F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17e3)
                {
                    return this.ToSingle_3X_Zu6D(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17e4)
                {
                    return this.ToSingle_3X_Zu6F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17e5)
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x17e6)
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_2X_ZhiB(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                ArrayList list = new ArrayList();
                if ((num < 0) || (num > 0x12))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        if ((i + k) == num)
                        {
                            list.Add(i.ToString() + k.ToString());
                        }
                    }
                }
                CanonicalNumber = num.ToString();
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_2X_ZuB(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                ArrayList list = new ArrayList();
                if ((num < 0) || (num > 0x12))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = i; k <= 9; k++)
                    {
                        if ((i + k) == num)
                        {
                            list.Add(i.ToString() + k.ToString());
                        }
                    }
                }
                CanonicalNumber = num.ToString();
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_2X_ZuBD(string sBill, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(sBill.Trim());
                if (CanonicalNumber.Length < 1)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if (CanonicalNumber.Length > 2)
                {
                    CanonicalNumber = CanonicalNumber.Substring(0, 2);
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < length; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        list.Add(chArray[i].ToString() + k.ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_2X_ZuD(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_2X_ZuF(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < length; i++)
                {
                    for (int k = i; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_2X_ZuFW(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[2];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]{2,10}[)]))(?<L1>(\d)|([(][\d]{2,10}[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                if ((this.FilterRepeated(match.Groups["L0"].ToString()).Length < 2) && (this.FilterRepeated(match.Groups["L1"].ToString()).Length < 2))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i].StartsWith("("))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        strArray[i] = this.FilterRepeated(strArray[i]);
                    }
                    if (strArray[i].Length < 1)
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        list.Add(str2);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_3X_Zu3D(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Substring(2).Trim());
                if (CanonicalNumber.Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber.ToCharArray();
                CanonicalNumber = "--" + Number.Substring(2);
                ArrayList list = new ArrayList();
                list.Add("--" + Number.Substring(2));
                string[] strArray = new string[list.Count];
                for (int i = 0; i < list.Count; i++)
                {
                    strArray[i] = list[i].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_3X_Zu3F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Replace("-", "").Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add("--" + chArray[i].ToString() + chArray[i].ToString() + chArray[k].ToString());
                        list.Add("--" + chArray[i].ToString() + chArray[k].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_3X_Zu6D(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Substring(2).Trim());
                if (CanonicalNumber.Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                CanonicalNumber = "--" + Number.Substring(2);
                ArrayList list = new ArrayList();
                list.Add("--" + chArray[0].ToString() + chArray[1].ToString() + chArray[2].ToString());
                string[] strArray = new string[list.Count];
                for (int i = 0; i < list.Count; i++)
                {
                    strArray[i] = list[i].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_3X_Zu6F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Replace("-", "").Trim());
                if (CanonicalNumber.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 2); i++)
                {
                    for (int k = i + 1; k < (length - 1); k++)
                    {
                        for (int m = k + 1; m < length; m++)
                        {
                            list.Add("--" + chArray[i].ToString() + chArray[k].ToString() + chArray[m].ToString());
                        }
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_5X_TX(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[5];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    list.Add(str5);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_D(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|(-))(?<L1>(\d)|(-))(?<L2>(\d)|(-))(?<L3>(\d)|(-))(?<L4>(\d))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str;
                }
                Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"-(\d){4}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                bool flag = false;
                for (int j = 0; j < 5; j++)
                {
                    if (regexArray[j].IsMatch(CanonicalNumber))
                    {
                        flag = true;
                        break;
                    }
                }
                if (!flag)
                {
                    return null;
                }
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_DX(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>([大小单双]))(?<L1>([大小单双]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 2; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str;
                }
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_F(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.ToSingle_D(Number, ref CanonicalNumber);
                if ((strArray == null) || (strArray.Length != 1))
                {
                    return null;
                }
                Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"-(\d){4}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                string[] strArray2 = null;
                if (regexArray[0].IsMatch(CanonicalNumber))
                {
                    return new string[] { CanonicalNumber, ("-" + CanonicalNumber.Substring(1, 4)), ("--" + CanonicalNumber.Substring(2, 3)), ("---" + CanonicalNumber.Substring(3, 2)), ("----" + CanonicalNumber.Substring(4, 1)) };
                }
                if (regexArray[1].IsMatch(CanonicalNumber))
                {
                    return new string[] { CanonicalNumber, ("--" + CanonicalNumber.Substring(2, 3)), ("---" + CanonicalNumber.Substring(3, 2)), ("----" + CanonicalNumber.Substring(4, 1)) };
                }
                if (regexArray[2].IsMatch(CanonicalNumber))
                {
                    return new string[] { CanonicalNumber, ("---" + CanonicalNumber.Substring(3, 2)), ("----" + CanonicalNumber.Substring(4, 1)) };
                }
                if (regexArray[3].IsMatch(CanonicalNumber))
                {
                    return new string[] { CanonicalNumber, ("----" + CanonicalNumber.Substring(4, 1)) };
                }
                if (regexArray[4].IsMatch(CanonicalNumber))
                {
                    strArray2 = new string[] { CanonicalNumber };
                }
                return strArray2;
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[5];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(-)|(\d)|([(][\d]+?[)]))(?<L1>(-)|(\d)|([(][\d]+?[)]))(?<L2>(-)|(\d)|([(][\d]+?[)]))(?<L3>(-)|(\d)|([(][\d]+?[)]))(?<L4>(-)|(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                    if (strArray[i] != "-")
                    {
                        strArray[i] = strArray[i] + "-";
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    char ch2 = strArray[0][j];
                    if (ch2.ToString() != "-")
                    {
                        list.Add(str + "----");
                    }
                    else
                    {
                        for (int m = 0; m < strArray[1].Length; m++)
                        {
                            string str2 = str + strArray[1][m].ToString();
                            char ch4 = strArray[1][m];
                            if (ch4.ToString() != "-")
                            {
                                list.Add(str2 + "---");
                            }
                            else
                            {
                                for (int n = 0; n < strArray[2].Length; n++)
                                {
                                    string str3 = str2 + strArray[2][n].ToString();
                                    char ch6 = strArray[2][n];
                                    if (ch6.ToString() != "-")
                                    {
                                        list.Add(str3 + "--");
                                    }
                                    else
                                    {
                                        for (int num5 = 0; num5 < strArray[3].Length; num5++)
                                        {
                                            string str4 = str3 + strArray[3][num5].ToString();
                                            char ch8 = strArray[3][num5];
                                            if (ch8.ToString() != "-")
                                            {
                                                list.Add(str4 + "-");
                                            }
                                            else
                                            {
                                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                                {
                                                    string number = str4 + strArray[4][num6].ToString();
                                                    string canonicalNumber = "";
                                                    char ch10 = strArray[4][num6];
                                                    if (!(ch10.ToString() == "-"))
                                                    {
                                                        string[] strArray2 = this.ToSingle_D(number, ref canonicalNumber);
                                                        if ((strArray2 != null) && (strArray2.Length >= 1))
                                                        {
                                                            list.Add(number);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray3 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray3[k] = list[k].ToString();
                }
                return strArray3;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[5];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|(-)|([(][\d]+?[)]))(?<L1>(\d)|(-)|([(][\d]+?[)]))(?<L2>(\d)|(-)|([(][\d]+?[)]))(?<L3>(\d)|(-)|([(][\d]+?[)]))(?<L4>(\d)|(-)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                    if (strArray[i] != "-")
                    {
                        strArray[i] = strArray[i] + "-";
                    }
                }
                int num2 = 0;
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    char ch2 = strArray[0][j];
                    if (ch2.ToString() != "-")
                    {
                        num2++;
                    }
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        if (num2 == 1)
                        {
                            char ch4 = strArray[1][m];
                            if (ch4.ToString() != "-")
                            {
                                list.Add(str2 + "---");
                                num2 = 1;
                                continue;
                            }
                        }
                        char ch5 = strArray[1][m];
                        if (ch5.ToString() != "-")
                        {
                            num2++;
                        }
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            if (num2 == 1)
                            {
                                char ch7 = strArray[2][n];
                                if (ch7.ToString() != "-")
                                {
                                    list.Add(str3 + "--");
                                    num2 = 1;
                                    continue;
                                }
                            }
                            char ch8 = strArray[2][n];
                            if (ch8.ToString() != "-")
                            {
                                num2++;
                            }
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + strArray[3][num6].ToString();
                                if (num2 == 1)
                                {
                                    char ch10 = strArray[3][num6];
                                    if (ch10.ToString() != "-")
                                    {
                                        list.Add(str4 + "-");
                                        num2 = 1;
                                        continue;
                                    }
                                }
                                char ch11 = strArray[3][num6];
                                if (ch11.ToString() != "-")
                                {
                                    num2++;
                                }
                                for (int num7 = 0; num7 < strArray[4].Length; num7++)
                                {
                                    string str5 = str4 + strArray[4][num7].ToString();
                                    if (num2 == 1)
                                    {
                                        char ch13 = strArray[4][num7];
                                        if (ch13.ToString() != "-")
                                        {
                                            list.Add(str5);
                                            num2 = 1;
                                            continue;
                                        }
                                    }
                                    num2 = 0;
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZH(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[5];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string number = str4 + strArray[4][num6].ToString();
                                    string canonicalNumber = "";
                                    string[] strArray2 = this.ToSingle_D(number, ref canonicalNumber);
                                    if ((strArray2 != null) && (strArray2.Length >= 1))
                                    {
                                        list.Add(number);
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray3 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray3[k] = list[k].ToString();
                }
                return strArray3;
            }
        }

        public class LCBQC : Lottery.LotteryBase
        {
            public const string Code = "LCBQC";
            public const int ID = 15;
            public const double MaxMoney = 20000.0;
            public const string Name = "六场半全场";
            public const int PlayType_D = 0x5dd;
            public const int PlayType_F = 0x5de;
            public const string sID = "15";

            public LCBQC()
            {
                base.id = 15;
                base.name = "六场半全场";
                base.code = "LCBQC";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x5dd)
                {
                    str2 = "([013]){12}";
                }
                else
                {
                    str2 = "(([013])|([(][013]{1,3}[)])){12}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x5dd) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Number = Number.Replace("*", "0");
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x5dd);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 12; j++)
                    {
                        str = str + "310"[random.Next(0, 3)].ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x5dd) && (play_type <= 0x5de));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 12)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 2))
                {
                    return -3.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 12)
                            {
                                int num5 = 0;
                                for (int k = 0; k < 12; k++)
                                {
                                    if ((WinNumber[k] == '*') || (strArray2[j][k] == WinNumber[k]))
                                    {
                                        num5++;
                                    }
                                }
                                if (num5 == 12)
                                {
                                    num++;
                                    num2 += WinMoneyList[0];
                                    WinMoneyNoWithTax += WinMoneyList[1];
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private string ConvertFormatToElectronTicket_DYJ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (PlayTypeID == 0x5dd)
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + ";\n";
                    }
                }
                if (PlayTypeID == 0x5de)
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int k = 0; k < strArray2.Length; k++)
                    {
                        string[] strArray3 = new string[12];
                        Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))(?<L8>(\d)|([(][\d]+?[)]))(?<L9>(\d)|([(][\d]+?[)]))(?<L10>(\d)|([(][\d]+?[)]))(?<L11>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[k]);
                        for (int m = 0; m < 12; m++)
                        {
                            strArray3[m] = match.Groups["L" + m.ToString()].ToString().Trim();
                            if (strArray3[m] == "")
                            {
                                return "";
                            }
                            if (strArray3[m].Length > 1)
                            {
                                strArray3[m] = strArray3[m].Substring(1, strArray3[m].Length - 2);
                                if (strArray3[m].Length > 1)
                                {
                                    strArray3[m] = this.FilterRepeated(strArray3[m]);
                                }
                                if (strArray3[m] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray3[m] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + ";\n";
                    }
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string ConvertFormatToElectronTicket_HPSD(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (PlayTypeID == 0x5dd)
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (PlayTypeID == 0x5de)
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int k = 0; k < strArray2.Length; k++)
                    {
                        string[] strArray3 = new string[12];
                        Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))(?<L8>(\d)|([(][\d]+?[)]))(?<L9>(\d)|([(][\d]+?[)]))(?<L10>(\d)|([(][\d]+?[)]))(?<L11>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[k]);
                        for (int m = 0; m < 12; m++)
                        {
                            strArray3[m] = match.Groups["L" + m.ToString()].ToString().Trim();
                            if (strArray3[m] == "")
                            {
                                return "";
                            }
                            if (strArray3[m].Length > 1)
                            {
                                strArray3[m] = strArray3[m].Substring(1, strArray3[m].Length - 2);
                                if (strArray3[m].Length > 1)
                                {
                                    strArray3[m] = this.FilterRepeated(strArray3[m]);
                                }
                                if (strArray3[m] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray3[m] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("013".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x5dd, "单式"), new Lottery.PlayType(0x5de, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    switch (LotteryMachine)
                    {
                        case "CR_YTCII2":
                            if (PlayTypeID != 0x5dd)
                            {
                                if (PlayTypeID != 0x5de)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CR_YTCII2_F(numbers);
                            }
                            return this.GetPrintKeyList_CR_YTCII2_D(numbers);

                        case "TCBJYTD":
                            if (PlayTypeID != 0x5dd)
                            {
                                if (PlayTypeID != 0x5de)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TCBJYTD_F(numbers);
                            }
                            return this.GetPrintKeyList_TCBJYTD_D(numbers);

                        case "TGAMPOS4000":
                            if (PlayTypeID != 0x5dd)
                            {
                                if (PlayTypeID != 0x5de)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TGAMPOS4000_F(numbers);
                            }
                            return this.GetPrintKeyList_TGAMPOS4000_D(numbers);

                        case "CP86":
                            if (PlayTypeID != 0x5dd)
                            {
                                if (PlayTypeID != 0x5de)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CP86_F(numbers);
                            }
                            return this.GetPrintKeyList_CP86_D(numbers);

                        case "RS6500":
                            if (PlayTypeID != 0x5dd)
                            {
                                if (PlayTypeID != 0x5de)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_RS6500_F(numbers);
                            }
                            return this.GetPrintKeyList_RS6500_D(numbers);

                        case "ks230":
                            if (PlayTypeID != 0x5dd)
                            {
                                if (PlayTypeID != 0x5de)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_ks230_F(numbers);
                            }
                            return this.GetPrintKeyList_ks230_D(numbers);

                        case "LA-600A":
                            if (PlayTypeID != 0x5dd)
                            {
                                if (PlayTypeID == 0x5de)
                                {
                                    return this.GetPrintKeyList_LA_600A_F(numbers);
                                }
                                break;
                            }
                            return this.GetPrintKeyList_LA_600A_D(numbers);
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CP86_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))(?<L8>(\d)|([(][\d]+?[)]))(?<L9>(\d)|([(][\d]+?[)]))(?<L10>(\d)|([(][\d]+?[)]))(?<L11>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 12; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 11)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))(?<L8>(\d)|([(][\d]+?[)]))(?<L9>(\d)|([(][\d]+?[)]))(?<L10>(\d)|([(][\d]+?[)]))(?<L11>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 12; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 11)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))(?<L8>(\d)|([(][\d]+?[)]))(?<L9>(\d)|([(][\d]+?[)]))(?<L10>(\d)|([(][\d]+?[)]))(?<L11>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 12; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 11)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))(?<L8>(\d)|([(][\d]+?[)]))(?<L9>(\d)|([(][\d]+?[)]))(?<L10>(\d)|([(][\d]+?[)]))(?<L11>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 12; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 11)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))(?<L8>(\d)|([(][\d]+?[)]))(?<L9>(\d)|([(][\d]+?[)]))(?<L10>(\d)|([(][\d]+?[)]))(?<L11>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 12; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 11)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))(?<L8>(\d)|([(][\d]+?[)]))(?<L9>(\d)|([(][\d]+?[)]))(?<L10>(\d)|([(][\d]+?[)]))(?<L11>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 12; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 11)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))(?<L8>(\d)|([(][\d]+?[)]))(?<L9>(\d)|([(][\d]+?[)]))(?<L10>(\d)|([(][\d]+?[)]))(?<L11>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 12; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 11)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public string[,] SplitLotteryNumberForGrid(string Number)
            {
                string[] strArray = Number.Split(new char[] { '\n' });
                if (strArray.Length == 0)
                {
                    return null;
                }
                ArrayList[] listArray = new ArrayList[strArray.Length];
                for (int i = 0; i < listArray.Length; i++)
                {
                    listArray[i] = new ArrayList();
                    int startIndex = 0;
                    string str = strArray[i];
                    if (str.Length < 12)
                    {
                        str = str.PadRight(12, ' ');
                    }
                    while ((startIndex < str.Length) && (listArray[i].Count < 12))
                    {
                        if (str.Substring(startIndex, 1) != "(")
                        {
                            listArray[i].Add(str.Substring(startIndex, 1));
                            startIndex++;
                        }
                        else
                        {
                            int num3 = startIndex + 1;
                            while (str.Substring(num3, 1) != ")")
                            {
                                num3++;
                            }
                            string str2 = str.Substring(startIndex, num3 - startIndex);
                            listArray[i].Add(str2.Substring(1, str2.Length - 1));
                            startIndex = num3 + 1;
                        }
                    }
                }
                string[,] strArray2 = new string[listArray.Length, 12];
                for (int j = 0; j < listArray.Length; j++)
                {
                    for (int k = 0; (k < listArray[j].Count) && (k < 12); k++)
                    {
                        strArray2[j, k] = listArray[j][k].ToString();
                    }
                }
                return strArray2;
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x5dd)
                {
                    return this.ToElectronicTicket_DYJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x5de)
                {
                    return this.ToElectronicTicket_DYJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x5dd)
                {
                    return this.ToElectronicTicket_HPSD_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x5de)
                {
                    return this.ToElectronicTicket_HPSD_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = new string[12];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))(?<L7>(\d)|([(][\d]+?[)]))(?<L8>(\d)|([(][\d]+?[)]))(?<L9>(\d)|([(][\d]+?[)]))(?<L10>(\d)|([(][\d]+?[)]))(?<L11>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 12; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    for (int num7 = 0; num7 < strArray[5].Length; num7++)
                                    {
                                        string str6 = str5 + strArray[5][num7].ToString();
                                        for (int num8 = 0; num8 < strArray[6].Length; num8++)
                                        {
                                            string str7 = str6 + strArray[6][num8].ToString();
                                            for (int num9 = 0; num9 < strArray[7].Length; num9++)
                                            {
                                                string str8 = str7 + strArray[7][num9].ToString();
                                                for (int num10 = 0; num10 < strArray[8].Length; num10++)
                                                {
                                                    string str9 = str8 + strArray[8][num10].ToString();
                                                    for (int num11 = 0; num11 < strArray[9].Length; num11++)
                                                    {
                                                        string str10 = str9 + strArray[9][num11].ToString();
                                                        for (int num12 = 0; num12 < strArray[10].Length; num12++)
                                                        {
                                                            string str11 = str10 + strArray[10][num12].ToString();
                                                            for (int num13 = 0; num13 < strArray[11].Length; num13++)
                                                            {
                                                                string str12 = str11 + strArray[11][num13].ToString();
                                                                list.Add(str12);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class LCDC : Lottery.LotteryBase
        {
            public const string Code = "LCDC";
            public const int ID = 0x13;
            public const double MaxMoney = 20000.0;
            public const string Name = "篮彩";
            public const int PlayType_D = 0x76d;
            public const int PlayType_F = 0x76e;
            public const string sID = "19";

            public LCDC()
            {
                base.id = 0x13;
                base.name = "篮彩";
                base.code = "LCDC";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x76d)
                {
                    str2 = @"([\d]){4}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){4}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x76d) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x76d);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 4; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x76d) && (play_type <= 0x76e));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 2))
                {
                    return -3.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 4) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoneyList[0];
                                WinMoneyNoWithTax += WinMoneyList[1];
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x76d, "单式"), new Lottery.PlayType(0x76e, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    string str = LotteryMachine;
                    if (str != null)
                    {
                        if (!(str == "CR_YTCII2"))
                        {
                            if (str == "TGAMPOS4000")
                            {
                                if (PlayTypeID == 0x76d)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_D(numbers);
                                }
                                if (PlayTypeID == 0x76e)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_F(numbers);
                                }
                            }
                            else if (str == "CP86")
                            {
                                if (PlayTypeID == 0x76d)
                                {
                                    return this.GetPrintKeyList_CP86_D(numbers);
                                }
                                if (PlayTypeID == 0x76e)
                                {
                                    return this.GetPrintKeyList_CP86_F(numbers);
                                }
                            }
                            else if (str == "MODEL_4000")
                            {
                                if (PlayTypeID == 0x76d)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_D(numbers);
                                }
                                if (PlayTypeID == 0x76e)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_F(numbers);
                                }
                            }
                        }
                        else
                        {
                            if (PlayTypeID == 0x76d)
                            {
                                return this.GetPrintKeyList_CR_YTCII2_D(numbers);
                            }
                            if (PlayTypeID == 0x76e)
                            {
                                return this.GetPrintKeyList_CR_YTCII2_F(numbers);
                            }
                        }
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CP86_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 4; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 3)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 4; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 3)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 4; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 3)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 4; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 3)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public string[,] SplitLotteryNumberForGrid(string Number)
            {
                string[] strArray = Number.Split(new char[] { '\n' });
                if (strArray.Length == 0)
                {
                    return null;
                }
                ArrayList[] listArray = new ArrayList[strArray.Length];
                for (int i = 0; i < listArray.Length; i++)
                {
                    listArray[i] = new ArrayList();
                    int startIndex = 0;
                    string str = strArray[i];
                    if (str.Length < 4)
                    {
                        str = str.PadRight(4, ' ');
                    }
                    while ((startIndex < str.Length) && (listArray[i].Count < 4))
                    {
                        if (str.Substring(startIndex, 1) != "(")
                        {
                            listArray[i].Add(str.Substring(startIndex, 1));
                            startIndex++;
                        }
                        else
                        {
                            int num3 = startIndex + 1;
                            while (str.Substring(num3, 1) != ")")
                            {
                                num3++;
                            }
                            string str2 = str.Substring(startIndex, num3 - startIndex);
                            listArray[i].Add(str2.Substring(1, str2.Length - 1));
                            startIndex = num3 + 1;
                        }
                    }
                }
                string[,] strArray2 = new string[listArray.Length, 4];
                for (int j = 0; j < listArray.Length; j++)
                {
                    for (int k = 0; (k < listArray[j].Count) && (k < 4); k++)
                    {
                        strArray2[j, k] = listArray[j][k].ToString();
                    }
                }
                return strArray2;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class LJ36X7 : Lottery.LotteryBase
        {
            public const string Code = "LJ36X7";
            public const int ID = 7;
            public const double MaxMoney = 22880.0;
            public const string Name = "龙江36选7";
            public const int PlayType_D = 0x2bd;
            public const int PlayType_F = 0x2be;
            public const string sID = "7";

            public LJ36X7()
            {
                base.id = 7;
                base.name = "龙江36选7";
                base.code = "LJ36X7";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x2bd)
                {
                    str2 = @"(\d\d\s){6}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,35}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x2bd) ? 1 : 2))) && (strArray2.Length <= 11440.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){7}[+]\s\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number.Substring(0, 20), ref canonicalNumber, 0x2bd);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 7; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x25);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x2bd) && (play_type <= 0x2be));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x19)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 0x10))
                {
                    return -3.0;
                }
                string str = WinNumber.Substring(0x17, 2);
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                double num9 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 20)
                            {
                                string[] strArray3 = new string[7];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num12 = 0;
                                bool flag = false;
                                bool flag2 = true;
                                for (int k = 0; k < 7; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag2 = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num12++;
                                    }
                                    if (str == strArray3[k])
                                    {
                                        flag = true;
                                    }
                                }
                                if (flag2)
                                {
                                    if (num12 == 7)
                                    {
                                        num++;
                                        num9 += WinMoneyList[0];
                                        WinMoneyNoWithTax += WinMoneyList[1];
                                    }
                                    else if ((num12 == 6) && flag)
                                    {
                                        num2++;
                                        num9 += WinMoneyList[2];
                                        WinMoneyNoWithTax += WinMoneyList[3];
                                    }
                                    else if (num12 == 6)
                                    {
                                        num3++;
                                        num9 += WinMoneyList[4];
                                        WinMoneyNoWithTax += WinMoneyList[5];
                                    }
                                    else if ((num12 == 5) && flag)
                                    {
                                        num4++;
                                        num9 += WinMoneyList[6];
                                        WinMoneyNoWithTax += WinMoneyList[7];
                                    }
                                    else if (num12 == 5)
                                    {
                                        num5++;
                                        num9 += WinMoneyList[8];
                                        WinMoneyNoWithTax += WinMoneyList[9];
                                    }
                                    else if ((num12 == 4) && flag)
                                    {
                                        num6++;
                                        num9 += WinMoneyList[10];
                                        WinMoneyNoWithTax += WinMoneyList[11];
                                    }
                                    else if (num12 == 4)
                                    {
                                        num7++;
                                        num9 += WinMoneyList[12];
                                        WinMoneyNoWithTax += WinMoneyList[13];
                                    }
                                    else if ((num12 == 3) && flag)
                                    {
                                        num8++;
                                        num9 += WinMoneyList[14];
                                        WinMoneyNoWithTax += WinMoneyList[15];
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "七等奖" + num7.ToString() + "注";
                }
                if (num8 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "八等奖" + num8.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num9;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x24)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x2bd, "单式"), new Lottery.PlayType(0x2be, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class LJFC22X5 : Lottery.LotteryBase
        {
            public const string Code = "LJFC22X5";
            public const int ID = 0x2a;
            public const double MaxMoney = 20000.0;
            public const string Name = "龙江风彩22选5";
            public const int PlayType_D = 0x1069;
            public const int PlayType_F = 0x106a;
            public const string sID = "42";

            public LJFC22X5()
            {
                base.id = 0x2a;
                base.name = "龙江风彩22选5";
                base.code = "LJFC22X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1069)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,21}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1069) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x1069);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x17);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1069) && (play_type <= 0x106a));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num8 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num8++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num8)
                                    {
                                        case 5:
                                            num++;
                                            num4 += WinMoneyList[0];
                                            WinMoneyNoWithTax += WinMoneyList[1];
                                            break;

                                        case 4:
                                            num2++;
                                            num4 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                            break;

                                        case 3:
                                            num3++;
                                            num4 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x16)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1069, "单式"), new Lottery.PlayType(0x106a, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class LJP62 : Lottery.LotteryBase
        {
            public const string Code = "LJP62";
            public const int ID = 8;
            public const double MaxMoney = 20000.0;
            public const string Name = "龙江P62";
            public const int PlayType_D = 0x321;
            public const int PlayType_F = 0x322;
            public const string sID = "8";

            public LJP62()
            {
                base.id = 8;
                base.name = "龙江P62";
                base.code = "LJP62";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x321)
                {
                    str2 = @"(\d){6}[+][01]";
                }
                else
                {
                    str2 = @"((\d)|([(]\d{1,10}[)])){6}[+](([01])|([(]([01]){1,2}[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x321) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex("([0123456789]){6}[+][01]", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x321);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 6; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append((str + "+" + random.Next(0, 2).ToString()).Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x321) && (play_type <= 0x322));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 8)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 12))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                double num7 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 8)
                            {
                                if (strArray2[j] == WinNumber)
                                {
                                    num++;
                                    num7 += WinMoneyList[0];
                                    WinMoneyNoWithTax += WinMoneyList[1];
                                }
                                else if (strArray2[j].Substring(0, 6) == WinNumber.Substring(0, 6))
                                {
                                    num2++;
                                    num7 += WinMoneyList[2];
                                    WinMoneyNoWithTax += WinMoneyList[3];
                                }
                                else
                                {
                                    bool flag = false;
                                    int startIndex = 0;
                                    while (startIndex <= 1)
                                    {
                                        if (strArray2[j].Substring(startIndex, 5) == WinNumber.Substring(startIndex, 5))
                                        {
                                            num3++;
                                            num7 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            flag = true;
                                            break;
                                        }
                                        startIndex++;
                                    }
                                    if (!flag)
                                    {
                                        startIndex = 0;
                                        while (startIndex <= 2)
                                        {
                                            if (strArray2[j].Substring(startIndex, 4) == WinNumber.Substring(startIndex, 4))
                                            {
                                                num4++;
                                                num7 += WinMoneyList[6];
                                                WinMoneyNoWithTax += WinMoneyList[7];
                                                flag = true;
                                                break;
                                            }
                                            startIndex++;
                                        }
                                        if (!flag)
                                        {
                                            startIndex = 0;
                                            while (startIndex <= 3)
                                            {
                                                if (strArray2[j].Substring(startIndex, 3) == WinNumber.Substring(startIndex, 3))
                                                {
                                                    num5++;
                                                    num7 += WinMoneyList[8];
                                                    WinMoneyNoWithTax += WinMoneyList[9];
                                                    flag = true;
                                                    break;
                                                }
                                                startIndex++;
                                            }
                                            if (!flag)
                                            {
                                                int num11 = 0;
                                                for (startIndex = 0; startIndex < 6; startIndex++)
                                                {
                                                    if (strArray2[j][startIndex] == WinNumber[startIndex])
                                                    {
                                                        num11++;
                                                    }
                                                }
                                                if (num11 >= 2)
                                                {
                                                    num6++;
                                                    num7 += WinMoneyList[10];
                                                    WinMoneyNoWithTax += WinMoneyList[11];
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num7;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x321, "单式"), new Lottery.PlayType(0x322, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = Number.Split(new char[] { '+' });
                CanonicalNumber = "";
                if (strArray.Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                string[] strArray2 = new string[6];
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray[0].Trim());
                for (int i = 0; i < 6; i++)
                {
                    strArray2[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray2[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray2[i].Length > 1)
                    {
                        strArray2[i] = strArray2[i].Substring(1, strArray2[i].Length - 2);
                        if (strArray2[i].Length > 1)
                        {
                            strArray2[i] = this.FilterRepeated(strArray2[i]);
                        }
                        if (strArray2[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray2[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray2[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray2[i];
                    }
                }
                CanonicalNumber = CanonicalNumber + "+";
                string numberPart = strArray[1].Trim();
                if (numberPart.Length > 1)
                {
                    numberPart = numberPart.Substring(1, numberPart.Length - 2);
                    if (numberPart.Length > 1)
                    {
                        numberPart = this.FilterRepeated(numberPart);
                    }
                    if (numberPart == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (numberPart.Length > 2)
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                }
                for (int j = 0; j < numberPart.Length; j++)
                {
                    if ((numberPart[j] != '0') && (numberPart[j] != '1'))
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                }
                if (numberPart.Length > 1)
                {
                    CanonicalNumber = CanonicalNumber + "(" + numberPart + ")";
                }
                else
                {
                    CanonicalNumber = CanonicalNumber + numberPart;
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray2[0].Length; k++)
                {
                    string str2 = strArray2[0][k].ToString();
                    for (int n = 0; n < strArray2[1].Length; n++)
                    {
                        string str3 = str2 + strArray2[1][n].ToString();
                        for (int num5 = 0; num5 < strArray2[2].Length; num5++)
                        {
                            string str4 = str3 + strArray2[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray2[3].Length; num6++)
                            {
                                string str5 = str4 + strArray2[3][num6].ToString();
                                for (int num7 = 0; num7 < strArray2[4].Length; num7++)
                                {
                                    string str6 = str5 + strArray2[4][num7].ToString();
                                    for (int num8 = 0; num8 < strArray2[5].Length; num8++)
                                    {
                                        string str7 = str6 + strArray2[5][num8].ToString();
                                        for (int num9 = 0; num9 < numberPart.Length; num9++)
                                        {
                                            list.Add(str7 + "+" + numberPart[num9].ToString());
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray3 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray3[m] = list[m].ToString();
                }
                return strArray3;
            }
        }

        public class LJTC6J1 : Lottery.LotteryBase
        {
            public const string Code = "LJTC6J1";
            public const int ID = 0x2b;
            public const double MaxMoney = 20000.0;
            public const string Name = "龙江体彩6+1";
            public const int PlayType_D = 0x10cd;
            public const int PlayType_F = 0x10ce;
            public const string sID = "43";

            public LJTC6J1()
            {
                base.id = 0x2b;
                base.name = "龙江体彩6加1";
                base.code = "LJTC6J1";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x10cd)
                {
                    str2 = @"(\d){6}[+][\d]";
                }
                else
                {
                    str2 = @"((\d)|([(]\d{1,10}[)])){6}[+]((\d)|([(]\d{1,10}[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x10cd) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"([\d]){6}[+][\d]", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x10cd);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 6; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append((str + "-" + random.Next(0, 10).ToString()).Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x10cd) && (play_type <= 0x10ce));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 8)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 12))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                double num7 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 8)
                            {
                                if (strArray2[j] == WinNumber)
                                {
                                    num++;
                                    num7 += WinMoneyList[0];
                                    WinMoneyNoWithTax += WinMoneyList[1];
                                }
                                else if (strArray2[j].Substring(0, 6) == WinNumber.Substring(0, 6))
                                {
                                    num2++;
                                    num7 += WinMoneyList[2];
                                    WinMoneyNoWithTax += WinMoneyList[3];
                                }
                                else
                                {
                                    bool flag = false;
                                    int startIndex = 0;
                                    while (startIndex <= 1)
                                    {
                                        if (strArray2[j].Substring(startIndex, 5) == WinNumber.Substring(startIndex, 5))
                                        {
                                            num3++;
                                            num7 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            flag = true;
                                            break;
                                        }
                                        startIndex++;
                                    }
                                    if (!flag)
                                    {
                                        startIndex = 0;
                                        while (startIndex <= 2)
                                        {
                                            if (strArray2[j].Substring(startIndex, 4) == WinNumber.Substring(startIndex, 4))
                                            {
                                                num4++;
                                                num7 += WinMoneyList[6];
                                                WinMoneyNoWithTax += WinMoneyList[7];
                                                flag = true;
                                                break;
                                            }
                                            startIndex++;
                                        }
                                        if (!flag)
                                        {
                                            startIndex = 0;
                                            while (startIndex <= 3)
                                            {
                                                if (strArray2[j].Substring(startIndex, 3) == WinNumber.Substring(startIndex, 3))
                                                {
                                                    num5++;
                                                    num7 += WinMoneyList[8];
                                                    WinMoneyNoWithTax += WinMoneyList[9];
                                                    flag = true;
                                                    break;
                                                }
                                                startIndex++;
                                            }
                                            if (!flag)
                                            {
                                                for (startIndex = 0; startIndex <= 4; startIndex++)
                                                {
                                                    if (strArray2[j].Substring(startIndex, 2) == WinNumber.Substring(startIndex, 2))
                                                    {
                                                        num6++;
                                                        num7 += WinMoneyList[10];
                                                        WinMoneyNoWithTax += WinMoneyList[11];
                                                        flag = true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "特等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "一等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num6.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num7;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x10cd, "单式"), new Lottery.PlayType(0x10ce, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = new string[7];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))[+](?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 7; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (i == 6)
                    {
                        CanonicalNumber = CanonicalNumber + "+";
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    for (int num7 = 0; num7 < strArray[5].Length; num7++)
                                    {
                                        string str6 = str5 + strArray[5][num7].ToString();
                                        for (int num8 = 0; num8 < strArray[6].Length; num8++)
                                        {
                                            string str7 = str6 + "+" + strArray[6][num8].ToString();
                                            list.Add(str7);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class LLKLPK : Lottery.LotteryBase
        {
            public const string Code = "LLKLPK";
            public const int ID = 0x35;
            public const double MaxMoney = 200000.0;
            public const string Name = "辽宁快乐扑克";
            public const int PlayType_Mixed = 0x14b4;
            public const int PlayType_RX1_D = 0x14b5;
            public const int PlayType_RX1_F = 0x14b6;
            public const int PlayType_RX2_D = 0x14b7;
            public const int PlayType_RX2_F = 0x14b8;
            public const int PlayType_RX3_D = 0x14b9;
            public const int PlayType_RX3_F = 0x14ba;
            public const int PlayType_X4_ZhiD = 0x14bf;
            public const int PlayType_X4_ZhiF = 0x14c0;
            public const int PlayType_X4_Zu12 = 0x14bc;
            public const int PlayType_X4_Zu24 = 0x14bb;
            public const int PlayType_X4_Zu4 = 0x14be;
            public const int PlayType_X4_Zu6 = 0x14bd;
            public const string sID = "53";

            public LLKLPK()
            {
                base.id = 0x35;
                base.name = "辽宁快乐扑克";
                base.code = "LLKLPK";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x14b4)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if ((PlayType == 0x14b5) || (PlayType == 0x14b6))
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if ((PlayType == 0x14b7) || (PlayType == 0x14b8))
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if ((PlayType == 0x14b9) || (PlayType == 0x14ba))
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if (PlayType == 0x14bb)
                {
                    return this.AnalyseScheme_X4_Zu24(Content, PlayType);
                }
                if (PlayType == 0x14bc)
                {
                    return this.AnalyseScheme_X4_Zu12(Content, PlayType);
                }
                if (PlayType == 0x14bd)
                {
                    return this.AnalyseScheme_X4_Zu6(Content, PlayType);
                }
                if (PlayType == 0x14be)
                {
                    return this.AnalyseScheme_X4_Zu4(Content, PlayType);
                }
                if ((PlayType != 0x14bf) && (PlayType != 0x14c0))
                {
                    return "";
                }
                return this.AnalyseScheme_X4_Zhi(Content, PlayType);
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[任选一单式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x14b5);
                    }
                    if (strArray[i].StartsWith("[任选一复式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x14b6);
                    }
                    if (strArray[i].StartsWith("[任选二单式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x14b7);
                    }
                    if (strArray[i].StartsWith("[任选二复式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x14b8);
                    }
                    if (strArray[i].StartsWith("[任选三单式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x14b9);
                    }
                    if (strArray[i].StartsWith("[任选三复式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x14ba);
                    }
                    if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu24(base.FilterPreFix(strArray[i]), 0x14bb);
                    }
                    if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu12(base.FilterPreFix(strArray[i]), 0x14bc);
                    }
                    if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu6(base.FilterPreFix(strArray[i]), 0x14bd);
                    }
                    if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu4(base.FilterPreFix(strArray[i]), 0x14be);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x14b5)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x14b6))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x14b5))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x14b7)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x14b8))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x14b7))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x14b9)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x14ba))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x14b9))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x14bf)
                {
                    str2 = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i].ToString());
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x14bf) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu12(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu12(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu24(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3,12}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu24(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu4(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu6(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu6(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex("((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                return "";
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x14b4) && (play_type <= 0x14c0));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 20))
                {
                    return -3.0;
                }
                if (!this.AnalyseWinNumber(WinNumber))
                {
                    return -5.0;
                }
                int winCount = 0;
                int num2 = 0;
                int num3 = 0;
                if (PlayType == 0x14b4)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13]);
                }
                if ((PlayType == 0x14b5) || (PlayType == 0x14b6))
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref winCount);
                }
                if ((PlayType == 0x14b7) || (PlayType == 0x14b8))
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref winCount);
                }
                if ((PlayType == 0x14b9) || (PlayType == 0x14ba))
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num2, ref num3);
                }
                if ((PlayType == 0x14bf) || (PlayType == 0x14c0))
                {
                    return this.ComputeWin_X4_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], ref num2, ref num3);
                }
                if (PlayType == 0x14bb)
                {
                    return this.ComputeWin_X4_Zu24(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref winCount);
                }
                if (PlayType == 0x14bc)
                {
                    return this.ComputeWin_X4_Zu12(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], ref winCount);
                }
                if (PlayType == 0x14bd)
                {
                    return this.ComputeWin_X4_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], ref winCount);
                }
                if (PlayType == 0x14be)
                {
                    return this.ComputeWin_X4_Zu4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x12], WinMoneyList[0x13], ref winCount);
                }
                return -4.0;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8, double WinMoney9, double WinMoneyNoWithTax9, double WinMoney10, double WinMoneyNoWithTax10)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int winCount = 0;
                    int num14 = 0;
                    int num15 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[任选一单式]") || strArray[i].StartsWith("[任选一复式]"))
                    {
                        num += this.ComputeWin_RX1(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选二单式]") || strArray[i].StartsWith("[任选二复式]"))
                    {
                        num += this.ComputeWin_RX2(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选三单式]") || strArray[i].StartsWith("[任选三复式]"))
                    {
                        num += this.ComputeWin_RX3(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num4 += num14;
                        num5 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四直选单式]") || strArray[i].StartsWith("[选四直选复式]"))
                    {
                        num += this.ComputeWin_X4_Zhi(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, WinMoney6, WinMoneyNoWithTax6, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += num14;
                        num7 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        num += this.ComputeWin_X4_Zu24(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney7, WinMoneyNoWithTax7, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num8 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        num += this.ComputeWin_X4_Zu12(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney8, WinMoneyNoWithTax8, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num9 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        num += this.ComputeWin_X4_Zu6(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney9, WinMoneyNoWithTax9, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num10 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        num += this.ComputeWin_X4_Zu4(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney10, WinMoneyNoWithTax10, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num11 += winCount;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选一" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选二" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中4 " + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中3 " + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选24 " + num8.ToString() + "注");
                }
                if (num9 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选12 " + num9.ToString() + "注");
                }
                if (num10 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选6 " + num10.ToString() + "注");
                }
                if (num11 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选4 " + num11.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        WinCount++;
                                        num += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选一" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                int num = 0;
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                if (num == 2)
                                {
                                    WinCount++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选二" + ((int) WinCount).ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 3:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 2:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 4:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 3:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中4 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中3 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zu12(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu12(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选12 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu24(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu24(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选24 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选4 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu6(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选6 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private string FilterRepeated(string NumberPart)
            {
                string number = "";
                string[] strArray = NumberPart.Split(new char[] { ',' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (("23456789AJQK10".IndexOf(strArray[i]) >= 0) && (number.IndexOf(strArray[i]) == -1))
                    {
                        number = number + strArray[i] + ",";
                    }
                }
                number = number.Substring(0, number.Length - 1);
                return this.SortKLPK(number);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x14b4, "混合投注"), new Lottery.PlayType(0x14b5, "任选一单式"), new Lottery.PlayType(0x14b6, "任选一复式"), new Lottery.PlayType(0x14b7, "任选二单式"), new Lottery.PlayType(0x14b8, "任选二复式"), new Lottery.PlayType(0x14b9, "任选三单式"), new Lottery.PlayType(0x14ba, "任选三复式"), new Lottery.PlayType(0x14bb, "选四组选24"), new Lottery.PlayType(0x14bc, "选四组选12"), new Lottery.PlayType(0x14bd, "选四组选6"), new Lottery.PlayType(0x14be, "选四组选4"), new Lottery.PlayType(0x14bf, "选四直选单式"), new Lottery.PlayType(0x14c0, "选四组选复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            private string SortKLPK(string Number)
            {
                string[] strArray = new string[13];
                string str = "";
                string[] strArray2 = Number.Split(new char[] { ',' });
                for (int i = 0; i < strArray2.Length; i++)
                {
                    if ("23456789AJQK10".IndexOf(strArray2[i]) >= 0)
                    {
                        if (strArray2[i] == "A")
                        {
                            strArray[0] = "A";
                        }
                        else if (strArray2[i] == "2")
                        {
                            strArray[1] = "2";
                        }
                        else if (strArray2[i] == "3")
                        {
                            strArray[2] = "3";
                        }
                        else if (strArray2[i] == "4")
                        {
                            strArray[3] = "4";
                        }
                        else if (strArray2[i] == "5")
                        {
                            strArray[4] = "5";
                        }
                        else if (strArray2[i] == "6")
                        {
                            strArray[5] = "6";
                        }
                        else if (strArray2[i] == "7")
                        {
                            strArray[6] = "7";
                        }
                        else if (strArray2[i] == "8")
                        {
                            strArray[7] = "8";
                        }
                        else if (strArray2[i] == "9")
                        {
                            strArray[8] = "9";
                        }
                        else if (strArray2[i] == "10")
                        {
                            strArray[9] = "10";
                        }
                        else if (strArray2[i] == "J")
                        {
                            strArray[10] = "J";
                        }
                        else if (strArray2[i] == "Q")
                        {
                            strArray[11] = "Q";
                        }
                        else if (strArray2[i] == "K")
                        {
                            strArray[12] = "K";
                        }
                    }
                }
                for (int j = 0; j < 13; j++)
                {
                    if (strArray[j] != null)
                    {
                        str = str + strArray[j] + ",";
                    }
                }
                return str.Substring(0, str.Length - 1);
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x14b4)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x14b5) || (PlayType == 0x14b6))
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x14b7) || (PlayType == 0x14b8))
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x14b9) || (PlayType == 0x14ba))
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x14bb)
                {
                    return this.ToSingle_X4_Zu24(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x14bc)
                {
                    return this.ToSingle_X4_Zu12(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x14bd)
                {
                    return this.ToSingle_X4_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x14be)
                {
                    return this.ToSingle_X4_Zu4(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x14bf) && (PlayType != 0x14c0))
                {
                    return null;
                }
                return this.ToSingle_X4_Zhi(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[任选1单式]") || Number.StartsWith("[任选1复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX1(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选2单式]") || Number.StartsWith("[任选2复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX2(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选3单式]") || Number.StartsWith("[任选3复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX3(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选24]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu24(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选12]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu12(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选6]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu6(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选4]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu4(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (!Number.StartsWith("[选4直选单式]") && !Number.StartsWith("[选4直选复式]"))
                {
                    return null;
                }
                return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zhi(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                int num = 0;
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                    if (strArray[i] != "_")
                    {
                        Regex regex2 = new Regex("((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        if (regex2.IsMatch(strArray[i]))
                        {
                            num++;
                        }
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    if (str != "_")
                    {
                        str = str + ",_,_,_";
                        list.Add(str);
                    }
                }
                for (int m = 0; m < strArray[1].Length; m++)
                {
                    string str2 = strArray[1][m].ToString();
                    if (str2 != "_")
                    {
                        str2 = "_," + str2 + ",_,_";
                        list.Add(str2);
                    }
                }
                for (int n = 0; n < strArray[2].Length; n++)
                {
                    string str3 = strArray[2][n].ToString();
                    if (str3 != "_")
                    {
                        str3 = "_,_," + str3 + ",_";
                        list.Add(str3);
                    }
                }
                for (int num7 = 0; num7 < strArray[3].Length; num7++)
                {
                    string str4 = strArray[3][num7].ToString();
                    if (str4 != "_")
                    {
                        str4 = "_,_,_," + str4;
                        list.Add(str4);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num8 = 0; num8 < list.Count; num8++)
                {
                    strArray2[num8] = list[num8].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        string[] strArray3;
                        IntPtr ptr;
                        (strArray3 = strArray)[(int) (ptr = (IntPtr) j)] = strArray3[(int) ptr] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 5)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        strArray[j] = strArray[j] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 6)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu12(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu24(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                string[] strArray = CanonicalNumber.Split(new char[] { ',' });
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int i = 0; i < (length - 3); i++)
                {
                    for (int k = i + 1; k < (length - 2); k++)
                    {
                        for (int m = k + 1; m < (length - 1); m++)
                        {
                            for (int n = m + 1; n < length; n++)
                            {
                                list.Add(strArray[i].ToString() + "," + strArray[k].ToString() + "," + strArray[m].ToString() + "," + strArray[n].ToString());
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu4(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2])) && ((Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3]))) && (((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3]))))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[3]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]))) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3])))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }
        }

        public class LNFC25X4 : Lottery.LotteryBase
        {
            public const string Code = "LNFC25X4";
            public const int ID = 0x2f;
            public const double MaxMoney = 25300.0;
            public const string Name = "辽宁风采25选4";
            public const int PlayType_D = 0x125d;
            public const int PlayType_F = 0x125e;
            public const string sID = "47";

            public LNFC25X4()
            {
                base.id = 0x2f;
                base.name = "辽宁风采25选4";
                base.code = "LNFC25X4";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x125d)
                {
                    str2 = @"(\d\d\s){3}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){3,24}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x125d) ? 1 : 2))) && (strArray2.Length <= 12650.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x125d);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 4; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x1a);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int PlayType_type)
            {
                return ((PlayType_type >= 0x125d) && (PlayType_type <= 0x125e));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x10)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (strArray[i].Length >= 14)
                    {
                        string[] strArray2 = strArray[i].Split(new char[] { ' ' });
                        int num6 = 0;
                        foreach (string str in strArray2)
                        {
                            if (WinNumber.IndexOf(str) >= 0)
                            {
                                num6++;
                            }
                        }
                        if (num6 == 5)
                        {
                            num++;
                            num4 += WinMoneyList[0];
                            WinMoneyNoWithTax += WinMoneyList[1];
                            continue;
                        }
                    }
                    string canonicalNumber = "";
                    string[] strArray3 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray3 != null) && (strArray3.Length >= 1))
                    {
                        for (int j = 0; j < strArray3.Length; j++)
                        {
                            if (strArray3[j].Length >= 11)
                            {
                                string[] strArray4 = new string[4];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray3[j]);
                                int num9 = 0;
                                bool flag = true;
                                for (int k = 0; k < 4; k++)
                                {
                                    strArray4[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray4[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray4[k] + " ") >= 0)
                                    {
                                        num9++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num9)
                                    {
                                        case 4:
                                            num2++;
                                            num4 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                            break;

                                        case 3:
                                            num3++;
                                            num4 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x19)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x125d, "单式"), new Lottery.PlayType(0x125e, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 3); j++)
                {
                    for (int m = j + 1; m < (length - 2); m++)
                    {
                        for (int n = m + 1; n < (length - 1); n++)
                        {
                            for (int num6 = n + 1; num6 < length; num6++)
                            {
                                list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6]);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class LNFC35X7 : Lottery.LotteryBase
        {
            public const string Code = "LNFC35X7";
            public const int ID = 0x26;
            public const double MaxMoney = 22880.0;
            public const string Name = "辽宁风采35选7";
            public const int PlayType_D = 0xed9;
            public const int PlayType_F = 0xeda;
            public const string sID = "38";

            public LNFC35X7()
            {
                base.id = 0x26;
                base.name = "辽宁风采35选7";
                base.code = "LNFC35X7";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xed9)
                {
                    str2 = @"(\d\d\s){6}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,34}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xed9) ? 1 : 2))) && (strArray2.Length <= 11440.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){7}[+]\s\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number.Substring(0, 20), ref canonicalNumber, 0xed9);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 7; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x24);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xed9) && (play_type <= 0xeda));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x19)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 0x10))
                {
                    return -3.0;
                }
                string str = WinNumber.Substring(0x17, 2);
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                double num9 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 20)
                            {
                                string[] strArray3 = new string[7];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num12 = 0;
                                bool flag = false;
                                bool flag2 = true;
                                for (int k = 0; k < 7; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag2 = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num12++;
                                    }
                                    if (str == strArray3[k])
                                    {
                                        flag = true;
                                    }
                                }
                                if (flag2)
                                {
                                    if (num12 == 7)
                                    {
                                        num++;
                                        num9 += WinMoneyList[0];
                                        WinMoneyNoWithTax += WinMoneyList[1];
                                    }
                                    else if ((num12 == 6) && flag)
                                    {
                                        num2++;
                                        num9 += WinMoneyList[2];
                                        WinMoneyNoWithTax += WinMoneyList[3];
                                    }
                                    else if (num12 == 6)
                                    {
                                        num3++;
                                        num9 += WinMoneyList[4];
                                        WinMoneyNoWithTax += WinMoneyList[5];
                                    }
                                    else if ((num12 == 5) && flag)
                                    {
                                        num4++;
                                        num9 += WinMoneyList[6];
                                        WinMoneyNoWithTax += WinMoneyList[7];
                                    }
                                    else if (num12 == 5)
                                    {
                                        num5++;
                                        num9 += WinMoneyList[8];
                                        WinMoneyNoWithTax += WinMoneyList[9];
                                    }
                                    else if ((num12 == 4) && flag)
                                    {
                                        num6++;
                                        num9 += WinMoneyList[10];
                                        WinMoneyNoWithTax += WinMoneyList[11];
                                    }
                                    else if (num12 == 4)
                                    {
                                        num7++;
                                        num9 += WinMoneyList[12];
                                        WinMoneyNoWithTax += WinMoneyList[13];
                                    }
                                    else if ((num12 == 3) && flag)
                                    {
                                        num8++;
                                        num9 += WinMoneyList[14];
                                        WinMoneyNoWithTax += WinMoneyList[15];
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "七等奖" + num7.ToString() + "注";
                }
                if (num8 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "八等奖" + num8.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num9;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x23)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xed9, "单式"), new Lottery.PlayType(0xeda, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class LotteryBase
        {
            public string code;
            public int id;
            public string name;

            public virtual string AnalyseScheme(string Content, int PlayType)
            {
                return "";
            }

            public virtual bool AnalyseWinNumber(string Number)
            {
                return true;
            }

            public virtual bool AnalyseWinNumber(string Number, int CompetitionCount)
            {
                return true;
            }

            public virtual string BuildNumber(int Num)
            {
                return "";
            }

            public virtual string BuildNumber(int Num, int Type)
            {
                return "";
            }

            public virtual string BuildNumber(int Red, int Blue, int Num)
            {
                return "";
            }

            public virtual bool CheckPlayType(int play_type)
            {
                return false;
            }

            public virtual double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                return 0.0;
            }

            public virtual double ComputeWin(string Scheme, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, int CompetitionCount, string NoSignificance)
            {
                return 0.0;
            }

            protected string FilterPreFix(string Number)
            {
                if (!Number.StartsWith("[") && (Number.IndexOf("]") < 0))
                {
                    return Number;
                }
                return Number.Split(new char[] { ']' })[1];
            }

            protected string GetLotteryNumberPreFix(string Number)
            {
                if (((Number == null) || (Number == "")) || !Number.StartsWith("["))
                {
                    return "";
                }
                return (Number.Split(new char[] { ']' })[0] + "]");
            }

            public virtual Lottery.PlayType[] GetPlayTypeList()
            {
                return null;
            }

            public virtual string GetPrintKeyList(string Number, int PlayType_id, string LotteryMachine)
            {
                return "";
            }

            public virtual bool GetSchemeSplit(string Scheme, ref string BuyContent, ref string CnLocateWaysAndMultiples)
            {
                return true;
            }

            public virtual string HPJX_ToElectronicTicket(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                return "";
            }

            public virtual string HPSH_ToElectronicTicket(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                return "";
            }

            protected bool isExistBall(ArrayList al, int Ball)
            {
                if (al.Count != 0)
                {
                    for (int i = 0; i < al.Count; i++)
                    {
                        if (int.Parse(al[i].ToString()) == Ball)
                        {
                            return true;
                        }
                    }
                }
                return false;
            }

            protected string[] MergeLotteryNumberPreFix(string[] Numbers, string PreFix)
            {
                if ((Numbers != null) && (Numbers.Length != 0))
                {
                    for (int i = 0; i < Numbers.Length; i++)
                    {
                        Numbers[i] = PreFix + Numbers[i];
                    }
                }
                return Numbers;
            }

            protected void MergeWinDescription(ref string WinDescription, string AddDescription)
            {
                if (WinDescription != "")
                {
                    WinDescription = WinDescription + "，";
                }
                WinDescription = WinDescription + AddDescription;
            }

            public virtual string ShowNumber(string Number)
            {
                return "";
            }

            public string ShowNumber(string Number, string SpaceMark)
            {
                if (SpaceMark == "")
                {
                    return Number;
                }
                Number = Number.Replace(" ", "");
                string str = "";
                for (int i = 0; i < Number.Length; i++)
                {
                    str = str + Number[i].ToString() + SpaceMark;
                }
                return str.Trim();
            }

            protected string Sort(string str)
            {
                char[] array = str.ToCharArray();
                Array.Sort(array, new CompareToAscii());
                return new string(array);
            }

            protected string[] SplitLotteryNumber(string Number)
            {
                string[] strArray = Number.Split(new char[] { '\n' });
                if (strArray.Length == 0)
                {
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    strArray[i] = strArray[i].Trim();
                }
                return strArray;
            }

            public virtual string ToElectronicTicket_BJDC(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID, ref string Rule, ref int Multiple, ref double Money, ref string GameNoList, ref string PassMode, ref int TicketCount)
            {
                return "";
            }

            public virtual Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                return null;
            }

            public virtual Lottery.Ticket[] ToElectronicTicket_HPCQ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                return null;
            }

            public virtual Lottery.Ticket[] ToElectronicTicket_HPJX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                return null;
            }

            public virtual Lottery.Ticket[] ToElectronicTicket_HPSD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                return null;
            }

            public virtual Lottery.Ticket[] ToElectronicTicket_HPSH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                return null;
            }

            public virtual Lottery.Ticket[] ToElectronicTicket_XGCQ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                return null;
            }

            public virtual Lottery.Ticket[] ToElectronicTicket_XGSH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                return null;
            }

            public virtual string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                return null;
            }

            protected class CompareToAscii : IComparer
            {
                int IComparer.Compare(object x, object y)
                {
                    return new CaseInsensitiveComparer().Compare(x, y);
                }
            }
        }

        public class NYFC26X5 : Lottery.LotteryBase
        {
            public const string Code = "NYFC26X5";
            public const int ID = 0x11;
            public const double MaxMoney = 65780.0;
            public const string Name = "南粤风采26选5";
            public const int PlayType_D = 0x6a5;
            public const int PlayType_F = 0x6a6;
            public const int PlayType_HC2_D = 0x6a7;
            public const int PlayType_HC2_F = 0x6a8;
            public const int PlayType_HC3_D = 0x6a9;
            public const int PlayType_HC3_F = 0x6aa;
            public const string sID = "17";

            public NYFC26X5()
            {
                base.id = 0x11;
                base.name = "南粤风采26选5";
                base.code = "NYFC26X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0x6a5) || (PlayType == 0x6a6))
                {
                    return this.AnalyseScheme_Zhi(Content, PlayType);
                }
                if ((PlayType == 0x6a7) || (PlayType == 0x6a8))
                {
                    return this.AnalyseScheme_HC2(Content, PlayType);
                }
                if ((PlayType != 0x6a9) && (PlayType != 0x6aa))
                {
                    return "";
                }
                return this.AnalyseScheme_HC3(Content, PlayType);
            }

            private string AnalyseScheme_HC2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x6a7)
                {
                    str2 = @"(\d\d\s\d\d)";
                }
                else
                {
                    str2 = @"(\d\d\s){1,25}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HC2(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x6a7) ? 1 : 2))) && (strArray2.Length <= 32890.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_HC3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x6a9)
                {
                    str2 = @"(\d\d\s){2}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){2,25}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HC3(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x6a9) ? 1 : 2))) && (strArray2.Length <= 32890.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x6a5)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,25}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zhi(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x6a5) ? 1 : 2))) && (strArray2.Length <= 32890.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_Zhi(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x1b);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x6a5) && (play_type <= 0x6aa));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 8))
                {
                    return -3.0;
                }
                if ((PlayType == 0x6a5) || (PlayType == 0x6a6))
                {
                    return this.ComputeWin_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3]);
                }
                if ((PlayType == 0x6a7) || (PlayType == 0x6a8))
                {
                    return this.ComputeWin_HC2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5]);
                }
                if ((PlayType != 0x6a9) && (PlayType != 0x6aa))
                {
                    return -4.0;
                }
                return this.ComputeWin_HC3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[6], WinMoneyList[7]);
            }

            private double ComputeWin_HC2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HC2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 5)
                            {
                                string[] strArray3 = new string[2];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num5 = 0;
                                bool flag = true;
                                for (int k = 0; k < 2; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num5++;
                                    }
                                }
                                if (flag && (num5 == 2))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好彩二奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_HC3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HC3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 8)
                            {
                                string[] strArray3 = new string[3];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num5 = 0;
                                bool flag = true;
                                for (int k = 0; k < 3; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num5++;
                                    }
                                }
                                if (flag && (num5 == 3))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好彩三奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                double num3 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num7 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num7++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num7)
                                    {
                                        case 5:
                                            num++;
                                            num3 += WinMoney1;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                            break;

                                        case 4:
                                            num2++;
                                            num3 += WinMoney2;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num3;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x1a)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x6a5, "单式"), new Lottery.PlayType(0x6a6, "复式"), new Lottery.PlayType(0x6a7, "好彩二单式"), new Lottery.PlayType(0x6a8, "好彩二复式"), new Lottery.PlayType(0x6a9, "好彩三单式"), new Lottery.PlayType(0x6aa, "好彩三复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0x6a5) || (PlayType == 0x6a6))
                {
                    return this.ToSingle_Zhi(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x6a7) || (PlayType == 0x6a8))
                {
                    return this.ToSingle_HC2(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x6a9) && (PlayType != 0x6aa))
                {
                    return null;
                }
                return this.ToSingle_HC3(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_HC2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 1); j++)
                {
                    for (int m = j + 1; m < length; m++)
                    {
                        list.Add(strArray[j] + " " + strArray[m]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_HC3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 2); j++)
                {
                    for (int m = j + 1; m < (length - 1); m++)
                    {
                        for (int n = m + 1; n < length; n++)
                        {
                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n]);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class NYFC36X7 : Lottery.LotteryBase
        {
            public const string Code = "NYFC36X7";
            public const int ID = 0x10;
            public const double MaxMoney = 245157.0;
            public const string Name = "南粤风采36选7";
            public const int PlayType_D = 0x641;
            public const int PlayType_F = 0x642;
            public const int PlayType_HC1_D = 0x643;
            public const int PlayType_HC1_F = 0x644;
            public const int PlayType_HC2_D = 0x645;
            public const int PlayType_HC2_F = 0x650;
            public const int PlayType_HC3_D = 0x647;
            public const int PlayType_HC3_F = 0x648;
            public const string sID = "16";

            public NYFC36X7()
            {
                base.id = 0x10;
                base.name = "南粤风采36选7";
                base.code = "NYFC36X7";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0x641) || (PlayType == 0x642))
                {
                    return this.AnalyseScheme_Zhi(Content, PlayType);
                }
                if ((PlayType == 0x643) || (PlayType == 0x644))
                {
                    return this.AnalyseScheme_HC1(Content, PlayType);
                }
                if ((PlayType == 0x645) || (PlayType == 0x650))
                {
                    return this.AnalyseScheme_HC2(Content, PlayType);
                }
                if ((PlayType != 0x647) && (PlayType != 0x648))
                {
                    return "";
                }
                return this.AnalyseScheme_HC3(Content, PlayType);
            }

            private string AnalyseScheme_HC1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x643)
                {
                    str2 = @"(\d\d)";
                }
                else
                {
                    str2 = @"((\d\d\s){1,35}\d\d)|(\d\d)";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HC1(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x643) ? 1 : 2))) && (strArray2.Length <= 122578.5))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_HC2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x645)
                {
                    str2 = @"(\d\d\s\d\d)";
                }
                else
                {
                    str2 = @"(\d\d\s){1,35}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HC2(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x645) ? 1 : 2))) && (strArray2.Length <= 122578.5))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_HC3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x647)
                {
                    str2 = @"(\d\d\s){2}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){2,35}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HC3(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x647) ? 1 : 2))) && (strArray2.Length <= 122578.5))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x641)
                {
                    str2 = @"(\d\d\s){6}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,35}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zhi(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x641) ? 1 : 2))) && (strArray2.Length <= 122578.5))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){6}[+]\s\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_Zhi(Number.Replace("+ ", ""), ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 7; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x25);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x641) && (play_type <= 0x648));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 0x12))
                {
                    return -3.0;
                }
                if ((PlayType == 0x641) || (PlayType == 0x642))
                {
                    return this.ComputeWin_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11]);
                }
                if ((PlayType == 0x643) || (PlayType == 0x644))
                {
                    return this.ComputeWin_HC1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13]);
                }
                if ((PlayType == 0x645) || (PlayType == 0x650))
                {
                    return this.ComputeWin_HC2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15]);
                }
                if ((PlayType != 0x647) && (PlayType != 0x648))
                {
                    return -4.0;
                }
                return this.ComputeWin_HC3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11]);
            }

            private double ComputeWin_HC1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x16)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = WinNumber.Substring(20, 2);
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HC1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (strArray2[j] == str))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好彩一奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_HC2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x16)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = WinNumber.Substring(0, 0x12);
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HC2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 5)
                            {
                                string[] strArray3 = new string[2];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num5 = 0;
                                bool flag = true;
                                for (int k = 0; k < 2; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (str.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num5++;
                                    }
                                }
                                if (flag && (num5 == 2))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好彩二奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_HC3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x16)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = WinNumber.Substring(0, 0x12);
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HC3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 8)
                            {
                                string[] strArray3 = new string[3];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num5 = 0;
                                bool flag = true;
                                for (int k = 0; k < 3; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (str.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num5++;
                                    }
                                }
                                if (flag && (num5 == 3))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好彩三奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x16)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = WinNumber.Substring(20, 2);
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                double num7 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 20)
                            {
                                string[] strArray3 = new string[7];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num10 = 0;
                                bool flag = false;
                                bool flag2 = true;
                                for (int k = 0; k < 7; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag2 = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num10++;
                                    }
                                    if (str == strArray3[k])
                                    {
                                        flag = true;
                                    }
                                }
                                if (flag2)
                                {
                                    if ((num10 == 6) && flag)
                                    {
                                        num++;
                                        num7 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                    else if (num10 == 6)
                                    {
                                        num2++;
                                        num7 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                    }
                                    else if ((num10 == 5) && flag)
                                    {
                                        num3++;
                                        num7 += WinMoney3;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                    }
                                    else if (num10 == 5)
                                    {
                                        num4++;
                                        num7 += WinMoney4;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                                    }
                                    else if ((num10 == 4) && flag)
                                    {
                                        num5++;
                                        num7 += WinMoney5;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax5;
                                    }
                                    else if ((num10 == 4) || ((num10 == 3) && flag))
                                    {
                                        num6++;
                                        num7 += WinMoney6;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax6;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num7;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x24)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x641, "单式"), new Lottery.PlayType(0x642, "复式"), new Lottery.PlayType(0x643, "好彩一单式"), new Lottery.PlayType(0x644, "好彩一复式"), new Lottery.PlayType(0x645, "好彩二单式"), new Lottery.PlayType(0x650, "好彩二复式"), new Lottery.PlayType(0x647, "好彩三单式"), new Lottery.PlayType(0x648, "好彩三复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0x641) || (PlayType == 0x642))
                {
                    return this.ToSingle_Zhi(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x643) || (PlayType == 0x644))
                {
                    return this.ToSingle_HC1(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x645) || (PlayType == 0x650))
                {
                    return this.ToSingle_HC2(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x647) && (PlayType != 0x648))
                {
                    return null;
                }
                return this.ToSingle_HC3(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_HC1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 1)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                return strArray;
            }

            private string[] ToSingle_HC2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 1); j++)
                {
                    for (int m = j + 1; m < length; m++)
                    {
                        list.Add(strArray[j] + " " + strArray[m]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_HC3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 2); j++)
                {
                    for (int m = j + 1; m < (length - 1); m++)
                    {
                        for (int n = m + 1; n < length; n++)
                        {
                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n]);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class PlayType
        {
            public int ID;
            public string Name;

            public PlayType(int id, string name)
            {
                this.ID = id;
                this.Name = name;
            }
        }

        public class QLC : Lottery.LotteryBase
        {
            public const string Code = "QLC";
            public const int ID = 13;
            public const double MaxMoney = 20000.0;
            public const string Name = "七乐彩";
            public const int PlayType_D = 0x515;
            public const int PlayType_F = 0x516;
            public const string sID = "13";

            public QLC()
            {
                base.id = 13;
                base.name = "七乐彩";
                base.code = "QLC";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x515)
                {
                    str2 = @"(\d\d\s){6}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,29}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x515) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){7}[+]\s\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number.Substring(0, 20), ref canonicalNumber, 0x515);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 7; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x1f);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x515) && (play_type <= 0x516));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x19)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 14))
                {
                    return -3.0;
                }
                string str = WinNumber.Substring(0x17, 2);
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                double num8 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 20)
                            {
                                string[] strArray3 = new string[7];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num11 = 0;
                                bool flag = false;
                                bool flag2 = true;
                                for (int k = 0; k < 7; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag2 = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num11++;
                                    }
                                    if (str == strArray3[k])
                                    {
                                        flag = true;
                                    }
                                }
                                if (flag2)
                                {
                                    if (num11 == 7)
                                    {
                                        num++;
                                        num8 += WinMoneyList[0];
                                        WinMoneyNoWithTax += WinMoneyList[1];
                                    }
                                    else if ((num11 == 6) && flag)
                                    {
                                        num2++;
                                        num8 += WinMoneyList[2];
                                        WinMoneyNoWithTax += WinMoneyList[3];
                                    }
                                    else if (num11 == 6)
                                    {
                                        num3++;
                                        num8 += WinMoneyList[4];
                                        WinMoneyNoWithTax += WinMoneyList[5];
                                    }
                                    else if ((num11 == 5) && flag)
                                    {
                                        num4++;
                                        num8 += WinMoneyList[6];
                                        WinMoneyNoWithTax += WinMoneyList[7];
                                    }
                                    else if (num11 == 5)
                                    {
                                        num5++;
                                        num8 += WinMoneyList[8];
                                        WinMoneyNoWithTax += WinMoneyList[9];
                                    }
                                    else if ((num11 == 4) && flag)
                                    {
                                        num6++;
                                        num8 += WinMoneyList[10];
                                        WinMoneyNoWithTax += WinMoneyList[11];
                                    }
                                    else if (num11 == 4)
                                    {
                                        num7++;
                                        num8 += WinMoneyList[12];
                                        WinMoneyNoWithTax += WinMoneyList[13];
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "七等奖" + num7.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num8;
            }

            private string ConvertFormatToElectronTicket_DYJ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID != 0x515) && (PlayTypeID != 0x516))
                {
                    return str;
                }
                return Number;
            }

            private string ConvertFormatToElectronTicket_HPJX(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID != 0x515) && (PlayTypeID != 0x516))
                {
                    return str;
                }
                return Number.Replace(" ", ",");
            }

            private string ConvertFormatToElectronTicket_HPSH(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID != 0x515) && (PlayTypeID != 0x516))
                {
                    return str;
                }
                return Number.Replace(" ", ",");
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 30)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x515, "单式"), new Lottery.PlayType(0x516, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    switch (LotteryMachine)
                    {
                        case "福彩投注系统2.2":
                            if ((PlayTypeID != 0x515) && (PlayTypeID != 0x516))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_FCTZST2_2(numbers);

                        case "FCR8000":
                            if ((PlayTypeID != 0x515) && (PlayTypeID != 0x516))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_FCR8000(numbers);

                        case "LT-E":
                            if (PlayTypeID != 0x515)
                            {
                                if (PlayTypeID != 0x516)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_LT_E_F(numbers);
                            }
                            return this.GetPrintKeyList_LT_E_D(numbers);

                        case "LT-E02":
                            if (PlayTypeID != 0x515)
                            {
                                if (PlayTypeID != 0x516)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_LT_E02_F(numbers);
                            }
                            return this.GetPrintKeyList_LT_E02_D(numbers);

                        case "SN-3000CQA":
                            if ((PlayTypeID != 0x515) && (PlayTypeID != 0x516))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_SN_3000CQA_D(numbers);

                        case "SN-2000":
                            if ((PlayTypeID != 0x515) && (PlayTypeID != 0x516))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_SN_3000CQA_D(numbers);

                        case "SN_3000CG":
                            if (PlayTypeID != 0x515)
                            {
                                if (PlayTypeID == 0x516)
                                {
                                    return this.GetPrintKeyList_SN_3000CG_F(numbers);
                                }
                                break;
                            }
                            return this.GetPrintKeyList_SN_3000CG_D(numbers);
                    }
                }
                return "";
            }

            private string GetPrintKeyList_FCR8000(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_FCTZST2_2(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7");
            }

            private string GetPrintKeyList_LT_E_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    str = (str + "[" + Convert.ToString((int) (str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").Length / 2)) + "]") + "[ENTER]";
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7");
            }

            private string GetPrintKeyList_LT_E02_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "3").Replace("2", "A").Replace("3", "B").Replace("4", "6").Replace("5", "C").Replace("6", "D").Replace("7", "9").Replace("8", "E").Replace("9", "F");
            }

            private string GetPrintKeyList_LT_E02_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    str = (str + "[" + Convert.ToString((int) (str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").Length / 2)) + "]") + "[ENTER]";
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "3").Replace("2", "A").Replace("3", "B").Replace("4", "6").Replace("5", "C").Replace("6", "D").Replace("7", "9").Replace("8", "E").Replace("9", "F");
            }

            private string GetPrintKeyList_SN_2000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CG_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CG_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return (str + "[ENTER]");
            }

            private string GetPrintKeyList_SN_3000CQA_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string HPSH_ConvertFormatToElectronTicket(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                return Number.Replace(",", " ");
            }

            public override string HPSH_ToElectronicTicket(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPSH_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x515)
                {
                    return this.ToElectronicTicket_DYJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x516)
                {
                    return this.ToElectronicTicket_DYJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + ";\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0] + ";";
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPJX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x515)
                {
                    return this.ToElectronicTicket_HPJX_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x516)
                {
                    return this.ToElectronicTicket_HPJX_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x515)
                {
                    return this.ToElectronicTicket_HPSH_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x516)
                {
                    return this.ToElectronicTicket_HPSH_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class QLFC23X5 : Lottery.LotteryBase
        {
            public const string Code = "QLFC23X5";
            public const int ID = 0x1b;
            public const double MaxMoney = 12376.0;
            public const string Name = "齐鲁风采23选5";
            public const int PlayType_D = 0xa8d;
            public const int PlayType_F = 0xa8e;
            public const int PlayType_HYC2_D = 0xa8f;
            public const int PlayType_HYC2_F = 0xa90;
            public const string sID = "27";

            public QLFC23X5()
            {
                base.id = 0x1b;
                base.name = "齐鲁风采23选5";
                base.code = "QLFC23X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0xa8d) || (PlayType == 0xa8e))
                {
                    return this.AnalyseScheme_Zhi(Content, PlayType);
                }
                if ((PlayType != 0xa8f) && (PlayType != 0xa90))
                {
                    return "";
                }
                return this.AnalyseScheme_HYC2(Content, PlayType);
            }

            private string AnalyseScheme_HYC2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xa8f)
                {
                    str2 = @"(\d\d\s\d\d)";
                }
                else
                {
                    str2 = @"(\d\d\s){1,22}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HYC2(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xa8f) ? 1 : 2))) && (strArray2.Length <= 6188.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xa8d)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,22}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zhi(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xa8d) ? 1 : 2))) && (strArray2.Length <= 6188.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_Zhi(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x18);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xa8d) && (play_type <= 0xa90));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 8))
                {
                    return -3.0;
                }
                if ((PlayType == 0xa8d) || (PlayType == 0xa8e))
                {
                    return this.ComputeWin_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if ((PlayType != 0xa8f) && (PlayType != 0xa90))
                {
                    return -4.0;
                }
                return this.ComputeWin_HYC2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[6], WinMoneyList[7]);
            }

            private double ComputeWin_HYC2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HYC2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 5)
                            {
                                string[] strArray3 = new string[2];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num5 = 0;
                                bool flag = true;
                                for (int k = 0; k < 2; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num5++;
                                    }
                                }
                                if (flag && (num5 == 2))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好运二奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num8 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num8++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num8)
                                    {
                                        case 5:
                                            num++;
                                            num4 += WinMoney1;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                            break;

                                        case 4:
                                            num2++;
                                            num4 += WinMoney2;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                            break;

                                        case 3:
                                            num3++;
                                            num4 += WinMoney3;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x17)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xa8d, "单式"), new Lottery.PlayType(0xa8e, "复式"), new Lottery.PlayType(0xa8f, "好运二单式"), new Lottery.PlayType(0xa90, "好运二复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0xa8d) || (PlayType == 0xa8e))
                {
                    return this.ToSingle_Zhi(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0xa8f) && (PlayType != 0xa90))
                {
                    return null;
                }
                return this.ToSingle_HYC2(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_HYC2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 1); j++)
                {
                    for (int m = j + 1; m < length; m++)
                    {
                        list.Add(strArray[j] + " " + strArray[m]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class QXC : Lottery.LotteryBase
        {
            public const string Code = "QXC";
            public const int ID = 3;
            public const double MaxMoney = 20000.0;
            public const string Name = "七星彩";
            public const int PlayType_D = 0x12d;
            public const int PlayType_F = 0x12e;
            public const string sID = "3";

            public QXC()
            {
                base.id = 3;
                base.name = "七星彩";
                base.code = "QXC";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x12d)
                {
                    str2 = @"([\d]){7}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){7}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x12d) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x12d);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 7; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x12d) && (play_type <= 0x12e));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 7)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 12))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                double num7 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 7)
                            {
                                if (strArray2[j] == WinNumber)
                                {
                                    num++;
                                    num7 += WinMoneyList[0];
                                    WinMoneyNoWithTax += WinMoneyList[1];
                                }
                                else
                                {
                                    bool flag = false;
                                    int startIndex = 0;
                                    while (startIndex <= 1)
                                    {
                                        if (strArray2[j].Substring(startIndex, 6) == WinNumber.Substring(startIndex, 6))
                                        {
                                            num2++;
                                            num7 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                            flag = true;
                                            break;
                                        }
                                        startIndex++;
                                    }
                                    if (!flag)
                                    {
                                        startIndex = 0;
                                        while (startIndex <= 2)
                                        {
                                            if (strArray2[j].Substring(startIndex, 5) == WinNumber.Substring(startIndex, 5))
                                            {
                                                num3++;
                                                num7 += WinMoneyList[4];
                                                WinMoneyNoWithTax += WinMoneyList[5];
                                                flag = true;
                                                break;
                                            }
                                            startIndex++;
                                        }
                                        if (!flag)
                                        {
                                            startIndex = 0;
                                            while (startIndex <= 3)
                                            {
                                                if (strArray2[j].Substring(startIndex, 4) == WinNumber.Substring(startIndex, 4))
                                                {
                                                    num4++;
                                                    num7 += WinMoneyList[6];
                                                    WinMoneyNoWithTax += WinMoneyList[7];
                                                    flag = true;
                                                    break;
                                                }
                                                startIndex++;
                                            }
                                            if (!flag)
                                            {
                                                startIndex = 0;
                                                while (startIndex <= 4)
                                                {
                                                    if (strArray2[j].Substring(startIndex, 3) == WinNumber.Substring(startIndex, 3))
                                                    {
                                                        num5++;
                                                        num7 += WinMoneyList[8];
                                                        WinMoneyNoWithTax += WinMoneyList[9];
                                                        flag = true;
                                                        break;
                                                    }
                                                    startIndex++;
                                                }
                                                if (!flag)
                                                {
                                                    for (startIndex = 0; startIndex <= 5; startIndex++)
                                                    {
                                                        if (strArray2[j].Substring(startIndex, 2) == WinNumber.Substring(startIndex, 2))
                                                        {
                                                            num6++;
                                                            num7 += WinMoneyList[10];
                                                            WinMoneyNoWithTax += WinMoneyList[11];
                                                            flag = true;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num7;
            }

            private string ConvertFormatToElectronTicket_DYJ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (PlayTypeID == 0x12d)
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + ";\n";
                    }
                }
                if (PlayTypeID == 0x12e)
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int k = 0; k < strArray2.Length; k++)
                    {
                        string[] strArray3 = new string[7];
                        Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[k]);
                        for (int m = 0; m < 7; m++)
                        {
                            strArray3[m] = match.Groups["L" + m.ToString()].ToString().Trim();
                            if (strArray3[m] == "")
                            {
                                return "";
                            }
                            if (strArray3[m].Length > 1)
                            {
                                strArray3[m] = strArray3[m].Substring(1, strArray3[m].Length - 2);
                                if (strArray3[m].Length > 1)
                                {
                                    strArray3[m] = this.FilterRepeated(strArray3[m]);
                                }
                                if (strArray3[m] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray3[m] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + ";\n";
                    }
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string ConvertFormatToElectronTicket_HPSD(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (PlayTypeID == 0x12d)
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (PlayTypeID == 0x12e)
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int k = 0; k < strArray2.Length; k++)
                    {
                        string[] strArray3 = new string[7];
                        Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[k]);
                        for (int m = 0; m < 7; m++)
                        {
                            strArray3[m] = match.Groups["L" + m.ToString()].ToString().Trim();
                            if (strArray3[m] == "")
                            {
                                return "";
                            }
                            if (strArray3[m].Length > 1)
                            {
                                strArray3[m] = strArray3[m].Substring(1, strArray3[m].Length - 2);
                                if (strArray3[m].Length > 1)
                                {
                                    strArray3[m] = this.FilterRepeated(strArray3[m]);
                                }
                                if (strArray3[m] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray3[m] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x12d, "单式"), new Lottery.PlayType(0x12e, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    switch (LotteryMachine)
                    {
                        case "CR_YTCII2":
                            if (PlayTypeID != 0x12d)
                            {
                                if (PlayTypeID != 0x12e)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CR_YTCII2_F(numbers);
                            }
                            return this.GetPrintKeyList_CR_YTCII2_D(numbers);

                        case "TCBJYTD":
                            if (PlayTypeID != 0x12d)
                            {
                                if (PlayTypeID != 0x12e)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TCBJYTD_F(numbers);
                            }
                            return this.GetPrintKeyList_TCBJYTD_D(numbers);

                        case "TGAMPOS4000":
                            if (PlayTypeID != 0x12d)
                            {
                                if (PlayTypeID != 0x12e)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TGAMPOS4000_F(numbers);
                            }
                            return this.GetPrintKeyList_TGAMPOS4000_D(numbers);

                        case "CP86":
                            if (PlayTypeID != 0x12d)
                            {
                                if (PlayTypeID != 0x12e)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CP86_F(numbers);
                            }
                            return this.GetPrintKeyList_CP86_D(numbers);

                        case "MODEL_4000":
                            if (PlayTypeID != 0x12d)
                            {
                                if (PlayTypeID != 0x12e)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_MODEL_4000_F(numbers);
                            }
                            return this.GetPrintKeyList_MODEL_4000_D(numbers);

                        case "CORONISTPT":
                            if (PlayTypeID != 0x12d)
                            {
                                if (PlayTypeID != 0x12e)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CORONISTPT_F(numbers);
                            }
                            return this.GetPrintKeyList_CORONISTPT_D(numbers);

                        case "RS6500":
                            if (PlayTypeID != 0x12d)
                            {
                                if (PlayTypeID != 0x12e)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_RS6500_F(numbers);
                            }
                            return this.GetPrintKeyList_RS6500_D(numbers);

                        case "ks230":
                            if (PlayTypeID != 0x12d)
                            {
                                if (PlayTypeID != 0x12e)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_ks230_F(numbers);
                            }
                            return this.GetPrintKeyList_ks230_D(numbers);

                        case "LA-600A":
                            if (PlayTypeID != 0x12d)
                            {
                                if (PlayTypeID == 0x12e)
                                {
                                    return this.GetPrintKeyList_LA_600A_F(numbers);
                                }
                                break;
                            }
                            return this.GetPrintKeyList_LA_600A_D(numbers);
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CORONISTPT_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 7; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 6)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 7; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 6)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 7; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 6)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 7; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 6)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 7; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 6)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 7; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 6)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 7; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 6)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 7; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 6)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 7; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 6)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x12d)
                {
                    return this.ToElectronicTicket_DYJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x12e)
                {
                    return this.ToElectronicTicket_DYJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x12d)
                {
                    return this.ToElectronicTicket_HPSD_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x12e)
                {
                    return this.ToElectronicTicket_HPSD_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = new string[7];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))(?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 7; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    for (int num7 = 0; num7 < strArray[5].Length; num7++)
                                    {
                                        string str6 = str5 + strArray[5][num7].ToString();
                                        for (int num8 = 0; num8 < strArray[6].Length; num8++)
                                        {
                                            string str7 = str6 + strArray[6][num8].ToString();
                                            list.Add(str7);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class SCKLPK : Lottery.LotteryBase
        {
            public const string Code = "SCKLPK";
            public const int ID = 0x38;
            public const double MaxMoney = 200000.0;
            public const string Name = "四川快乐扑克";
            public const int PlayType_Mixed = 0x15e0;
            public const int PlayType_RX1_D = 0x15e1;
            public const int PlayType_RX1_F = 0x15e2;
            public const int PlayType_RX2_D = 0x15e3;
            public const int PlayType_RX2_F = 0x15e4;
            public const int PlayType_RX3_D = 0x15e5;
            public const int PlayType_RX3_F = 0x15e6;
            public const int PlayType_X4_ZhiD = 0x15eb;
            public const int PlayType_X4_ZhiF = 0x15ec;
            public const int PlayType_X4_Zu12 = 0x15e8;
            public const int PlayType_X4_Zu24 = 0x15e7;
            public const int PlayType_X4_Zu4 = 0x15ea;
            public const int PlayType_X4_Zu6 = 0x15e9;
            public const string sID = "56";

            public SCKLPK()
            {
                base.id = 0x38;
                base.name = "四川快乐扑克";
                base.code = "SCKLPK";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x15e0)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if ((PlayType == 0x15e1) || (PlayType == 0x15e2))
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if ((PlayType == 0x15e3) || (PlayType == 0x15e4))
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if ((PlayType == 0x15e5) || (PlayType == 0x15e6))
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if (PlayType == 0x15e7)
                {
                    return this.AnalyseScheme_X4_Zu24(Content, PlayType);
                }
                if (PlayType == 0x15e8)
                {
                    return this.AnalyseScheme_X4_Zu12(Content, PlayType);
                }
                if (PlayType == 0x15e9)
                {
                    return this.AnalyseScheme_X4_Zu6(Content, PlayType);
                }
                if (PlayType == 0x15ea)
                {
                    return this.AnalyseScheme_X4_Zu4(Content, PlayType);
                }
                if ((PlayType != 0x15eb) && (PlayType != 0x15ec))
                {
                    return "";
                }
                return this.AnalyseScheme_X4_Zhi(Content, PlayType);
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[任选一单式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x15e1);
                    }
                    if (strArray[i].StartsWith("[任选一复式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x15e2);
                    }
                    if (strArray[i].StartsWith("[任选二单式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x15e3);
                    }
                    if (strArray[i].StartsWith("[任选二复式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x15e4);
                    }
                    if (strArray[i].StartsWith("[任选三单式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x15e5);
                    }
                    if (strArray[i].StartsWith("[任选三复式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x15e6);
                    }
                    if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu24(base.FilterPreFix(strArray[i]), 0x15e7);
                    }
                    if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu12(base.FilterPreFix(strArray[i]), 0x15e8);
                    }
                    if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu6(base.FilterPreFix(strArray[i]), 0x15e9);
                    }
                    if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu4(base.FilterPreFix(strArray[i]), 0x15ea);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x15e1)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x15e2))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x15e1))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x15e3)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x15e4))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x15e3))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x15e5)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x15e6))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x15e5))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x15eb)
                {
                    str2 = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i].ToString());
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x15eb) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu12(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu12(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu24(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3,12}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu24(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu4(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu6(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu6(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex("((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                return "";
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x15e0) && (play_type <= 0x15ec));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 20))
                {
                    return -3.0;
                }
                if (!this.AnalyseWinNumber(WinNumber))
                {
                    return -5.0;
                }
                int winCount = 0;
                int num2 = 0;
                int num3 = 0;
                if (PlayType == 0x15e0)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13]);
                }
                if ((PlayType == 0x15e1) || (PlayType == 0x15e2))
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref winCount);
                }
                if ((PlayType == 0x15e3) || (PlayType == 0x15e4))
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref winCount);
                }
                if ((PlayType == 0x15e5) || (PlayType == 0x15e6))
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num2, ref num3);
                }
                if ((PlayType == 0x15eb) || (PlayType == 0x15ec))
                {
                    return this.ComputeWin_X4_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], ref num2, ref num3);
                }
                if (PlayType == 0x15e7)
                {
                    return this.ComputeWin_X4_Zu24(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref winCount);
                }
                if (PlayType == 0x15e8)
                {
                    return this.ComputeWin_X4_Zu12(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], ref winCount);
                }
                if (PlayType == 0x15e9)
                {
                    return this.ComputeWin_X4_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], ref winCount);
                }
                if (PlayType == 0x15ea)
                {
                    return this.ComputeWin_X4_Zu4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x12], WinMoneyList[0x13], ref winCount);
                }
                return -4.0;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8, double WinMoney9, double WinMoneyNoWithTax9, double WinMoney10, double WinMoneyNoWithTax10)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int winCount = 0;
                    int num14 = 0;
                    int num15 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[任选一单式]") || strArray[i].StartsWith("[任选一复式]"))
                    {
                        num += this.ComputeWin_RX1(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选二单式]") || strArray[i].StartsWith("[任选二复式]"))
                    {
                        num += this.ComputeWin_RX2(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选三单式]") || strArray[i].StartsWith("[任选三复式]"))
                    {
                        num += this.ComputeWin_RX3(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num4 += num14;
                        num5 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四直选单式]") || strArray[i].StartsWith("[选四直选复式]"))
                    {
                        num += this.ComputeWin_X4_Zhi(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, WinMoney6, WinMoneyNoWithTax6, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += num14;
                        num7 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        num += this.ComputeWin_X4_Zu24(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney7, WinMoneyNoWithTax7, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num8 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        num += this.ComputeWin_X4_Zu12(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney8, WinMoneyNoWithTax8, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num9 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        num += this.ComputeWin_X4_Zu6(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney9, WinMoneyNoWithTax9, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num10 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        num += this.ComputeWin_X4_Zu4(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney10, WinMoneyNoWithTax10, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num11 += winCount;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选一" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选二" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中4 " + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中3 " + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选24 " + num8.ToString() + "注");
                }
                if (num9 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选12 " + num9.ToString() + "注");
                }
                if (num10 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选6 " + num10.ToString() + "注");
                }
                if (num11 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选4 " + num11.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        WinCount++;
                                        num += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选一" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                int num = 0;
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                if (num == 2)
                                {
                                    WinCount++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选二" + ((int) WinCount).ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 3:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 2:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 4:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 3:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中4 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中3 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zu12(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu12(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选12 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu24(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu24(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选24 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选4 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu6(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选6 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private string FilterRepeated(string NumberPart)
            {
                string number = "";
                string[] strArray = NumberPart.Split(new char[] { ',' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (("23456789AJQK10".IndexOf(strArray[i]) >= 0) && (number.IndexOf(strArray[i]) == -1))
                    {
                        number = number + strArray[i] + ",";
                    }
                }
                number = number.Substring(0, number.Length - 1);
                return this.SortKLPK(number);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x15e0, "混合投注"), new Lottery.PlayType(0x15e1, "任选一单式"), new Lottery.PlayType(0x15e2, "任选一复式"), new Lottery.PlayType(0x15e3, "任选二单式"), new Lottery.PlayType(0x15e4, "任选二复式"), new Lottery.PlayType(0x15e5, "任选三单式"), new Lottery.PlayType(0x15e6, "任选三复式"), new Lottery.PlayType(0x15e7, "选四组选24"), new Lottery.PlayType(0x15e8, "选四组选12"), new Lottery.PlayType(0x15e9, "选四组选6"), new Lottery.PlayType(0x15ea, "选四组选4"), new Lottery.PlayType(0x15eb, "选四直选单式"), new Lottery.PlayType(0x15ec, "选四组选复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            private string SortKLPK(string Number)
            {
                string[] strArray = new string[13];
                string str = "";
                string[] strArray2 = Number.Split(new char[] { ',' });
                for (int i = 0; i < strArray2.Length; i++)
                {
                    if ("23456789AJQK10".IndexOf(strArray2[i]) >= 0)
                    {
                        if (strArray2[i] == "A")
                        {
                            strArray[0] = "A";
                        }
                        else if (strArray2[i] == "2")
                        {
                            strArray[1] = "2";
                        }
                        else if (strArray2[i] == "3")
                        {
                            strArray[2] = "3";
                        }
                        else if (strArray2[i] == "4")
                        {
                            strArray[3] = "4";
                        }
                        else if (strArray2[i] == "5")
                        {
                            strArray[4] = "5";
                        }
                        else if (strArray2[i] == "6")
                        {
                            strArray[5] = "6";
                        }
                        else if (strArray2[i] == "7")
                        {
                            strArray[6] = "7";
                        }
                        else if (strArray2[i] == "8")
                        {
                            strArray[7] = "8";
                        }
                        else if (strArray2[i] == "9")
                        {
                            strArray[8] = "9";
                        }
                        else if (strArray2[i] == "10")
                        {
                            strArray[9] = "10";
                        }
                        else if (strArray2[i] == "J")
                        {
                            strArray[10] = "J";
                        }
                        else if (strArray2[i] == "Q")
                        {
                            strArray[11] = "Q";
                        }
                        else if (strArray2[i] == "K")
                        {
                            strArray[12] = "K";
                        }
                    }
                }
                for (int j = 0; j < 13; j++)
                {
                    if (strArray[j] != null)
                    {
                        str = str + strArray[j] + ",";
                    }
                }
                return str.Substring(0, str.Length - 1);
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x15e0)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x15e1) || (PlayType == 0x15e2))
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x15e3) || (PlayType == 0x15e4))
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x15e5) || (PlayType == 0x15e6))
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x15e7)
                {
                    return this.ToSingle_X4_Zu24(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x15e8)
                {
                    return this.ToSingle_X4_Zu12(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x15e9)
                {
                    return this.ToSingle_X4_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x15ea)
                {
                    return this.ToSingle_X4_Zu4(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x15eb) && (PlayType != 0x15ec))
                {
                    return null;
                }
                return this.ToSingle_X4_Zhi(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[任选1单式]") || Number.StartsWith("[任选1复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX1(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选2单式]") || Number.StartsWith("[任选2复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX2(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选3单式]") || Number.StartsWith("[任选3复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX3(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选24]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu24(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选12]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu12(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选6]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu6(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选4]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu4(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (!Number.StartsWith("[选4直选单式]") && !Number.StartsWith("[选4直选复式]"))
                {
                    return null;
                }
                return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zhi(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                int num = 0;
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                    if (strArray[i] != "_")
                    {
                        Regex regex2 = new Regex("((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        if (regex2.IsMatch(strArray[i]))
                        {
                            num++;
                        }
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    if (str != "_")
                    {
                        str = str + ",_,_,_";
                        list.Add(str);
                    }
                }
                for (int m = 0; m < strArray[1].Length; m++)
                {
                    string str2 = strArray[1][m].ToString();
                    if (str2 != "_")
                    {
                        str2 = "_," + str2 + ",_,_";
                        list.Add(str2);
                    }
                }
                for (int n = 0; n < strArray[2].Length; n++)
                {
                    string str3 = strArray[2][n].ToString();
                    if (str3 != "_")
                    {
                        str3 = "_,_," + str3 + ",_";
                        list.Add(str3);
                    }
                }
                for (int num7 = 0; num7 < strArray[3].Length; num7++)
                {
                    string str4 = strArray[3][num7].ToString();
                    if (str4 != "_")
                    {
                        str4 = "_,_,_," + str4;
                        list.Add(str4);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num8 = 0; num8 < list.Count; num8++)
                {
                    strArray2[num8] = list[num8].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        string[] strArray3;
                        IntPtr ptr;
                        (strArray3 = strArray)[(int) (ptr = (IntPtr) j)] = strArray3[(int) ptr] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 5)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        strArray[j] = strArray[j] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 6)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu12(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu24(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                string[] strArray = CanonicalNumber.Split(new char[] { ',' });
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int i = 0; i < (length - 3); i++)
                {
                    for (int k = i + 1; k < (length - 2); k++)
                    {
                        for (int m = k + 1; m < (length - 1); m++)
                        {
                            for (int n = m + 1; n < length; n++)
                            {
                                list.Add(strArray[i].ToString() + "," + strArray[k].ToString() + "," + strArray[m].ToString() + "," + strArray[n].ToString());
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu4(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2])) && ((Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3]))) && (((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3]))))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[3]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]))) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3])))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }
        }

        public class SDKLPK : Lottery.LotteryBase
        {
            public const string Code = "SDKLPK";
            public const int ID = 0x31;
            public const double MaxMoney = 200000.0;
            public const string Name = "山东快乐扑克";
            public const int PlayType_Mixed = 0x1324;
            public const int PlayType_RX1_D = 0x1325;
            public const int PlayType_RX1_F = 0x1326;
            public const int PlayType_RX2_D = 0x1327;
            public const int PlayType_RX2_F = 0x1328;
            public const int PlayType_RX3_D = 0x1329;
            public const int PlayType_RX3_F = 0x132a;
            public const int PlayType_X4_ZhiD = 0x132f;
            public const int PlayType_X4_ZhiF = 0x1330;
            public const int PlayType_X4_Zu12 = 0x132c;
            public const int PlayType_X4_Zu24 = 0x132b;
            public const int PlayType_X4_Zu4 = 0x132e;
            public const int PlayType_X4_Zu6 = 0x132d;
            public const string sID = "49";

            public SDKLPK()
            {
                base.id = 0x31;
                base.name = "山东快乐扑克";
                base.code = "SDKLPK";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x1324)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if ((PlayType == 0x1325) || (PlayType == 0x1326))
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if ((PlayType == 0x1327) || (PlayType == 0x1328))
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if ((PlayType == 0x1329) || (PlayType == 0x132a))
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if (PlayType == 0x132b)
                {
                    return this.AnalyseScheme_X4_Zu24(Content, PlayType);
                }
                if (PlayType == 0x132c)
                {
                    return this.AnalyseScheme_X4_Zu12(Content, PlayType);
                }
                if (PlayType == 0x132d)
                {
                    return this.AnalyseScheme_X4_Zu6(Content, PlayType);
                }
                if (PlayType == 0x132e)
                {
                    return this.AnalyseScheme_X4_Zu4(Content, PlayType);
                }
                if ((PlayType != 0x132f) && (PlayType != 0x1330))
                {
                    return "";
                }
                return this.AnalyseScheme_X4_Zhi(Content, PlayType);
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[任选一单式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x1325);
                    }
                    if (strArray[i].StartsWith("[任选一复式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x1326);
                    }
                    if (strArray[i].StartsWith("[任选二单式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x1327);
                    }
                    if (strArray[i].StartsWith("[任选二复式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x1328);
                    }
                    if (strArray[i].StartsWith("[任选三单式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x1329);
                    }
                    if (strArray[i].StartsWith("[任选三复式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x132a);
                    }
                    if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu24(base.FilterPreFix(strArray[i]), 0x132b);
                    }
                    if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu12(base.FilterPreFix(strArray[i]), 0x132c);
                    }
                    if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu6(base.FilterPreFix(strArray[i]), 0x132d);
                    }
                    if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu4(base.FilterPreFix(strArray[i]), 0x132e);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1325)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x1326))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x1325))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1327)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x1328))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x1327))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1329)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x132a))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x1329))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x132f)
                {
                    str2 = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i].ToString());
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x132f) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu12(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu12(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu24(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3,12}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu24(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu4(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu6(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu6(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex("((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                return "";
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1324) && (play_type <= 0x1330));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 20))
                {
                    return -3.0;
                }
                if (!this.AnalyseWinNumber(WinNumber))
                {
                    return -5.0;
                }
                int winCount = 0;
                int num2 = 0;
                int num3 = 0;
                if (PlayType == 0x1324)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13]);
                }
                if ((PlayType == 0x1325) || (PlayType == 0x1326))
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref winCount);
                }
                if ((PlayType == 0x1327) || (PlayType == 0x1328))
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref winCount);
                }
                if ((PlayType == 0x1329) || (PlayType == 0x132a))
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num2, ref num3);
                }
                if ((PlayType == 0x132f) || (PlayType == 0x1330))
                {
                    return this.ComputeWin_X4_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], ref num2, ref num3);
                }
                if (PlayType == 0x132b)
                {
                    return this.ComputeWin_X4_Zu24(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref winCount);
                }
                if (PlayType == 0x132c)
                {
                    return this.ComputeWin_X4_Zu12(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], ref winCount);
                }
                if (PlayType == 0x132d)
                {
                    return this.ComputeWin_X4_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], ref winCount);
                }
                if (PlayType == 0x132e)
                {
                    return this.ComputeWin_X4_Zu4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x12], WinMoneyList[0x13], ref winCount);
                }
                return -4.0;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8, double WinMoney9, double WinMoneyNoWithTax9, double WinMoney10, double WinMoneyNoWithTax10)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int winCount = 0;
                    int num14 = 0;
                    int num15 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[任选一单式]") || strArray[i].StartsWith("[任选一复式]"))
                    {
                        num += this.ComputeWin_RX1(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选二单式]") || strArray[i].StartsWith("[任选二复式]"))
                    {
                        num += this.ComputeWin_RX2(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选三单式]") || strArray[i].StartsWith("[任选三复式]"))
                    {
                        num += this.ComputeWin_RX3(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num4 += num14;
                        num5 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四直选单式]") || strArray[i].StartsWith("[选四直选复式]"))
                    {
                        num += this.ComputeWin_X4_Zhi(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, WinMoney6, WinMoneyNoWithTax6, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += num14;
                        num7 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        num += this.ComputeWin_X4_Zu24(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney7, WinMoneyNoWithTax7, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num8 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        num += this.ComputeWin_X4_Zu12(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney8, WinMoneyNoWithTax8, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num9 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        num += this.ComputeWin_X4_Zu6(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney9, WinMoneyNoWithTax9, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num10 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        num += this.ComputeWin_X4_Zu4(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney10, WinMoneyNoWithTax10, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num11 += winCount;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选一" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选二" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中4 " + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中3 " + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选24 " + num8.ToString() + "注");
                }
                if (num9 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选12 " + num9.ToString() + "注");
                }
                if (num10 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选6 " + num10.ToString() + "注");
                }
                if (num11 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选4 " + num11.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        WinCount++;
                                        num += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选一" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                int num = 0;
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                if (num == 2)
                                {
                                    WinCount++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选二" + ((int) WinCount).ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 3:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 2:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 4:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 3:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中4 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中3 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zu12(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu12(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选12 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu24(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu24(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选24 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选4 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu6(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选6 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private string FilterRepeated(string NumberPart)
            {
                string number = "";
                string[] strArray = NumberPart.Split(new char[] { ',' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (("23456789AJQK10".IndexOf(strArray[i]) >= 0) && (number.IndexOf(strArray[i]) == -1))
                    {
                        number = number + strArray[i] + ",";
                    }
                }
                number = number.Substring(0, number.Length - 1);
                return this.SortKLPK(number);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1324, "混合投注"), new Lottery.PlayType(0x1325, "任选一单式"), new Lottery.PlayType(0x1326, "任选一复式"), new Lottery.PlayType(0x1327, "任选二单式"), new Lottery.PlayType(0x1328, "任选二复式"), new Lottery.PlayType(0x1329, "任选三单式"), new Lottery.PlayType(0x132a, "任选三复式"), new Lottery.PlayType(0x132b, "选四组选24"), new Lottery.PlayType(0x132c, "选四组选12"), new Lottery.PlayType(0x132d, "选四组选6"), new Lottery.PlayType(0x132e, "选四组选4"), new Lottery.PlayType(0x132f, "选四直选单式"), new Lottery.PlayType(0x1330, "选四组选复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            private string SortKLPK(string Number)
            {
                string[] strArray = new string[13];
                string str = "";
                string[] strArray2 = Number.Split(new char[] { ',' });
                for (int i = 0; i < strArray2.Length; i++)
                {
                    if ("23456789AJQK10".IndexOf(strArray2[i]) >= 0)
                    {
                        if (strArray2[i] == "A")
                        {
                            strArray[0] = "A";
                        }
                        else if (strArray2[i] == "2")
                        {
                            strArray[1] = "2";
                        }
                        else if (strArray2[i] == "3")
                        {
                            strArray[2] = "3";
                        }
                        else if (strArray2[i] == "4")
                        {
                            strArray[3] = "4";
                        }
                        else if (strArray2[i] == "5")
                        {
                            strArray[4] = "5";
                        }
                        else if (strArray2[i] == "6")
                        {
                            strArray[5] = "6";
                        }
                        else if (strArray2[i] == "7")
                        {
                            strArray[6] = "7";
                        }
                        else if (strArray2[i] == "8")
                        {
                            strArray[7] = "8";
                        }
                        else if (strArray2[i] == "9")
                        {
                            strArray[8] = "9";
                        }
                        else if (strArray2[i] == "10")
                        {
                            strArray[9] = "10";
                        }
                        else if (strArray2[i] == "J")
                        {
                            strArray[10] = "J";
                        }
                        else if (strArray2[i] == "Q")
                        {
                            strArray[11] = "Q";
                        }
                        else if (strArray2[i] == "K")
                        {
                            strArray[12] = "K";
                        }
                    }
                }
                for (int j = 0; j < 13; j++)
                {
                    if (strArray[j] != null)
                    {
                        str = str + strArray[j] + ",";
                    }
                }
                return str.Substring(0, str.Length - 1);
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x1324)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1325) || (PlayType == 0x1326))
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1327) || (PlayType == 0x1328))
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1329) || (PlayType == 0x132a))
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x132b)
                {
                    return this.ToSingle_X4_Zu24(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x132c)
                {
                    return this.ToSingle_X4_Zu12(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x132d)
                {
                    return this.ToSingle_X4_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x132e)
                {
                    return this.ToSingle_X4_Zu4(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x132f) && (PlayType != 0x1330))
                {
                    return null;
                }
                return this.ToSingle_X4_Zhi(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[任选1单式]") || Number.StartsWith("[任选1复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX1(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选2单式]") || Number.StartsWith("[任选2复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX2(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选3单式]") || Number.StartsWith("[任选3复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX3(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选24]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu24(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选12]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu12(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选6]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu6(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选4]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu4(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (!Number.StartsWith("[选4直选单式]") && !Number.StartsWith("[选4直选复式]"))
                {
                    return null;
                }
                return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zhi(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                int num = 0;
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                    if (strArray[i] != "_")
                    {
                        Regex regex2 = new Regex("((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        if (regex2.IsMatch(strArray[i]))
                        {
                            num++;
                        }
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    if (str != "_")
                    {
                        str = str + ",_,_,_";
                        list.Add(str);
                    }
                }
                for (int m = 0; m < strArray[1].Length; m++)
                {
                    string str2 = strArray[1][m].ToString();
                    if (str2 != "_")
                    {
                        str2 = "_," + str2 + ",_,_";
                        list.Add(str2);
                    }
                }
                for (int n = 0; n < strArray[2].Length; n++)
                {
                    string str3 = strArray[2][n].ToString();
                    if (str3 != "_")
                    {
                        str3 = "_,_," + str3 + ",_";
                        list.Add(str3);
                    }
                }
                for (int num7 = 0; num7 < strArray[3].Length; num7++)
                {
                    string str4 = strArray[3][num7].ToString();
                    if (str4 != "_")
                    {
                        str4 = "_,_,_," + str4;
                        list.Add(str4);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num8 = 0; num8 < list.Count; num8++)
                {
                    strArray2[num8] = list[num8].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        string[] strArray3;
                        IntPtr ptr;
                        (strArray3 = strArray)[(int) (ptr = (IntPtr) j)] = strArray3[(int) ptr] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 5)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        strArray[j] = strArray[j] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 6)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu12(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu24(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                string[] strArray = CanonicalNumber.Split(new char[] { ',' });
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int i = 0; i < (length - 3); i++)
                {
                    for (int k = i + 1; k < (length - 2); k++)
                    {
                        for (int m = k + 1; m < (length - 1); m++)
                        {
                            for (int n = m + 1; n < length; n++)
                            {
                                list.Add(strArray[i].ToString() + "," + strArray[k].ToString() + "," + strArray[m].ToString() + "," + strArray[n].ToString());
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu4(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2])) && ((Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3]))) && (((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3]))))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[3]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]))) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3])))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }
        }

        public class SFC : Lottery.LotteryBase
        {
            public const string Code = "SFC";
            public const int ID = 1;
            public const double MaxMoney = 20000.0;
            public const string Name = "胜负彩";
            public const int PlayType_9_D = 0x67;
            public const int PlayType_9_F = 0x68;
            public const int PlayType_D = 0x65;
            public const int PlayType_F = 0x66;
            public const string sID = "1";

            public SFC()
            {
                base.id = 1;
                base.name = "胜负彩";
                base.code = "SFC";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0x65) || (PlayType == 0x66))
                {
                    return this.AnalyseScheme_14(Content, PlayType);
                }
                if ((PlayType != 0x67) && (PlayType != 0x68))
                {
                    return "";
                }
                return this.AnalyseScheme_9(Content, PlayType);
            }

            private string AnalyseScheme_14(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x65)
                {
                    str2 = "([013]){14}";
                }
                else
                {
                    str2 = "(([013])|([(][013]{1,3}[)])){14}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_14(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x65) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_9(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x67)
                {
                    str2 = "([013-]){14}";
                }
                else
                {
                    str2 = "(([013-])|([(][013]{1,3}[)])){14}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_9(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x67) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Number = Number.Replace("*", "0");
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_14(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num, int Type)
            {
                if ((Type != 14) && (Type != 9))
                {
                    Type = 14;
                }
                if (Type == 14)
                {
                    return this.BuildNumber_14(Num);
                }
                if (Type == 9)
                {
                    return this.BuildNumber_9(Num);
                }
                return "";
            }

            private string BuildNumber_14(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 14; j++)
                    {
                        str = str + "310"[random.Next(0, 3)].ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            private string BuildNumber_9(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = this.BuildNumber_14(1);
                    for (int j = 0; j < 5; j++)
                    {
                        int startIndex = 0;
                        do
                        {
                            startIndex = random.Next(0, 14);
                        }
                        while (str[startIndex] == '-');
                        str = str.Remove(startIndex, 1).Insert(startIndex, "-");
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x65) && (play_type <= 0x68));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                if (((PlayType == 0x65) || (PlayType == 0x65)) || ((PlayType == 0x66) || (PlayType == 0x66)))
                {
                    return this.ComputeWin_14(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3]);
                }
                if (((PlayType != 0x67) && (PlayType != 0x67)) && ((PlayType != 0x68) && (PlayType != 0x68)))
                {
                    return -4.0;
                }
                return this.ComputeWin_9(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5]);
            }

            private double ComputeWin_14(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                double num3 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_14(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                int num6 = 0;
                                for (int k = 0; k < 14; k++)
                                {
                                    if ((WinNumber[k] == '*') || (strArray2[j][k] == WinNumber[k]))
                                    {
                                        num6++;
                                    }
                                }
                                switch (num6)
                                {
                                    case 14:
                                        num++;
                                        num3 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 13:
                                        num2++;
                                        num3 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        break;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num3;
            }

            private double ComputeWin_9(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_9(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                int num5 = 0;
                                for (int k = 0; k < 14; k++)
                                {
                                    if (((WinNumber[k] == '*') || (strArray2[j][k] == WinNumber[k])) || (strArray2[j][k] == '-'))
                                    {
                                        num5++;
                                    }
                                }
                                if (num5 == 14)
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private string ConvertFormatToElectronTicket_DYJ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID == 0x65) || (PlayTypeID == 0x67))
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + ";\n";
                    }
                }
                if ((PlayTypeID == 0x66) || (PlayTypeID == 0x68))
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int k = 0; k < strArray2.Length; k++)
                    {
                        string[] strArray3 = new string[14];
                        Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[k]);
                        for (int m = 0; m < 14; m++)
                        {
                            strArray3[m] = match.Groups["L" + m.ToString()].ToString().Trim();
                            if (strArray3[m] == "")
                            {
                                return "";
                            }
                            if (strArray3[m].Length > 1)
                            {
                                strArray3[m] = strArray3[m].Substring(1, strArray3[m].Length - 2);
                                if (strArray3[m].Length > 1)
                                {
                                    strArray3[m] = this.FilterRepeated(strArray3[m]);
                                }
                                if (strArray3[m] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray3[m] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + ";\n";
                    }
                }
                str = str.Replace("-", "#");
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string ConvertFormatToElectronTicket_HPSD(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID == 0x65) || (PlayTypeID == 0x67))
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if ((PlayTypeID == 0x66) || (PlayTypeID == 0x68))
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int k = 0; k < strArray2.Length; k++)
                    {
                        string[] strArray3 = new string[14];
                        Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[k]);
                        for (int m = 0; m < 14; m++)
                        {
                            strArray3[m] = match.Groups["L" + m.ToString()].ToString().Trim();
                            if (strArray3[m] == "")
                            {
                                return "";
                            }
                            if (strArray3[m].Length > 1)
                            {
                                strArray3[m] = strArray3[m].Substring(1, strArray3[m].Length - 2);
                                if (strArray3[m].Length > 1)
                                {
                                    strArray3[m] = this.FilterRepeated(strArray3[m]);
                                }
                                if (strArray3[m] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray3[m] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                str = str.Replace("-", "#");
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("013-".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x65, "单式"), new Lottery.PlayType(0x66, "复式"), new Lottery.PlayType(0x67, "任九场单式"), new Lottery.PlayType(0x68, "任九场复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    switch (LotteryMachine)
                    {
                        case "CR_YTCII2":
                            if ((PlayTypeID != 0x65) && (PlayTypeID != 0x67))
                            {
                                if ((PlayTypeID != 0x66) && (PlayTypeID != 0x68))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CR_YTCII2_F(numbers);
                            }
                            return this.GetPrintKeyList_CR_YTCII2_D(numbers);

                        case "TCBJYTD":
                            if ((PlayTypeID != 0x65) && (PlayTypeID != 0x67))
                            {
                                if ((PlayTypeID != 0x66) && (PlayTypeID != 0x68))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TCBJYTD_F(numbers);
                            }
                            return this.GetPrintKeyList_TCBJYTD_D(numbers);

                        case "TGAMPOS4000":
                            if ((PlayTypeID != 0x65) && (PlayTypeID != 0x67))
                            {
                                if ((PlayTypeID != 0x66) && (PlayTypeID != 0x68))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TGAMPOS4000_F(numbers);
                            }
                            return this.GetPrintKeyList_TGAMPOS4000_D(numbers);

                        case "CP86":
                            if ((PlayTypeID != 0x65) && (PlayTypeID != 0x67))
                            {
                                if ((PlayTypeID != 0x66) && (PlayTypeID != 0x68))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CP86_F(numbers);
                            }
                            return this.GetPrintKeyList_CP86_D(numbers);

                        case "MODEL_4000":
                            if ((PlayTypeID != 0x65) && (PlayTypeID != 0x67))
                            {
                                if ((PlayTypeID != 0x66) && (PlayTypeID != 0x68))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_MODEL_4000_F(numbers);
                            }
                            return this.GetPrintKeyList_MODEL_4000_D(numbers);

                        case "CORONISTPT":
                            if ((PlayTypeID != 0x65) && (PlayTypeID != 0x67))
                            {
                                if ((PlayTypeID != 0x66) && (PlayTypeID != 0x68))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CORONISTPT_F(numbers);
                            }
                            return this.GetPrintKeyList_CORONISTPT_D(numbers);

                        case "RS6500":
                            if (PlayTypeID != 0x65)
                            {
                                if (PlayTypeID == 0x66)
                                {
                                    return this.GetPrintKeyList_RS6500_F(numbers);
                                }
                                if (PlayTypeID == 0x67)
                                {
                                    return this.GetPrintKeyList_RS6500_R9_D(numbers);
                                }
                                if (PlayTypeID != 0x68)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_RS6500_R9_F(numbers);
                            }
                            return this.GetPrintKeyList_RS6500_D(numbers);

                        case "ks230":
                            if ((PlayTypeID != 0x65) && (PlayTypeID != 0x67))
                            {
                                if ((PlayTypeID != 0x66) && (PlayTypeID != 0x68))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_ks230_F(numbers);
                            }
                            return this.GetPrintKeyList_ks230_D(numbers);

                        case "LA-600A":
                            if ((PlayTypeID != 0x65) && (PlayTypeID != 0x67))
                            {
                                if ((PlayTypeID == 0x66) || (PlayTypeID == 0x68))
                                {
                                    return this.GetPrintKeyList_LA_600A_F(numbers);
                                }
                                break;
                            }
                            return this.GetPrintKeyList_LA_600A_D(numbers);
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CORONISTPT_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch == '-')
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 14; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3 == "-")
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            if (str3.Length == 1)
                            {
                                str = str + "[" + str3 + "]";
                            }
                            else
                            {
                                foreach (char ch in str3.Substring(1, str3.Length - 2))
                                {
                                    str = str + "[" + ch.ToString() + "]";
                                }
                            }
                            if (i < 13)
                            {
                                str = str + "[↓]";
                            }
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch == '-')
                        {
                            str = str + "[→]";
                        }
                        else
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 14; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3 == "-")
                        {
                            str = str + "[→]";
                        }
                        else
                        {
                            if (str3.Length == 1)
                            {
                                str = str + "[" + str3 + "]";
                            }
                            else
                            {
                                foreach (char ch in str3.Substring(1, str3.Length - 2))
                                {
                                    str = str + "[" + ch.ToString() + "]";
                                }
                            }
                            if (i < 13)
                            {
                                str = str + "[→]";
                            }
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch == '-')
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 14; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3 == "-")
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            if (str3.Length == 1)
                            {
                                str = str + "[" + str3 + "]";
                            }
                            else
                            {
                                foreach (char ch in str3.Substring(1, str3.Length - 2))
                                {
                                    str = str + "[" + ch.ToString() + "]";
                                }
                            }
                            if (i < 13)
                            {
                                str = str + "[↓]";
                            }
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch == '-')
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 14; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3 == "-")
                        {
                            str = str + "[←]";
                        }
                        else
                        {
                            if (str3.Length == 1)
                            {
                                str = str + "[" + str3 + "]";
                            }
                            else
                            {
                                foreach (char ch in str3.Substring(1, str3.Length - 2))
                                {
                                    str = str + "[" + ch.ToString() + "]";
                                }
                            }
                            if (i < 13)
                            {
                                str = str + "[↓]";
                            }
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch == '-')
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 14; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3 == "-")
                        {
                            str = str + "[→]";
                        }
                        else
                        {
                            if (str3.Length == 1)
                            {
                                str = str + "[" + str3 + "]";
                            }
                            else
                            {
                                foreach (char ch in str3.Substring(1, str3.Length - 2))
                                {
                                    str = str + "[" + ch.ToString() + "]";
                                }
                            }
                            if (i < 13)
                            {
                                str = str + "[→]";
                            }
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch == '-')
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 14; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3 == "-")
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            if (str3.Length == 1)
                            {
                                str = str + "[" + str3 + "]";
                            }
                            else
                            {
                                foreach (char ch in str3.Substring(1, str3.Length - 2))
                                {
                                    str = str + "[" + ch.ToString() + "]";
                                }
                            }
                            if (i < 13)
                            {
                                str = str + "[↓]";
                            }
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch == '-')
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 14; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3 == "-")
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            if (str3.Length == 1)
                            {
                                str = str + "[" + str3 + "]";
                            }
                            else
                            {
                                foreach (char ch in str3.Substring(1, str3.Length - 2))
                                {
                                    str = str + "[" + ch.ToString() + "]";
                                }
                            }
                            if (i < 13)
                            {
                                str = str + "[↓]";
                            }
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_R9_D(string[] Numbers)
            {
                string str = "";
                for (int i = 0; i < Numbers.Length; i++)
                {
                    bool flag = true;
                    for (int j = 13; j >= 0; j--)
                    {
                        if (flag)
                        {
                            if (Numbers[i].Substring(j, 1) != "-")
                            {
                                flag = false;
                            }
                            else
                            {
                                Numbers[i] = Numbers[i].Substring(0, j);
                            }
                        }
                    }
                }
                foreach (string str3 in Numbers)
                {
                    foreach (char ch in str3.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch == '-')
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_R9_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 14; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3 == "-")
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            if (str3.Length == 1)
                            {
                                str = str + "[" + str3 + "]";
                            }
                            else
                            {
                                foreach (char ch in str3.Substring(1, str3.Length - 2))
                                {
                                    str = str + "[" + ch.ToString() + "]";
                                }
                            }
                            if (i < 13)
                            {
                                str = str + "[↓]";
                            }
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch == '-')
                        {
                            str = str + "[→]";
                        }
                        else
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 14; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3 == "-")
                        {
                            str = str + "[→]";
                        }
                        else
                        {
                            if (str3.Length == 1)
                            {
                                str = str + "[" + str3 + "]";
                            }
                            else
                            {
                                foreach (char ch in str3.Substring(1, str3.Length - 2))
                                {
                                    str = str + "[" + ch.ToString() + "]";
                                }
                            }
                            if (i < 13)
                            {
                                str = str + "[→]";
                            }
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch == '-')
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 14; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3 == "-")
                        {
                            str = str + "[↓]";
                        }
                        else
                        {
                            if (str3.Length == 1)
                            {
                                str = str + "[" + str3 + "]";
                            }
                            else
                            {
                                foreach (char ch in str3.Substring(1, str3.Length - 2))
                                {
                                    str = str + "[" + ch.ToString() + "]";
                                }
                            }
                            if (i < 13)
                            {
                                str = str + "[↓]";
                            }
                        }
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public string[,] SplitLotteryNumberForGrid(string Number)
            {
                string[] strArray = Number.Split(new char[] { '\n' });
                if (strArray.Length == 0)
                {
                    return null;
                }
                ArrayList[] listArray = new ArrayList[strArray.Length];
                for (int i = 0; i < listArray.Length; i++)
                {
                    listArray[i] = new ArrayList();
                    int startIndex = 0;
                    string str = strArray[i];
                    if (str.Length < 14)
                    {
                        str = str.PadRight(14, ' ');
                    }
                    while ((startIndex < str.Length) && (listArray[i].Count < 14))
                    {
                        if (str.Substring(startIndex, 1) != "(")
                        {
                            listArray[i].Add(str.Substring(startIndex, 1));
                            startIndex++;
                        }
                        else
                        {
                            int num3 = startIndex + 1;
                            while (str.Substring(num3, 1) != ")")
                            {
                                num3++;
                            }
                            string str2 = str.Substring(startIndex, num3 - startIndex);
                            listArray[i].Add(str2.Substring(1, str2.Length - 1));
                            startIndex = num3 + 1;
                        }
                    }
                }
                string[,] strArray2 = new string[listArray.Length, 14];
                for (int j = 0; j < listArray.Length; j++)
                {
                    for (int k = 0; (k < listArray[j].Count) && (k < 14); k++)
                    {
                        strArray2[j, k] = listArray[j][k].ToString();
                    }
                }
                return strArray2;
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x65)
                {
                    return this.ToElectronicTicket_DYJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x66)
                {
                    return this.ToElectronicTicket_DYJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x67)
                {
                    return this.ToElectronicTicket_DYJ_9_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x68)
                {
                    return this.ToElectronicTicket_DYJ_9_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_9_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_9_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x68, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x67, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x65)
                {
                    return this.ToElectronicTicket_HPSD_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x66)
                {
                    return this.ToElectronicTicket_HPSD_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x67)
                {
                    return this.ToElectronicTicket_HPSD_9_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x68)
                {
                    return this.ToElectronicTicket_HPSD_9_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_9_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_9_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x68, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x67, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0x65) || (PlayType == 0x66))
                {
                    return this.ToSingle_14(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x67) && (PlayType != 0x68))
                {
                    return null;
                }
                return this.ToSingle_9(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_14(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[14];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>([\d])|([(][\d]+?[)]))(?<L1>([\d])|([(][\d]+?[)]))(?<L2>([\d])|([(][\d]+?[)]))(?<L3>([\d])|([(][\d]+?[)]))(?<L4>([\d])|([(][\d]+?[)]))(?<L5>([\d])|([(][\d]+?[)]))(?<L6>([\d])|([(][\d]+?[)]))(?<L7>([\d])|([(][\d]+?[)]))(?<L8>([\d])|([(][\d]+?[)]))(?<L9>([\d])|([(][\d]+?[)]))(?<L10>([\d])|([(][\d]+?[)]))(?<L11>([\d])|([(][\d]+?[)]))(?<L12>([\d])|([(][\d]+?[)]))(?<L13>([\d])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 14; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    for (int num7 = 0; num7 < strArray[5].Length; num7++)
                                    {
                                        string str6 = str5 + strArray[5][num7].ToString();
                                        for (int num8 = 0; num8 < strArray[6].Length; num8++)
                                        {
                                            string str7 = str6 + strArray[6][num8].ToString();
                                            for (int num9 = 0; num9 < strArray[7].Length; num9++)
                                            {
                                                string str8 = str7 + strArray[7][num9].ToString();
                                                for (int num10 = 0; num10 < strArray[8].Length; num10++)
                                                {
                                                    string str9 = str8 + strArray[8][num10].ToString();
                                                    for (int num11 = 0; num11 < strArray[9].Length; num11++)
                                                    {
                                                        string str10 = str9 + strArray[9][num11].ToString();
                                                        for (int num12 = 0; num12 < strArray[10].Length; num12++)
                                                        {
                                                            string str11 = str10 + strArray[10][num12].ToString();
                                                            for (int num13 = 0; num13 < strArray[11].Length; num13++)
                                                            {
                                                                string str12 = str11 + strArray[11][num13].ToString();
                                                                for (int num14 = 0; num14 < strArray[12].Length; num14++)
                                                                {
                                                                    string str13 = str12 + strArray[12][num14].ToString();
                                                                    for (int num15 = 0; num15 < strArray[13].Length; num15++)
                                                                    {
                                                                        string str14 = str13 + strArray[13][num15].ToString();
                                                                        list.Add(str14);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_9(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[14];
                CanonicalNumber = "";
                if (_String.StringAt(Number, '-') != 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>([\d-])|([(][\d]+?[)]))(?<L5>([\d-])|([(][\d]+?[)]))(?<L6>([\d-])|([(][\d]+?[)]))(?<L7>([\d-])|([(][\d]+?[)]))(?<L8>([\d-])|([(][\d]+?[)]))(?<L9>([\d-])|([(][\d]+?[)]))(?<L10>([\d-])|([(][\d]+?[)]))(?<L11>([\d-])|([(][\d]+?[)]))(?<L12>([\d-])|([(][\d]+?[)]))(?<L13>([\d-])|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 14; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    for (int num7 = 0; num7 < strArray[5].Length; num7++)
                                    {
                                        string str6 = str5 + strArray[5][num7].ToString();
                                        for (int num8 = 0; num8 < strArray[6].Length; num8++)
                                        {
                                            string str7 = str6 + strArray[6][num8].ToString();
                                            for (int num9 = 0; num9 < strArray[7].Length; num9++)
                                            {
                                                string str8 = str7 + strArray[7][num9].ToString();
                                                for (int num10 = 0; num10 < strArray[8].Length; num10++)
                                                {
                                                    string str9 = str8 + strArray[8][num10].ToString();
                                                    for (int num11 = 0; num11 < strArray[9].Length; num11++)
                                                    {
                                                        string str10 = str9 + strArray[9][num11].ToString();
                                                        for (int num12 = 0; num12 < strArray[10].Length; num12++)
                                                        {
                                                            string str11 = str10 + strArray[10][num12].ToString();
                                                            for (int num13 = 0; num13 < strArray[11].Length; num13++)
                                                            {
                                                                string str12 = str11 + strArray[11][num13].ToString();
                                                                for (int num14 = 0; num14 < strArray[12].Length; num14++)
                                                                {
                                                                    string str13 = str12 + strArray[12][num14].ToString();
                                                                    for (int num15 = 0; num15 < strArray[13].Length; num15++)
                                                                    {
                                                                        string str14 = str13 + strArray[13][num15].ToString();
                                                                        list.Add(str14);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class SHKENO : Lottery.LotteryBase
        {
            public const string Code = "SHKENO";
            public const int ID = 0x22;
            public const double MaxMoney = 2.0;
            public const string Name = "上海Keno游戏";
            public const int PlayType_D = 0xd49;
            public const string sID = "34";

            public SHKENO()
            {
                base.id = 0x22;
                base.name = "上海Keno游戏";
                base.code = "SHKENO";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"(\d\d\s){0,9}\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string[] strArray = this.FilterRepeated(Number.Split(new char[] { ' ' }));
                return ((strArray != null) && (strArray.Length == 20));
            }

            public override string BuildNumber(int Num, int Type)
            {
                if (((((Type != 10) && (Type != 9)) && ((Type != 8) && (Type != 7))) && (((Type != 6) && (Type != 5)) && ((Type != 4) && (Type != 3)))) && ((Type != 2) && (Type != 1)))
                {
                    Type = 10;
                }
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < Type; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x51);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return (play_type == 0xd49);
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x3b)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 0x4a))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                int num12 = 0;
                int num13 = 0;
                int num14 = 0;
                int num15 = 0;
                int num16 = 0;
                int num17 = 0;
                int num18 = 0;
                int num19 = 0;
                int num20 = 0;
                int num21 = 0;
                int num22 = 0;
                int num23 = 0;
                int num24 = 0;
                int num25 = 0;
                int num26 = 0;
                int num27 = 0;
                int num28 = 0;
                int num29 = 0;
                int num30 = 0;
                int num31 = 0;
                int num32 = 0;
                int num33 = 0;
                int num34 = 0;
                int num35 = 0;
                int num36 = 0;
                int num37 = 0;
                double num38 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, 0xd49);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            int num41 = 0;
                            int num42 = 0;
                            int num43 = 0;
                            int num44 = 0;
                            int num45 = 0;
                            int num46 = 0;
                            int num47 = 0;
                            int num48 = 0;
                            int num49 = 0;
                            int num50 = 0;
                            int num51 = 0;
                            int num52 = 0;
                            int num53 = 0;
                            int num54 = 0;
                            int num55 = 0;
                            int num56 = 0;
                            int num57 = 0;
                            int num58 = 0;
                            int num59 = 0;
                            int num60 = 0;
                            int num61 = 0;
                            int num62 = 0;
                            int num63 = 0;
                            int num64 = 0;
                            int num65 = 0;
                            int num66 = 0;
                            int num67 = 0;
                            int num68 = 0;
                            int num69 = 0;
                            int num70 = 0;
                            int num71 = 0;
                            int num72 = 0;
                            int num73 = 0;
                            int num74 = 0;
                            int num75 = 0;
                            int num76 = 0;
                            int num77 = 0;
                            double num78 = 0.0;
                            double winMoneyNoWithTax = 0.0;
                            switch ((_String.StringAt(strArray2[j], ' ') + 1))
                            {
                                case 1:
                                    num78 = this.ComputeWin_1(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x48], WinMoneyList[0x49], ref num77);
                                    break;

                                case 2:
                                    num78 = this.ComputeWin_2(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[70], WinMoneyList[0x47], ref num76);
                                    break;

                                case 3:
                                    num78 = this.ComputeWin_3(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x42], WinMoneyList[0x43], WinMoneyList[0x44], WinMoneyList[0x45], ref num74, ref num75);
                                    break;

                                case 4:
                                    num78 = this.ComputeWin_4(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[60], WinMoneyList[0x3d], WinMoneyList[0x3e], WinMoneyList[0x3f], WinMoneyList[0x40], WinMoneyList[0x41], ref num71, ref num72, ref num73);
                                    break;

                                case 5:
                                    num78 = this.ComputeWin_5(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x36], WinMoneyList[0x37], WinMoneyList[0x38], WinMoneyList[0x39], WinMoneyList[0x3a], WinMoneyList[0x3b], ref num68, ref num69, ref num70);
                                    break;

                                case 6:
                                    num78 = this.ComputeWin_6(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x2e], WinMoneyList[0x2f], WinMoneyList[0x30], WinMoneyList[0x31], WinMoneyList[50], WinMoneyList[0x33], WinMoneyList[0x34], WinMoneyList[0x35], ref num64, ref num65, ref num66, ref num67);
                                    break;

                                case 7:
                                    num78 = this.ComputeWin_7(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x26], WinMoneyList[0x27], WinMoneyList[40], WinMoneyList[0x29], WinMoneyList[0x2a], WinMoneyList[0x2b], WinMoneyList[0x2c], WinMoneyList[0x2d], ref num60, ref num61, ref num62, ref num63);
                                    break;

                                case 8:
                                    num78 = this.ComputeWin_8(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x1a], WinMoneyList[0x1b], WinMoneyList[0x1c], WinMoneyList[0x1d], WinMoneyList[30], WinMoneyList[0x1f], WinMoneyList[0x20], WinMoneyList[0x21], WinMoneyList[0x22], WinMoneyList[0x23], WinMoneyList[0x24], WinMoneyList[0x25], ref num54, ref num55, ref num56, ref num57, ref num58, ref num59);
                                    break;

                                case 9:
                                    num78 = this.ComputeWin_9(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13], WinMoneyList[20], WinMoneyList[0x15], WinMoneyList[0x16], WinMoneyList[0x17], WinMoneyList[0x18], WinMoneyList[0x19], ref num48, ref num49, ref num50, ref num51, ref num52, ref num53);
                                    break;

                                case 10:
                                    num78 = this.ComputeWin_10(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], ref num41, ref num42, ref num43, ref num44, ref num45, ref num46, ref num47);
                                    break;

                                default:
                                    goto Label_0563;
                            }
                            num += num41;
                            num2 += num42;
                            num3 += num43;
                            num4 += num44;
                            num5 += num45;
                            num6 += num46;
                            num7 += num47;
                            num8 += num48;
                            num9 += num49;
                            num10 += num50;
                            num11 += num51;
                            num12 += num52;
                            num13 += num53;
                            num14 += num54;
                            num15 += num55;
                            num16 += num56;
                            num17 += num57;
                            num18 += num58;
                            num19 += num59;
                            num20 += num60;
                            num21 += num61;
                            num22 += num62;
                            num23 += num63;
                            num24 += num64;
                            num25 += num65;
                            num26 += num66;
                            num27 += num67;
                            num28 += num68;
                            num29 += num69;
                            num30 += num70;
                            num31 += num71;
                            num32 += num72;
                            num33 += num73;
                            num34 += num74;
                            num35 += num75;
                            num36 += num76;
                            num37 += num77;
                            num38 += num78;
                            WinMoneyNoWithTax += winMoneyNoWithTax;
                        Label_0563:;
                        }
                    }
                }
                Description = "";
                if (num > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选10中10奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选10中9奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选10中8奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选10中7奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选10中6奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选10中5奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选10中0奖" + num7.ToString() + "注";
                }
                if (num8 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选9中9奖" + num8.ToString() + "注";
                }
                if (num9 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选9中8奖" + num9.ToString() + "注";
                }
                if (num10 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选9中7奖" + num10.ToString() + "注";
                }
                if (num11 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选9中6奖" + num11.ToString() + "注";
                }
                if (num12 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选9中5奖" + num12.ToString() + "注";
                }
                if (num13 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选9中0奖" + num13.ToString() + "注";
                }
                if (num14 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中8奖" + num14.ToString() + "注";
                }
                if (num15 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中7奖" + num15.ToString() + "注";
                }
                if (num16 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中6奖" + num16.ToString() + "注";
                }
                if (num17 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中5奖" + num17.ToString() + "注";
                }
                if (num18 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中4奖" + num18.ToString() + "注";
                }
                if (num19 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中0奖" + num19.ToString() + "注";
                }
                if (num20 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中7奖" + num20.ToString() + "注";
                }
                if (num21 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中6奖" + num21.ToString() + "注";
                }
                if (num22 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中5奖" + num22.ToString() + "注";
                }
                if (num23 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中4奖" + num23.ToString() + "注";
                }
                if (num24 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选6中6奖" + num24.ToString() + "注";
                }
                if (num25 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选6中5奖" + num25.ToString() + "注";
                }
                if (num26 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选6中4奖" + num26.ToString() + "注";
                }
                if (num27 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选6中3奖" + num27.ToString() + "注";
                }
                if (num28 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选5中5奖" + num28.ToString() + "注";
                }
                if (num29 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选5中4奖" + num29.ToString() + "注";
                }
                if (num30 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选5中3奖" + num30.ToString() + "注";
                }
                if (num31 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选4中4奖" + num31.ToString() + "注";
                }
                if (num32 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选4中3奖" + num32.ToString() + "注";
                }
                if (num33 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选4中2奖" + num33.ToString() + "注";
                }
                if (num34 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选3中3奖" + num34.ToString() + "注";
                }
                if (num35 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选3中2奖" + num35.ToString() + "注";
                }
                if (num36 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选2中2奖" + num36.ToString() + "注";
                }
                if (num37 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选2中2奖" + num37.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num38;
            }

            private double ComputeWin_1(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int Description1)
            {
                Description1 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                if (WinNumber.IndexOf(Number) >= 0)
                {
                    Description1++;
                    num += WinMoney1;
                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                }
                return num;
            }

            private double ComputeWin_10(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, ref int Description1, ref int Description2, ref int Description3, ref int Description4, ref int Description5, ref int Description6, ref int Description7)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                Description4 = 0;
                Description5 = 0;
                Description6 = 0;
                Description7 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[10];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d\s)(?<R7>\d\d\s)(?<R8>\d\d\s)(?<R9>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 10; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 10:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 9:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 8:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;

                    case 7:
                        Description4++;
                        num += WinMoney4;
                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                        return num;

                    case 6:
                        Description5++;
                        num += WinMoney5;
                        WinMoneyNoWithTax += WinMoneyNoWithTax5;
                        return num;

                    case 5:
                        Description6++;
                        num += WinMoney6;
                        WinMoneyNoWithTax += WinMoneyNoWithTax6;
                        return num;

                    case 0:
                        Description7++;
                        num += WinMoney7;
                        WinMoneyNoWithTax += WinMoneyNoWithTax7;
                        return num;
                }
                return num;
            }

            private double ComputeWin_2(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int Description1)
            {
                Description1 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[2];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                if (num2 == 2)
                {
                    Description1++;
                    num += WinMoney1;
                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                }
                return num;
            }

            private double ComputeWin_3(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int Description1, ref int Description2)
            {
                Description1 = 0;
                Description2 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[3];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 3:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 2:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;
                }
                return num;
            }

            private double ComputeWin_4(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, ref int Description1, ref int Description2, ref int Description3)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[4];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 4:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 3:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 2:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;
                }
                return num;
            }

            private double ComputeWin_5(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, ref int Description1, ref int Description2, ref int Description3)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[5];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 5:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 4:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 3:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;
                }
                return num;
            }

            private double ComputeWin_6(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, ref int Description1, ref int Description2, ref int Description3, ref int Description4)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                Description4 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[6];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 6; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 6:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 5:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 4:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;

                    case 3:
                        Description4++;
                        num += WinMoney4;
                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                        return num;
                }
                return num;
            }

            private double ComputeWin_7(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, ref int Description1, ref int Description2, ref int Description3, ref int Description4)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                Description4 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[7];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 7; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 7:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 6:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 5:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;

                    case 4:
                        Description4++;
                        num += WinMoney4;
                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                        return num;
                }
                return num;
            }

            private double ComputeWin_8(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, ref int Description1, ref int Description2, ref int Description3, ref int Description4, ref int Description5, ref int Description6)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                Description4 = 0;
                Description5 = 0;
                Description6 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[8];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d\s)(?<R7>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 8; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 8:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 7:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 6:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;

                    case 5:
                        Description4++;
                        num += WinMoney4;
                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                        return num;

                    case 4:
                        Description5++;
                        num += WinMoney5;
                        WinMoneyNoWithTax += WinMoneyNoWithTax5;
                        return num;

                    case 0:
                        Description6++;
                        num += WinMoney6;
                        WinMoneyNoWithTax += WinMoneyNoWithTax6;
                        return num;
                }
                return num;
            }

            private double ComputeWin_9(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, ref int Description1, ref int Description2, ref int Description3, ref int Description4, ref int Description5, ref int Description6)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                Description4 = 0;
                Description5 = 0;
                Description6 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[9];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d\s)(?<R7>\d\d\s)(?<R8>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 9; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 9:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 8:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 7:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;

                    case 6:
                        Description4++;
                        num += WinMoney4;
                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                        return num;

                    case 5:
                        Description5++;
                        num += WinMoney5;
                        WinMoneyNoWithTax += WinMoneyNoWithTax5;
                        return num;

                    case 0:
                        Description6++;
                        num += WinMoney6;
                        WinMoneyNoWithTax += WinMoneyNoWithTax6;
                        return num;
                }
                return num;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 80)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xd49, "代购") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 1)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; (i < strArray.Length) && (i < 10); i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                return new string[] { CanonicalNumber };
            }
        }

        public class SHSSL : Lottery.LotteryBase
        {
            public const string Code = "SHSSL";
            public const int ID = 0x1d;
            public const double MaxMoney = 20000.0;
            public const string Name = "上海时时乐";
            public const int PlayType_H1D = 0xb62;
            public const int PlayType_H1F = 0xb63;
            public const int PlayType_H2D = 0xb5e;
            public const int PlayType_H2F = 0xb5f;
            public const int PlayType_Mixed = 0xb54;
            public const int PlayType_Q1D = 0xb60;
            public const int PlayType_Q1F = 0xb61;
            public const int PlayType_Q2D = 0xb5c;
            public const int PlayType_Q2F = 0xb5d;
            public const int PlayType_ZhiD = 0xb55;
            public const int PlayType_ZhiF = 0xb56;
            public const int PlayType_ZhiH = 0xb5a;
            public const int PlayType_Zu3F = 0xb59;
            public const int PlayType_Zu6F = 0xb58;
            public const int PlayType_ZuD = 0xb57;
            public const int PlayType_ZuH = 0xb5b;
            public const string sID = "29";

            public SHSSL()
            {
                base.id = 0x1d;
                base.name = "上海时时乐";
                base.code = "SHSSL";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0xb54)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if ((PlayType == 0xb55) || (PlayType == 0xb56))
                {
                    return this.AnalyseScheme_Zhi(Content, PlayType);
                }
                if ((PlayType == 0xb57) || (PlayType == 0xb58))
                {
                    return this.AnalyseScheme_Zu3D_Zu6(Content, PlayType);
                }
                if (PlayType == 0xb59)
                {
                    return this.AnalyseScheme_Zu3F(Content, PlayType);
                }
                if (PlayType == 0xb5a)
                {
                    return this.AnalyseScheme_ZhiH(Content, PlayType);
                }
                if (PlayType == 0xb5b)
                {
                    return this.AnalyseScheme_ZuH(Content, PlayType);
                }
                if (((PlayType == 0xb5c) || (PlayType == 0xb5d)) || ((PlayType == 0xb5e) || (PlayType == 0xb5f)))
                {
                    return this.AnalyseScheme_2(Content, PlayType);
                }
                if (((PlayType != 0xb60) && (PlayType != 0xb61)) && ((PlayType != 0xb62) && (PlayType != 0xb63)))
                {
                    return "";
                }
                return this.AnalyseScheme_1(Content, PlayType);
            }

            private string AnalyseScheme_1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if ((PlayType == 0xb60) || (PlayType == 0xb62))
                {
                    str2 = @"([\d]){1}";
                }
                else
                {
                    str2 = @"([\d]){1,10}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_1(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= (((PlayType == 0xb60) || (PlayType == 0xb62)) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if ((PlayType == 0xb5c) || (PlayType == 0xb5e))
                {
                    str2 = @"([\d]){2}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){2}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= (((PlayType == 0xb5c) || (PlayType == 0xb5e)) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[直选单式]"))
                    {
                        str3 = this.AnalyseScheme_Zhi(strArray[i], 0xb55);
                    }
                    if (strArray[i].StartsWith("[直选复式]"))
                    {
                        str3 = this.AnalyseScheme_Zhi(strArray[i], 0xb56);
                    }
                    if (strArray[i].StartsWith("[组选单式]"))
                    {
                        str3 = this.AnalyseScheme_Zu3D_Zu6(strArray[i], 0xb57);
                    }
                    if (strArray[i].StartsWith("[组选6复式]"))
                    {
                        str3 = this.AnalyseScheme_Zu3D_Zu6(strArray[i], 0xb58);
                    }
                    if (strArray[i].StartsWith("[组选3复式]"))
                    {
                        str3 = this.AnalyseScheme_Zu3F(strArray[i], 0xb59);
                    }
                    if (strArray[i].StartsWith("[直选和值]"))
                    {
                        str3 = this.AnalyseScheme_ZhiH(strArray[i], 0xb5a);
                    }
                    if (strArray[i].StartsWith("[组选和值]"))
                    {
                        str3 = this.AnalyseScheme_ZuH(strArray[i], 0xb5b);
                    }
                    if (strArray[i].StartsWith("[前2单式]"))
                    {
                        str3 = this.AnalyseScheme_2(strArray[i], 0xb5c);
                    }
                    if (strArray[i].StartsWith("[前2复式]"))
                    {
                        str3 = this.AnalyseScheme_2(strArray[i], 0xb5d);
                    }
                    if (strArray[i].StartsWith("[后2单式]"))
                    {
                        str3 = this.AnalyseScheme_2(strArray[i], 0xb5e);
                    }
                    if (strArray[i].StartsWith("[后2复式]"))
                    {
                        str3 = this.AnalyseScheme_2(strArray[i], 0xb5f);
                    }
                    if (strArray[i].StartsWith("[前1单式]"))
                    {
                        str3 = this.AnalyseScheme_1(strArray[i], 0xb60);
                    }
                    if (strArray[i].StartsWith("[前1复式]"))
                    {
                        str3 = this.AnalyseScheme_1(strArray[i], 0xb61);
                    }
                    if (strArray[i].StartsWith("[后1单式]"))
                    {
                        str3 = this.AnalyseScheme_1(strArray[i], 0xb62);
                    }
                    if (strArray[i].StartsWith("[后1复式]"))
                    {
                        str3 = this.AnalyseScheme_1(strArray[i], 0xb63);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xb55)
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){3}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xb55) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3D_Zu6(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xb57)
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"([\d]){3,10}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3D_Zu6(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xb57) ? 1 : 2)))
                        {
                            if (this.FilterRepeated(base.Sort(match.Value)).Length == 2)
                            {
                                if (PlayType != 0xb58)
                                {
                                    str = str + match.Value + "|1\n";
                                }
                            }
                            else
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_DYJ_ZhiH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_DYJ_ZuH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                str = str + strArray2[j] + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_ZhiH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                str = str + strArray2[j] + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_ZuH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                str = str + strArray2[j] + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronTicket_2D(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if ((PlayType == 0xb5c) || (PlayType == 0xb5e))
                {
                    str2 = @"([\d]){2}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){2}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                str = str + strArray2[j] + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronTicket_2F(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if ((PlayType == 0xb5c) || (PlayType == 0xb5e))
                {
                    str2 = @"([\d]){2}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){2}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronTicket_DYJ_2D(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if ((PlayType == 0xb5c) || (PlayType == 0xb5e))
                {
                    str2 = @"([\d]){2}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){2}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronTicket_DYJ_2F(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if ((PlayType == 0xb5c) || (PlayType == 0xb5e))
                {
                    str2 = @"([\d]){2}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){2}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronTicket_DYJ_Zu3F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronTicket_DYJ_Zu6F(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xb57)
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"([\d]){3,10}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3D_Zu6(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xb57) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronTicket_Zu3F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                str = str + strArray2[j] + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronTicket_Zu6F(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xb57)
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"([\d]){3,10}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3D_Zu6(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xb57) ? 1 : 2)))
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                str = str + strArray2[j] + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_Zhi(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 3; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xb54) && (play_type <= 0xb63));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 14))
                {
                    return -3.0;
                }
                int winCount = 0;
                int num2 = 0;
                int num3 = 0;
                if (PlayType == 0xb54)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13]);
                }
                if ((PlayType == 0xb55) || (PlayType == 0xb56))
                {
                    return this.ComputeWin_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref winCount);
                }
                if ((PlayType == 0xb57) || (PlayType == 0xb58))
                {
                    return this.ComputeWin_Zu3D_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], ref num2, ref num3);
                }
                if (PlayType == 0xb59)
                {
                    return this.ComputeWin_Zu3F(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref winCount);
                }
                if (PlayType == 0xb5a)
                {
                    return this.ComputeWin_ZhiH(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref winCount);
                }
                if (PlayType == 0xb5b)
                {
                    return this.ComputeWin_ZuH(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], ref num2, ref num3);
                }
                if ((PlayType == 0xb5c) || (PlayType == 0xb5d))
                {
                    return this.ComputeWin_Q2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[6], WinMoneyList[7], ref winCount);
                }
                if ((PlayType == 0xb5e) || (PlayType == 0xb5f))
                {
                    return this.ComputeWin_H2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], ref winCount);
                }
                if ((PlayType == 0xb60) || (PlayType == 0xb61))
                {
                    return this.ComputeWin_Q1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11], ref winCount);
                }
                if ((PlayType != 0xb62) && (PlayType != 0xb63))
                {
                    return -4.0;
                }
                return this.ComputeWin_H1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref winCount);
            }

            private double ComputeWin_H1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(2, 1);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 1) && (strArray2[j] == WinNumber))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "后1奖" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_H2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(1, 2);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (strArray2[j] == WinNumber))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "后2奖" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int winCount = 0;
                    int num11 = 0;
                    int num12 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[直选单式]") || strArray[i].StartsWith("[直选复式]"))
                    {
                        num += this.ComputeWin_Zhi(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += winCount;
                    }
                    else if (strArray[i].StartsWith("[组选单式]") || strArray[i].StartsWith("[组选6复式]"))
                    {
                        num += this.ComputeWin_Zu3D_Zu6(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, WinMoney3, WinMoneyNoWithTax3, ref num11, ref num12);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += num11;
                        num4 += num12;
                    }
                    else if (strArray[i].StartsWith("[组选3复式]"))
                    {
                        num += this.ComputeWin_Zu3F(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += winCount;
                    }
                    else if (strArray[i].StartsWith("[直选和值]"))
                    {
                        num += this.ComputeWin_ZhiH(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += winCount;
                    }
                    else if (strArray[i].StartsWith("[组选和值]"))
                    {
                        num += this.ComputeWin_ZuH(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, WinMoney3, WinMoneyNoWithTax3, ref num11, ref num12);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += num11;
                        num4 += num12;
                    }
                    else if (strArray[i].StartsWith("[前2单式]") || strArray[i].StartsWith("[前2复式]"))
                    {
                        num += this.ComputeWin_Q2(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney4, WinMoneyNoWithTax4, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num5 += winCount;
                    }
                    else if (strArray[i].StartsWith("[后2单式]") || strArray[i].StartsWith("[后2复式]"))
                    {
                        num += this.ComputeWin_H2(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += winCount;
                    }
                    else if (strArray[i].StartsWith("[前1单式]") || strArray[i].StartsWith("[前1复式]"))
                    {
                        num += this.ComputeWin_Q1(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney6, WinMoneyNoWithTax6, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num7 += winCount;
                    }
                    else if (strArray[i].StartsWith("[后1单式]") || strArray[i].StartsWith("[后1复式]"))
                    {
                        num += this.ComputeWin_H1(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney7, WinMoneyNoWithTax7, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num8 += winCount;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "单选奖" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "组3奖" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "组6奖" + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "前2奖" + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "后2奖" + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "前1奖" + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "后1奖" + num8.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_Q1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 1);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 1) && (strArray2[j] == WinNumber))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "前1奖" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_Q2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 2);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (strArray2[j] == WinNumber))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "前2奖" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "直选奖" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_ZhiH(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiH(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "单选奖" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_Zu3D_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_Zu3, ref int WinCount_Zu6)
            {
                WinCount_Zu3 = 0;
                WinCount_Zu6 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    if (strArray[i].Length >= 3)
                    {
                        if (this.FilterRepeated(base.Sort(strArray[i])).Length == 2)
                        {
                            if (base.Sort(strArray[i]) == base.Sort(WinNumber))
                            {
                                WinCount_Zu3++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                        else
                        {
                            string[] strArray2 = this.ToSingle_Zu3D_Zu6(strArray[i], ref canonicalNumber);
                            if ((strArray2 != null) && (strArray2.Length >= 1))
                            {
                                for (int j = 0; j < strArray2.Length; j++)
                                {
                                    if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                                    {
                                        WinCount_Zu6++;
                                        num += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                    }
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_Zu3 > 0)
                {
                    base.MergeWinDescription(ref Description, "组选3奖" + ((int) WinCount_Zu3).ToString() + "注");
                }
                if (WinCount_Zu6 > 0)
                {
                    base.MergeWinDescription(ref Description, "组选6奖" + ((int) WinCount_Zu6).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_Zu3F(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu3F(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "组选3奖" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_ZuH(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_Zu3, ref int WinCount_Zu6)
            {
                WinCount_Zu3 = 0;
                WinCount_Zu6 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuH(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (this.FilterRepeated(strArray2[j]).Length == 2)
                                {
                                    WinCount_Zu3++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    WinCount_Zu6++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_Zu3 > 0)
                {
                    base.MergeWinDescription(ref Description, "组选3奖" + ((int) WinCount_Zu3).ToString() + "注");
                }
                if (WinCount_Zu6 > 0)
                {
                    base.MergeWinDescription(ref Description, "组选6奖" + ((int) WinCount_Zu6).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private string ConvertFormatToElectronTicket_DYJ_1(int PlayTypeID, string Number)
            {
                string str = "";
                if (Number.EndsWith("\n"))
                {
                    Number = Number.Substring(0, Number.Length - 1);
                }
                string[] strArray = Number.Split(new char[] { '\n' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    str = str + "1D|";
                    if ((PlayTypeID == 0xb62) || (PlayTypeID == 0xb63))
                    {
                        str = str + "-,-,";
                    }
                    str = str + strArray[i].ToString();
                    if ((PlayTypeID == 0xb60) || (PlayTypeID == 0xb61))
                    {
                        str = str + ",-,-";
                    }
                    str = str + ";\n";
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str.Replace("-", "_");
            }

            private string ConvertFormatToElectronTicket_DYJ_2D(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (PlayTypeID == 0xb5c)
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        str = str + "2D|";
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        str = str + "-;\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                else
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int k = 0; k < strArray2.Length; k++)
                    {
                        str = str + "2D|" + "-,";
                        for (int m = 0; m < strArray2[k].Length; m++)
                        {
                            str = str + strArray2[k].Substring(m, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + ";\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str.Replace("-", "_");
            }

            private string ConvertFormatToElectronTicket_DYJ_2F(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string[] strArray = new string[2];
                string str = "";
                str = str + "2D|";
                if (PlayTypeID == 0xb5f)
                {
                    str = str + "-,";
                }
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        return "";
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            return "";
                        }
                    }
                    str = str + strArray[i] + ",";
                }
                if (PlayTypeID == 0xb5d)
                {
                    str = str + "-,";
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return (str.Replace("-", "_") + ";");
            }

            private string ConvertFormatToElectronTicket_DYJ_D(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (((PlayTypeID == 0xb55) || (PlayTypeID == 0xb58)) || (((PlayTypeID == 0xb59) || (PlayTypeID == 0xb5b)) || (PlayTypeID == 0xb57)))
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        if (PlayTypeID == 0xb55)
                        {
                            str = str + "1|";
                        }
                        else if (PlayTypeID == 0xb58)
                        {
                            str = str + "F6|";
                        }
                        else if (PlayTypeID == 0xb59)
                        {
                            str = str + "F3|";
                        }
                        else if (PlayTypeID == 0xb5b)
                        {
                            str = str + "6|";
                        }
                        else if (PlayTypeID == 0xb57)
                        {
                            str = str + "6|";
                        }
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + ";\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                else if (PlayTypeID == 0xb5a)
                {
                    str = str + "S1|" + Number + ";";
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str.Replace("-", "_");
            }

            private string ConvertFormatToElectronTicket_DYJ_F(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string[] strArray = new string[3];
                string str = "";
                if (PlayTypeID == 0xb56)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                    str = str + "1|";
                    for (int i = 0; i < 3; i++)
                    {
                        strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (strArray[i] == "")
                        {
                            return "";
                        }
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                            if (strArray[i].Length > 1)
                            {
                                strArray[i] = this.FilterRepeated(strArray[i]);
                            }
                            if (strArray[i] == "")
                            {
                                return "";
                            }
                        }
                        str = str + strArray[i] + ",";
                    }
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return (str.Replace("-", "_") + ";");
            }

            private string ConvertFormatToElectronTicket_HPSH_1(int PlayTypeID, string Number)
            {
                string str = "";
                if (Number.EndsWith("\n"))
                {
                    Number = Number.Substring(0, Number.Length - 1);
                }
                string[] strArray = Number.Split(new char[] { '\n' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    if ((PlayTypeID == 0xb62) || (PlayTypeID == 0xb63))
                    {
                        str = str + "-,-,";
                    }
                    str = str + strArray[i].ToString();
                    if ((PlayTypeID == 0xb60) || (PlayTypeID == 0xb61))
                    {
                        str = str + ",-,-";
                    }
                    str = str + "\n";
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str.Replace("-", "_");
            }

            private string ConvertFormatToElectronTicket_HPSH_2D(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (PlayTypeID == 0xb5c)
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        str = str + "-\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                else
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int k = 0; k < strArray2.Length; k++)
                    {
                        str = str + "-,";
                        for (int m = 0; m < strArray2[k].Length; m++)
                        {
                            str = str + strArray2[k].Substring(m, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str.Replace("-", "_");
            }

            private string ConvertFormatToElectronTicket_HPSH_2F(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string[] strArray = new string[2];
                string str = "";
                if (PlayTypeID == 0xb5f)
                {
                    str = "-,";
                }
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        return "";
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            return "";
                        }
                    }
                    str = str + strArray[i] + ",";
                }
                if (PlayTypeID == 0xb5d)
                {
                    str = str + "-,";
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str.Replace("-", "_");
            }

            private string ConvertFormatToElectronTicket_HPSH_D(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((((PlayTypeID == 0xb55) || (PlayTypeID == 0xb5a)) || ((PlayTypeID == 0xb58) || (PlayTypeID == 0xb59))) || ((PlayTypeID == 0xb5b) || (PlayTypeID == 0xb57)))
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str.Replace("-", "_");
            }

            private string ConvertFormatToElectronTicket_HPSH_F(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string[] strArray = new string[3];
                string str = "";
                if (PlayTypeID == 0xb56)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                    for (int i = 0; i < 3; i++)
                    {
                        strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (strArray[i] == "")
                        {
                            return "";
                        }
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                            if (strArray[i].Length > 1)
                            {
                                strArray[i] = this.FilterRepeated(strArray[i]);
                            }
                            if (strArray[i] == "")
                            {
                                return "";
                            }
                        }
                        str = str + strArray[i] + ",";
                    }
                }
                if (str.EndsWith(","))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str.Replace("-", "_");
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("-0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xb54, "混合投注"), new Lottery.PlayType(0xb55, "直选单式"), new Lottery.PlayType(0xb56, "直选复式"), new Lottery.PlayType(0xb57, "组选单式"), new Lottery.PlayType(0xb58, "组选6复式"), new Lottery.PlayType(0xb59, "组选3复式"), new Lottery.PlayType(0xb5a, "直选和值"), new Lottery.PlayType(0xb5b, "组选和值"), new Lottery.PlayType(0xb5c, "前2单式"), new Lottery.PlayType(0xb5d, "前2复式"), new Lottery.PlayType(0xb5e, "后2单式"), new Lottery.PlayType(0xb5f, "后2复式"), new Lottery.PlayType(0xb60, "前1单式"), new Lottery.PlayType(0xb61, "前1复式"), new Lottery.PlayType(0xb62, "后1单式"), new Lottery.PlayType(0xb63, "后1复式") };
            }

            private string HPSH_ConvertFormatToElectronTicket(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                foreach (string str2 in Number.Split(new char[] { ',' }))
                {
                    if (str2.Length > 1)
                    {
                        str = str + "(" + str2 + ")";
                    }
                    else if (!(str2 == "_"))
                    {
                        str = str + str2;
                    }
                }
                return str;
            }

            private string HPSH_ConvertFormatToElectronTicket_1F(int PlayTypeID, string Number)
            {
                return Number.Trim();
            }

            public override string HPSH_ToElectronicTicket(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                if ((PlayTypeID == 0xb55) || (PlayTypeID == 0xb5a))
                {
                    return this.HPSH_ToElectronicTicket_D(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (PlayTypeID == 0xb56)
                {
                    return this.HPSH_ToElectronicTicket_F(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if (((PlayTypeID == 0xb57) || (PlayTypeID == 0xb5b)) || ((PlayTypeID == 0xb58) || (PlayTypeID == 0xb59)))
                {
                    return this.HPSH_ToElectronicTicket_ZuD(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if ((((PlayTypeID == 0xb5c) || (PlayTypeID == 0xb5e)) || ((PlayTypeID == 0xb60) || (PlayTypeID == 0xb62))) || ((PlayTypeID == 0xb5d) || (PlayTypeID == 0xb5f)))
                {
                    return this.HPSH_ToElectronicTicket_2D(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
                }
                if ((PlayTypeID != 0xb61) && (PlayTypeID != 0xb63))
                {
                    return "";
                }
                return this.HPSH_ToElectronicTicket_1F(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
            }

            private string HPSH_ToElectronicTicket_1F(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPSH_ConvertFormatToElectronTicket_1F(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            private string HPSH_ToElectronicTicket_2D(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPSH_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            private string HPSH_ToElectronicTicket_D(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPSH_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = 0xb55;
                return "";
            }

            private string HPSH_ToElectronicTicket_F(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPSH_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = 0xb56;
                return "";
            }

            private string HPSH_ToElectronicTicket_ZuD(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPSH_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = 0xb57;
                return "";
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0xb55)
                {
                    return this.ToElectronicTicket_DYJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb56)
                {
                    return this.ToElectronicTicket_DYJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb57)
                {
                    return this.ToElectronicTicket_DYJ_ZuD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb5a)
                {
                    return this.ToElectronicTicket_DYJ_ZhiH(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb5b)
                {
                    return this.ToElectronicTicket_DYJ_ZuH(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb58)
                {
                    return this.ToElectronicTicket_DYJ_Zu6F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb59)
                {
                    return this.ToElectronicTicket_DYJ_Zu3F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if ((PlayTypeID == 0xb5c) || (PlayTypeID == 0xb5e))
                {
                    return this.ToElectronicTicket_DYJ_2D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if ((PlayTypeID == 0xb5d) || (PlayTypeID == 0xb5f))
                {
                    return this.ToElectronicTicket_DYJ_2F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if ((PlayTypeID == 0xb60) || (PlayTypeID == 0xb62))
                {
                    return this.ToElectronicTicket_DYJ_1D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if ((PlayTypeID != 0xb61) && (PlayTypeID != 0xb63))
                {
                    return null;
                }
                return this.ToElectronicTicket_DYJ_1F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_1D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_1(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_DYJ_1(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_1F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_1(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        if (strArray[k].ToString().Split(new char[] { '|' })[0].Length > 1)
                        {
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0xd0, this.ConvertFormatToElectronTicket_DYJ_1(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_2D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronTicket_DYJ_2D(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_DYJ_2D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_2F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronTicket_DYJ_2F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        if (strArray[k].ToString().Split(new char[] { '|' })[0].Length > 2)
                        {
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0xd0, this.ConvertFormatToElectronTicket_DYJ_2F(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_DYJ_D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd0, this.ConvertFormatToElectronTicket_DYJ_F(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_ZhiH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_DYJ_ZhiH(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_DYJ_D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_Zu3F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronTicket_DYJ_Zu3F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_DYJ_D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_Zu6F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronTicket_DYJ_Zu6F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_DYJ_D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_ZuD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_DYJ_D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_ZuH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_DYJ_ZuH(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_DYJ_D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0xb55)
                {
                    return this.ToElectronicTicket_HPSH_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb56)
                {
                    return this.ToElectronicTicket_HPSH_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb57)
                {
                    return this.ToElectronicTicket_HPSH_ZuD(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb5a)
                {
                    return this.ToElectronicTicket_HPSH_ZhiH(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb5b)
                {
                    return this.ToElectronicTicket_HPSH_ZuH(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb58)
                {
                    return this.ToElectronicTicket_HPSH_Zu6F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xb59)
                {
                    return this.ToElectronicTicket_HPSH_Zu3F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if ((PlayTypeID == 0xb5c) || (PlayTypeID == 0xb5e))
                {
                    return this.ToElectronicTicket_HPSH_2D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if ((PlayTypeID == 0xb5d) || (PlayTypeID == 0xb5f))
                {
                    return this.ToElectronicTicket_HPSH_2F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if ((PlayTypeID == 0xb60) || (PlayTypeID == 0xb62))
                {
                    return this.ToElectronicTicket_HPSH_1D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if ((PlayTypeID != 0xb61) && (PlayTypeID != 0xb63))
                {
                    return null;
                }
                return this.ToElectronicTicket_HPSH_1F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_1D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_1(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_HPSH_1(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_1F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_1(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd0, this.ConvertFormatToElectronTicket_HPSH_1(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_2D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronTicket_2D(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_HPSH_2D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_2F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronTicket_2F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd0, this.ConvertFormatToElectronTicket_HPSH_2F(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_HPSH_D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd0, this.ConvertFormatToElectronTicket_HPSH_F(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_ZhiH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_ZhiH(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_HPSH_D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_Zu3F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronTicket_Zu3F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_HPSH_D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_Zu6F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronTicket_Zu6F(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_HPSH_D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_ZuD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_HPSH_D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_ZuH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_ZuH(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_HPSH_D(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0xb54)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0xb55) || (PlayType == 0xb56))
                {
                    return this.ToSingle_Zhi(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0xb57) || (PlayType == 0xb58))
                {
                    return this.ToSingle_Zu3D_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xb59)
                {
                    return this.ToSingle_Zu3F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xb5a)
                {
                    return this.ToSingle_ZhiH(Number, ref CanonicalNumber);
                }
                if (PlayType == 0xb5b)
                {
                    return this.ToSingle_ZuH(Number, ref CanonicalNumber);
                }
                if (((PlayType == 0xb5c) || (PlayType == 0xb5d)) || ((PlayType == 0xb5e) || (PlayType == 0xb5f)))
                {
                    return this.ToSingle_2(Number, ref CanonicalNumber);
                }
                if (((PlayType != 0xb60) && (PlayType != 0xb61)) && ((PlayType != 0xb62) && (PlayType != 0xb63)))
                {
                    return null;
                }
                return this.ToSingle_1(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_1(string Number, ref string CanonicalNumber)
            {
                char[] chArray = this.FilterRepeated(Number.Trim()).ToCharArray();
                CanonicalNumber = "";
                if (chArray.Length < 1)
                {
                    CanonicalNumber = "";
                    return null;
                }
                string[] strArray = new string[chArray.Length];
                for (int i = 0; i < chArray.Length; i++)
                {
                    strArray[i] = chArray[i].ToString();
                    CanonicalNumber = CanonicalNumber + chArray[i].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[2];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        list.Add(str2);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[直选单式]") || Number.StartsWith("[直选复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_Zhi(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[组选单式]") || Number.StartsWith("[组选6复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_Zu3D_Zu6(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[组选3复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_Zu3F(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[直选和值]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_ZhiH(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[组选和值]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_ZuH(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if ((Number.StartsWith("[前2单式]") || Number.StartsWith("[前2复式]")) || (Number.StartsWith("[后2单式]") || Number.StartsWith("[后2复式]")))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_2(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if ((!Number.StartsWith("[前1单式]") && !Number.StartsWith("[前1复式]")) && (!Number.StartsWith("[后1单式]") && !Number.StartsWith("[后1复式]")))
                {
                    return null;
                }
                return base.MergeLotteryNumberPreFix(this.ToSingle_1(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
            }

            private string[] ToSingle_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[3];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            list.Add(str3);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZhiH(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 0) || (num > 0x1b))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        for (int m = 0; m <= 9; m++)
                        {
                            if (((i + k) + m) == num)
                            {
                                list.Add(i.ToString() + k.ToString() + m.ToString());
                            }
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3D_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                if (length == 2)
                {
                    for (int j = 0; j < (length - 1); j++)
                    {
                        for (int k = j + 1; k < length; k++)
                        {
                            list.Add(chArray[j].ToString() + chArray[j].ToString() + chArray[k].ToString());
                            list.Add(chArray[j].ToString() + chArray[k].ToString() + chArray[k].ToString());
                        }
                    }
                }
                else
                {
                    for (int m = 0; m < (length - 2); m++)
                    {
                        for (int n = m + 1; n < (length - 1); n++)
                        {
                            for (int num6 = n + 1; num6 < length; num6++)
                            {
                                list.Add(chArray[m].ToString() + chArray[n].ToString() + chArray[num6].ToString());
                            }
                        }
                    }
                }
                string[] strArray = new string[list.Count];
                for (int i = 0; i < list.Count; i++)
                {
                    strArray[i] = list[i].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[i].ToString() + chArray[k].ToString());
                        list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZuH(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                ArrayList list = new ArrayList();
                if ((num < 1) || (num > 0x1a))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        if ((i != k) && (((i + i) + k) == num))
                        {
                            list.Add(i.ToString() + i.ToString() + k.ToString());
                        }
                    }
                }
                if ((num >= 3) && (num <= 0x18))
                {
                    for (int m = 0; m <= 7; m++)
                    {
                        for (int n = m + 1; n <= 8; n++)
                        {
                            for (int num6 = n + 1; num6 <= 9; num6++)
                            {
                                if (((m + n) + num6) == num)
                                {
                                    list.Add(m.ToString() + n.ToString() + num6.ToString());
                                }
                            }
                        }
                    }
                }
                CanonicalNumber = num.ToString();
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }
        }

        public class ShXKLPK : Lottery.LotteryBase
        {
            public const string Code = "ShXKLPK";
            public const int ID = 0x39;
            public const double MaxMoney = 200000.0;
            public const string Name = "山西快乐扑克";
            public const int PlayType_Mixed = 0x1644;
            public const int PlayType_RX1_D = 0x1645;
            public const int PlayType_RX1_F = 0x1646;
            public const int PlayType_RX2_D = 0x1647;
            public const int PlayType_RX2_F = 0x1648;
            public const int PlayType_RX3_D = 0x1649;
            public const int PlayType_RX3_F = 0x164a;
            public const int PlayType_X4_ZhiD = 0x164f;
            public const int PlayType_X4_ZhiF = 0x1650;
            public const int PlayType_X4_Zu12 = 0x164c;
            public const int PlayType_X4_Zu24 = 0x164b;
            public const int PlayType_X4_Zu4 = 0x164e;
            public const int PlayType_X4_Zu6 = 0x164d;
            public const string sID = "57";

            public ShXKLPK()
            {
                base.id = 0x39;
                base.name = "山西快乐扑克";
                base.code = "ShXKLPK";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x1644)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if ((PlayType == 0x1645) || (PlayType == 0x1646))
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if ((PlayType == 0x1647) || (PlayType == 0x1648))
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if ((PlayType == 0x1649) || (PlayType == 0x164a))
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if (PlayType == 0x164b)
                {
                    return this.AnalyseScheme_X4_Zu24(Content, PlayType);
                }
                if (PlayType == 0x164c)
                {
                    return this.AnalyseScheme_X4_Zu12(Content, PlayType);
                }
                if (PlayType == 0x164d)
                {
                    return this.AnalyseScheme_X4_Zu6(Content, PlayType);
                }
                if (PlayType == 0x164e)
                {
                    return this.AnalyseScheme_X4_Zu4(Content, PlayType);
                }
                if ((PlayType != 0x164f) && (PlayType != 0x1650))
                {
                    return "";
                }
                return this.AnalyseScheme_X4_Zhi(Content, PlayType);
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[任选一单式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x1645);
                    }
                    if (strArray[i].StartsWith("[任选一复式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x1646);
                    }
                    if (strArray[i].StartsWith("[任选二单式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x1647);
                    }
                    if (strArray[i].StartsWith("[任选二复式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x1648);
                    }
                    if (strArray[i].StartsWith("[任选三单式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x1649);
                    }
                    if (strArray[i].StartsWith("[任选三复式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x164a);
                    }
                    if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu24(base.FilterPreFix(strArray[i]), 0x164b);
                    }
                    if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu12(base.FilterPreFix(strArray[i]), 0x164c);
                    }
                    if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu6(base.FilterPreFix(strArray[i]), 0x164d);
                    }
                    if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu4(base.FilterPreFix(strArray[i]), 0x164e);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1645)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x1646))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x1645))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1647)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x1648))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x1647))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1649)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x164a))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x1649))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x164f)
                {
                    str2 = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i].ToString());
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x164f) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu12(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu12(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu24(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3,12}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu24(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu4(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu6(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu6(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex("((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                return "";
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1644) && (play_type <= 0x1650));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 20))
                {
                    return -3.0;
                }
                if (!this.AnalyseWinNumber(WinNumber))
                {
                    return -5.0;
                }
                int winCount = 0;
                int num2 = 0;
                int num3 = 0;
                if (PlayType == 0x1644)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13]);
                }
                if ((PlayType == 0x1645) || (PlayType == 0x1646))
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref winCount);
                }
                if ((PlayType == 0x1647) || (PlayType == 0x1648))
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref winCount);
                }
                if ((PlayType == 0x1649) || (PlayType == 0x164a))
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num2, ref num3);
                }
                if ((PlayType == 0x164f) || (PlayType == 0x1650))
                {
                    return this.ComputeWin_X4_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], ref num2, ref num3);
                }
                if (PlayType == 0x164b)
                {
                    return this.ComputeWin_X4_Zu24(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref winCount);
                }
                if (PlayType == 0x164c)
                {
                    return this.ComputeWin_X4_Zu12(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], ref winCount);
                }
                if (PlayType == 0x164d)
                {
                    return this.ComputeWin_X4_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], ref winCount);
                }
                if (PlayType == 0x164e)
                {
                    return this.ComputeWin_X4_Zu4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x12], WinMoneyList[0x13], ref winCount);
                }
                return -4.0;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8, double WinMoney9, double WinMoneyNoWithTax9, double WinMoney10, double WinMoneyNoWithTax10)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int winCount = 0;
                    int num14 = 0;
                    int num15 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[任选一单式]") || strArray[i].StartsWith("[任选一复式]"))
                    {
                        num += this.ComputeWin_RX1(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选二单式]") || strArray[i].StartsWith("[任选二复式]"))
                    {
                        num += this.ComputeWin_RX2(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选三单式]") || strArray[i].StartsWith("[任选三复式]"))
                    {
                        num += this.ComputeWin_RX3(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num4 += num14;
                        num5 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四直选单式]") || strArray[i].StartsWith("[选四直选复式]"))
                    {
                        num += this.ComputeWin_X4_Zhi(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, WinMoney6, WinMoneyNoWithTax6, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += num14;
                        num7 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        num += this.ComputeWin_X4_Zu24(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney7, WinMoneyNoWithTax7, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num8 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        num += this.ComputeWin_X4_Zu12(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney8, WinMoneyNoWithTax8, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num9 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        num += this.ComputeWin_X4_Zu6(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney9, WinMoneyNoWithTax9, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num10 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        num += this.ComputeWin_X4_Zu4(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney10, WinMoneyNoWithTax10, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num11 += winCount;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选一" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选二" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中4 " + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中3 " + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选24 " + num8.ToString() + "注");
                }
                if (num9 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选12 " + num9.ToString() + "注");
                }
                if (num10 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选6 " + num10.ToString() + "注");
                }
                if (num11 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选4 " + num11.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        WinCount++;
                                        num += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选一" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                int num = 0;
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                if (num == 2)
                                {
                                    WinCount++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选二" + ((int) WinCount).ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 3:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 2:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 4:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 3:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中4 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中3 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zu12(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu12(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选12 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu24(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu24(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选24 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选4 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu6(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选6 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private string FilterRepeated(string NumberPart)
            {
                string number = "";
                string[] strArray = NumberPart.Split(new char[] { ',' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (("23456789AJQK10".IndexOf(strArray[i]) >= 0) && (number.IndexOf(strArray[i]) == -1))
                    {
                        number = number + strArray[i] + ",";
                    }
                }
                number = number.Substring(0, number.Length - 1);
                return this.SortKLPK(number);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1644, "混合投注"), new Lottery.PlayType(0x1645, "任选一单式"), new Lottery.PlayType(0x1646, "任选一复式"), new Lottery.PlayType(0x1647, "任选二单式"), new Lottery.PlayType(0x1648, "任选二复式"), new Lottery.PlayType(0x1649, "任选三单式"), new Lottery.PlayType(0x164a, "任选三复式"), new Lottery.PlayType(0x164b, "选四组选24"), new Lottery.PlayType(0x164c, "选四组选12"), new Lottery.PlayType(0x164d, "选四组选6"), new Lottery.PlayType(0x164e, "选四组选4"), new Lottery.PlayType(0x164f, "选四直选单式"), new Lottery.PlayType(0x1650, "选四组选复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            private string SortKLPK(string Number)
            {
                string[] strArray = new string[13];
                string str = "";
                string[] strArray2 = Number.Split(new char[] { ',' });
                for (int i = 0; i < strArray2.Length; i++)
                {
                    if ("23456789AJQK10".IndexOf(strArray2[i]) >= 0)
                    {
                        if (strArray2[i] == "A")
                        {
                            strArray[0] = "A";
                        }
                        else if (strArray2[i] == "2")
                        {
                            strArray[1] = "2";
                        }
                        else if (strArray2[i] == "3")
                        {
                            strArray[2] = "3";
                        }
                        else if (strArray2[i] == "4")
                        {
                            strArray[3] = "4";
                        }
                        else if (strArray2[i] == "5")
                        {
                            strArray[4] = "5";
                        }
                        else if (strArray2[i] == "6")
                        {
                            strArray[5] = "6";
                        }
                        else if (strArray2[i] == "7")
                        {
                            strArray[6] = "7";
                        }
                        else if (strArray2[i] == "8")
                        {
                            strArray[7] = "8";
                        }
                        else if (strArray2[i] == "9")
                        {
                            strArray[8] = "9";
                        }
                        else if (strArray2[i] == "10")
                        {
                            strArray[9] = "10";
                        }
                        else if (strArray2[i] == "J")
                        {
                            strArray[10] = "J";
                        }
                        else if (strArray2[i] == "Q")
                        {
                            strArray[11] = "Q";
                        }
                        else if (strArray2[i] == "K")
                        {
                            strArray[12] = "K";
                        }
                    }
                }
                for (int j = 0; j < 13; j++)
                {
                    if (strArray[j] != null)
                    {
                        str = str + strArray[j] + ",";
                    }
                }
                return str.Substring(0, str.Length - 1);
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x1644)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1645) || (PlayType == 0x1646))
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1647) || (PlayType == 0x1648))
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1649) || (PlayType == 0x164a))
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x164b)
                {
                    return this.ToSingle_X4_Zu24(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x164c)
                {
                    return this.ToSingle_X4_Zu12(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x164d)
                {
                    return this.ToSingle_X4_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x164e)
                {
                    return this.ToSingle_X4_Zu4(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x164f) && (PlayType != 0x1650))
                {
                    return null;
                }
                return this.ToSingle_X4_Zhi(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[任选1单式]") || Number.StartsWith("[任选1复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX1(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选2单式]") || Number.StartsWith("[任选2复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX2(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选3单式]") || Number.StartsWith("[任选3复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX3(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选24]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu24(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选12]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu12(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选6]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu6(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选4]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu4(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (!Number.StartsWith("[选4直选单式]") && !Number.StartsWith("[选4直选复式]"))
                {
                    return null;
                }
                return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zhi(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                int num = 0;
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                    if (strArray[i] != "_")
                    {
                        Regex regex2 = new Regex("((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        if (regex2.IsMatch(strArray[i]))
                        {
                            num++;
                        }
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    if (str != "_")
                    {
                        str = str + ",_,_,_";
                        list.Add(str);
                    }
                }
                for (int m = 0; m < strArray[1].Length; m++)
                {
                    string str2 = strArray[1][m].ToString();
                    if (str2 != "_")
                    {
                        str2 = "_," + str2 + ",_,_";
                        list.Add(str2);
                    }
                }
                for (int n = 0; n < strArray[2].Length; n++)
                {
                    string str3 = strArray[2][n].ToString();
                    if (str3 != "_")
                    {
                        str3 = "_,_," + str3 + ",_";
                        list.Add(str3);
                    }
                }
                for (int num7 = 0; num7 < strArray[3].Length; num7++)
                {
                    string str4 = strArray[3][num7].ToString();
                    if (str4 != "_")
                    {
                        str4 = "_,_,_," + str4;
                        list.Add(str4);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num8 = 0; num8 < list.Count; num8++)
                {
                    strArray2[num8] = list[num8].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        string[] strArray3;
                        IntPtr ptr;
                        (strArray3 = strArray)[(int) (ptr = (IntPtr) j)] = strArray3[(int) ptr] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 5)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        strArray[j] = strArray[j] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 6)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu12(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu24(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                string[] strArray = CanonicalNumber.Split(new char[] { ',' });
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int i = 0; i < (length - 3); i++)
                {
                    for (int k = i + 1; k < (length - 2); k++)
                    {
                        for (int m = k + 1; m < (length - 1); m++)
                        {
                            for (int n = m + 1; n < length; n++)
                            {
                                list.Add(strArray[i].ToString() + "," + strArray[k].ToString() + "," + strArray[m].ToString() + "," + strArray[n].ToString());
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu4(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2])) && ((Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3]))) && (((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3]))))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[3]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]))) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3])))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }
        }

        public class SJFC21X5 : Lottery.LotteryBase
        {
            public const string Code = "SJFC21X5";
            public const int ID = 0x12;
            public const double MaxMoney = 20000.0;
            public const string Name = "三晋风采21选5";
            public const int PlayType_D = 0x709;
            public const int PlayType_F = 0x70a;
            public const string sID = "18";

            public SJFC21X5()
            {
                base.id = 0x12;
                base.name = "三晋风采21选5";
                base.code = "SJFC21X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x709)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,20}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x709) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x709);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x16);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x709) && (play_type <= 0x70a));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 8))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                double num5 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num9 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num9++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num9)
                                    {
                                        case 4:
                                            num3++;
                                            num5 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            break;

                                        case 3:
                                            num4++;
                                            num5 += WinMoneyList[6];
                                            WinMoneyNoWithTax += WinMoneyList[7];
                                            break;

                                        case 5:
                                            if (this.isThreeContinuum(WinNumber))
                                            {
                                                num++;
                                                num5 += WinMoneyList[0];
                                                WinMoneyNoWithTax += WinMoneyList[1];
                                            }
                                            else
                                            {
                                                num2++;
                                                num5 += WinMoneyList[2];
                                                WinMoneyNoWithTax += WinMoneyList[3];
                                            }
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "特等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "一等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num4.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num5;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x15)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x709, "单式"), new Lottery.PlayType(0x70a, "复式") };
            }

            private bool isThreeContinuum(string Number)
            {
                string[] strArray = this.FilterRepeated(Number.Split(new char[] { ' ' }));
                if (strArray.Length >= 5)
                {
                    int[] numArray = new int[5];
                    for (int i = 0; i < 5; i++)
                    {
                        numArray[i] = int.Parse(strArray[i]);
                    }
                    for (int j = 0; j < 3; j++)
                    {
                        if (((numArray[j] + 1) == numArray[j + 1]) && ((numArray[j] + 2) == numArray[j + 2]))
                        {
                            return true;
                        }
                    }
                }
                return false;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class SSQ : Lottery.LotteryBase
        {
            public const string Code = "SSQ";
            public const int ID = 5;
            public const double MaxMoney = 1240320.0;
            public const string Name = "双色球";
            public const int PlayType_D = 0x1f5;
            public const int PlayType_DanT = 0x1f7;
            public const int PlayType_F = 0x1f6;
            public const string sID = "5";

            public SSQ()
            {
                base.id = 5;
                base.name = "双色球";
                base.code = "SSQ";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0x1f5) || (PlayType == 0x1f6))
                {
                    return this.AnalyseScheme_Zhi(Content, PlayType);
                }
                if (PlayType == 0x1f7)
                {
                    return this.AnalyseScheme_DanT(Content, PlayType);
                }
                return "";
            }

            private string AnalyseScheme_DanT(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(\d\d\s){1,5}[,](\s)(\d\d\s){2,31}[+](\s\d\d){1,16}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_DanT(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1f5)
                {
                    str2 = @"(\d\d\s){6}[+]\s\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,20}[+](\s\d\d){1,16}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1f5) ? 1 : 2))) && (strArray2.Length <= 620160.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_DT(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(\d\d\s){1,5}[,](\s)(\d\d\s){2,31}[+](\s\d\d){1,16}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_DanT(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                str = str + strArray2[j] + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){6}[+](\s\d\d){1,4}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x1f5);
                return (((strArray != null) && (strArray.Length >= 1)) && (strArray.Length <= 4));
            }

            public override string BuildNumber(int Red, int Blue, int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                ArrayList list2 = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    list2.Clear();
                    for (int j = 0; j < Red; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x22);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    for (int k = 0; k < Blue; k++)
                    {
                        int num5 = 0;
                        while ((num5 == 0) || base.isExistBall(list2, num5))
                        {
                            num5 = random.Next(1, 0x11);
                        }
                        list2.Add(num5.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    list2.Sort(comparer);
                    string str = "";
                    for (int m = 0; m < al.Count; m++)
                    {
                        str = str + al[m].ToString() + " ";
                    }
                    str = str + "+ ";
                    for (int n = 0; n < list2.Count; n++)
                    {
                        str = str + list2[n].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1f5) && (play_type <= 0x1f7));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 14))
                {
                    return -3.0;
                }
                if ((PlayType == 0x1f5) || (PlayType == 0x1f6))
                {
                    return this.ComputeWin_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13]);
                }
                if (PlayType == 0x1f7)
                {
                    return this.ComputeWin_DanT(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13]);
                }
                return -4.0;
            }

            private double ComputeWin_DanT(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x16)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = WinNumber.Substring(0, 0x12);
                string str2 = WinNumber.Substring(20, WinNumber.Length - 20).Trim();
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                double num8 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_DanT(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 0x16)
                            {
                                string[] strArray3 = new string[6];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)[+]\s(?<B0>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num11 = 0;
                                bool flag = false;
                                bool flag2 = false;
                                bool flag3 = true;
                                for (int k = 0; k < 6; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag3 = false;
                                        break;
                                    }
                                    if (str.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num11++;
                                    }
                                }
                                if (flag3)
                                {
                                    string str4 = match.Groups["B0"].ToString().Trim();
                                    if (str4 != "")
                                    {
                                        if (str4 == str2.Substring(0, 2))
                                        {
                                            flag = true;
                                        }
                                        if (str2.IndexOf(" " + str4) >= 0)
                                        {
                                            flag2 = true;
                                        }
                                        if ((num11 == 6) && flag)
                                        {
                                            num++;
                                            num8 += WinMoney1;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        }
                                        else if (num11 == 6)
                                        {
                                            num2++;
                                            num8 += WinMoney2;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        }
                                        else if ((num11 == 5) && flag)
                                        {
                                            num3++;
                                            num8 += WinMoney3;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                        }
                                        else if ((num11 == 5) || ((num11 == 4) && flag))
                                        {
                                            num4++;
                                            num8 += WinMoney4;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax4;
                                            if ((num11 == 5) && flag2)
                                            {
                                                num7++;
                                                num8 += WinMoney7;
                                                WinMoneyNoWithTax += WinMoneyNoWithTax7;
                                            }
                                        }
                                        else if ((num11 == 4) || ((num11 == 3) && flag))
                                        {
                                            num5++;
                                            num8 += WinMoney5;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax5;
                                        }
                                        else if (flag)
                                        {
                                            num6++;
                                            num8 += WinMoney6;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax6;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "快乐星期天特别奖" + num7.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num8;
            }

            private double ComputeWin_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x16)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = WinNumber.Substring(0, 0x12);
                string str2 = WinNumber.Substring(20, WinNumber.Length - 20).Trim();
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                double num8 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 0x16)
                            {
                                string[] strArray3 = new string[6];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)[+]\s(?<B0>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num11 = 0;
                                bool flag = false;
                                bool flag2 = false;
                                bool flag3 = true;
                                for (int k = 0; k < 6; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag3 = false;
                                        break;
                                    }
                                    if (str.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num11++;
                                    }
                                }
                                if (flag3)
                                {
                                    string str4 = match.Groups["B0"].ToString().Trim();
                                    if (str4 != "")
                                    {
                                        if (str4 == str2.Substring(0, 2))
                                        {
                                            flag = true;
                                        }
                                        if (str2.IndexOf(" " + str4) >= 0)
                                        {
                                            flag2 = true;
                                        }
                                        if ((num11 == 6) && flag)
                                        {
                                            num++;
                                            num8 += WinMoney1;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        }
                                        else if (num11 == 6)
                                        {
                                            num2++;
                                            num8 += WinMoney2;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        }
                                        else if ((num11 == 5) && flag)
                                        {
                                            num3++;
                                            num8 += WinMoney3;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                        }
                                        else if ((num11 == 5) || ((num11 == 4) && flag))
                                        {
                                            num4++;
                                            num8 += WinMoney4;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax4;
                                            if ((num11 == 5) && flag2)
                                            {
                                                num7++;
                                                num8 += WinMoney7;
                                                WinMoneyNoWithTax += WinMoneyNoWithTax7;
                                            }
                                        }
                                        else if ((num11 == 4) || ((num11 == 3) && flag))
                                        {
                                            num5++;
                                            num8 += WinMoney5;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax5;
                                        }
                                        else if (flag)
                                        {
                                            num6++;
                                            num8 += WinMoney6;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax6;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "快乐星期天特别奖" + num7.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num8;
            }

            private string ConvertFormatToElectronTicket_DYJ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID != 0x1f5) && (PlayTypeID != 0x1f6))
                {
                    return str;
                }
                return Number.Replace(" + ", "-");
            }

            private string ConvertFormatToElectronTicket_HPCQ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (((PlayTypeID != 0x1f5) && (PlayTypeID != 0x1f6)) && (PlayTypeID != 0x1f7))
                {
                    return str;
                }
                return Number.Replace(" ", ",").Replace(",+,", "#");
            }

            private string ConvertFormatToElectronTicket_HPJX(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID != 0x1f5) && (PlayTypeID != 0x1f6))
                {
                    return str;
                }
                return Number.Replace(" ", ",").Replace(",+,", "#");
            }

            private string ConvertFormatToElectronTicket_HPSH(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID != 0x1f5) && (PlayTypeID != 0x1f6))
                {
                    return str;
                }
                return Number.Replace(" ", ",").Replace(",+,", "#");
            }

            private string[] FilterRepeated(string[] NumberPart1, string[] NumberPart2)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart2.Length; i++)
                {
                    al.Add(NumberPart2[i]);
                }
                ArrayList list2 = new ArrayList();
                for (int j = 0; j < NumberPart1.Length; j++)
                {
                    int ball = _Convert.StrToInt(NumberPart1[j], -1);
                    if (!base.isExistBall(al, ball))
                    {
                        list2.Add(NumberPart1[j]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                list2.Sort(comparer);
                string[] strArray = new string[list2.Count];
                for (int k = 0; k < list2.Count; k++)
                {
                    strArray[k] = list2[k].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            private string[] FilterRepeated(string[] NumberPart, int MaxBall)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= MaxBall)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1f5, "单式"), new Lottery.PlayType(0x1f6, "复式"), new Lottery.PlayType(0x1f7, "胆拖") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    switch (LotteryMachine)
                    {
                        case "福彩投注系统2.2":
                            if (PlayTypeID != 0x1f5)
                            {
                                if (PlayTypeID != 0x1f6)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_FCTZST2_2_F(numbers);
                            }
                            return this.GetPrintKeyList_FCTZST2_2_D(numbers);

                        case "FCR8000":
                            if (PlayTypeID != 0x1f5)
                            {
                                if (PlayTypeID != 0x1f6)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_FCR8000_F(numbers);
                            }
                            return this.GetPrintKeyList_FCR8000_D(numbers);

                        case "LT-E":
                            if (PlayTypeID != 0x1f5)
                            {
                                if (PlayTypeID != 0x1f6)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_LT_E_F(numbers);
                            }
                            return this.GetPrintKeyList_LT_E_D(numbers);

                        case "LT-E02":
                            if (PlayTypeID != 0x1f5)
                            {
                                if (PlayTypeID != 0x1f6)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_LT_E02_F(numbers);
                            }
                            return this.GetPrintKeyList_LT_E02_D(numbers);

                        case "SN-3000CQA":
                            if (PlayTypeID != 0x1f5)
                            {
                                if (PlayTypeID != 0x1f6)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_SN_3000CQA_F(numbers);
                            }
                            return this.GetPrintKeyList_SN_3000CQA_D(numbers);

                        case "SN-2000":
                            if (PlayTypeID != 0x1f5)
                            {
                                if (PlayTypeID != 0x1f6)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_SN_2000_F(numbers);
                            }
                            return this.GetPrintKeyList_SN_2000_D(numbers);

                        case "SN_3000CG":
                            if (PlayTypeID != 0x1f5)
                            {
                                if (PlayTypeID == 0x1f6)
                                {
                                    return this.GetPrintKeyList_SN_3000CG_F(numbers);
                                }
                                break;
                            }
                            return this.GetPrintKeyList_SN_3000CG_D(numbers);
                    }
                }
                return "";
            }

            private string GetPrintKeyList_FCR8000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace("+", "").Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    if (str3.Length == 14)
                    {
                        foreach (char ch in str3)
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_FCR8000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    foreach (char ch in strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[ENTER]";
                    foreach (char ch2 in str3)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_FCTZST2_2_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace("+", "").Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    if (str3.Length == 14)
                    {
                        foreach (char ch in str3)
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_FCTZST2_2_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    foreach (char ch in strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[ENTER]";
                    foreach (char ch2 in str3)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace("+", "").Replace(" ", "").Replace("\r", "").Replace("\n", "").Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7");
                    if (str3.Length == 14)
                    {
                        foreach (char ch in str3)
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    str = (((str + "[" + Convert.ToString((int) (str3.Length / 2)) + "]") + "[" + _Convert.Chr(0x15).ToString() + "]") + "[" + Convert.ToString((int) (str4.Length / 2)) + "]") + "[" + _Convert.Chr(0x15).ToString() + "]";
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[" + _Convert.Chr(0x15).ToString() + "]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7");
            }

            private string GetPrintKeyList_LT_E02_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace("+", "").Replace(" ", "").Replace("\r", "").Replace("\n", "").Replace("0", "O").Replace("1", "3").Replace("2", "A").Replace("3", "B").Replace("4", "6").Replace("5", "C").Replace("6", "D").Replace("7", "9").Replace("8", "E").Replace("9", "F");
                    if (str3.Length == 14)
                    {
                        foreach (char ch in str3)
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E02_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    str = (((str + "[" + Convert.ToString((int) (str3.Length / 2)) + "]") + "[" + _Convert.Chr(0x15).ToString() + "]") + "[" + Convert.ToString((int) (str4.Length / 2)) + "]") + "[" + _Convert.Chr(0x15).ToString() + "]";
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[" + _Convert.Chr(0x15).ToString() + "]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "3").Replace("2", "A").Replace("3", "B").Replace("4", "6").Replace("5", "C").Replace("6", "D").Replace("7", "9").Replace("8", "E").Replace("9", "F");
            }

            private string GetPrintKeyList_SN_2000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace("+", "").Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    if (str3.Length == 14)
                    {
                        foreach (char ch in str3)
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_2000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[ENTER]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CG_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace("+", "").Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    if (str3.Length == 14)
                    {
                        foreach (char ch in str3)
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CG_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[ENTER]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                    str = str + "[ENTER]";
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CQA_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace("+", "").Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    if (str3.Length == 14)
                    {
                        foreach (char ch in str3)
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_SN_3000CQA_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    foreach (char ch in strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[ENTER]";
                    foreach (char ch2 in str3)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str;
            }

            private string HPSH_ConvertFormatToElectronTicket(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                return Number.Replace(",", " ").Replace("#", " + ");
            }

            public override string HPSH_ToElectronicTicket(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                TicketNumber = "";
                foreach (string str2 in this.HPSH_ConvertFormatToElectronTicket(PlayTypeID, Number).Split(new char[] { '\n' }))
                {
                    TicketNumber = TicketNumber + str2 + "\n";
                }
                NewPlayTypeID = PlayTypeID;
                return "";
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x1f5)
                {
                    return this.ToElectronicTicket_DYJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1f6)
                {
                    return this.ToElectronicTicket_DYJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1f7)
                {
                    return this.ToElectronicTicket_DYJ_DT(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + ";\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_DT(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_DT(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m] != ""))
                            {
                                try
                                {
                                    number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + ";\n";
                                    num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                                }
                                catch
                                {
                                }
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0] + ";";
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPCQ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x1f5)
                {
                    return this.ToElectronicTicket_HPCQ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1f6)
                {
                    return this.ToElectronicTicket_HPCQ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1f7)
                {
                    return this.ToElectronicTicket_HPCQ_DT(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money = num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_DT(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_DT(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money = num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPCQ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money = num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPJX(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x1f5)
                {
                    return this.ToElectronicTicket_HPJX_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1f6)
                {
                    return this.ToElectronicTicket_HPJX_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1f7)
                {
                    return this.ToElectronicTicket_HPJX_DT(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_DT(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_DT(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m] != ""))
                            {
                                try
                                {
                                    number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                    num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                                }
                                catch
                                {
                                }
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPJX_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPJX(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x1f5)
                {
                    return this.ToElectronicTicket_HPSH_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1f6)
                {
                    return this.ToElectronicTicket_HPSH_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1f7)
                {
                    return this.ToElectronicTicket_HPSH_DT(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_DT(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_DT(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m] != ""))
                            {
                                try
                                {
                                    number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                    num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                                }
                                catch
                                {
                                }
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPCQ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0x1f5) || (PlayType == 0x1f6))
                {
                    return this.ToSingle_Zhi(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1f7)
                {
                    return this.ToSingle_DanT(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_DanT(string Number, ref string CanonicalNumber)
            {
                string[] strArray = Number.Split(new char[] { '+' });
                CanonicalNumber = "";
                if (strArray.Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                string[] strArray2 = this.FilterRepeated(strArray[0].Trim().Split(new char[] { ',' })[0].Trim().Split(new char[] { ' ' }), 0x21);
                string[] strArray3 = this.FilterRepeated(strArray[0].Trim().Split(new char[] { ',' })[1].Trim().Split(new char[] { ' ' }), 0x21);
                string[] strArray4 = this.FilterRepeated(strArray[1].Trim().Split(new char[] { ' ' }), 0x10);
                string[] strArray5 = this.FilterRepeated(strArray2, strArray3);
                if ((((strArray5.Length + strArray3.Length) < 7) || (strArray4.Length < 1)) || (strArray5.Length > 5))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray5.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray5[i] + " ";
                }
                CanonicalNumber = CanonicalNumber + ", ";
                for (int j = 0; j < strArray3.Length; j++)
                {
                    CanonicalNumber = CanonicalNumber + strArray3[j] + " ";
                }
                CanonicalNumber = CanonicalNumber + "+ ";
                for (int k = 0; k < strArray4.Length; k++)
                {
                    CanonicalNumber = CanonicalNumber + strArray4[k] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                string[] strArray6 = new string[strArray5.Length + strArray3.Length];
                string str = "";
                for (int m = 0; m < strArray5.Length; m++)
                {
                    strArray6[m] = strArray5[m];
                    str = str + strArray5[m] + " ";
                }
                for (int n = strArray5.Length; n < (strArray5.Length + strArray3.Length); n++)
                {
                    strArray6[n] = strArray3[n - strArray5.Length];
                }
                ArrayList list = new ArrayList();
                int length = strArray5.Length;
                int num7 = strArray6.Length;
                switch (length)
                {
                    case 1:
                        for (int num8 = length; num8 < (num7 - 4); num8++)
                        {
                            for (int num9 = num8 + 1; num9 < (num7 - 3); num9++)
                            {
                                for (int num10 = num9 + 1; num10 < (num7 - 2); num10++)
                                {
                                    for (int num11 = num10 + 1; num11 < (num7 - 1); num11++)
                                    {
                                        for (int num12 = num11 + 1; num12 < num7; num12++)
                                        {
                                            for (int num13 = 0; num13 < strArray4.Length; num13++)
                                            {
                                                list.Add(str + strArray6[num8] + " " + strArray6[num9] + " " + strArray6[num10] + " " + strArray6[num11] + " " + strArray6[num12] + " + " + strArray4[num13]);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;

                    case 2:
                        for (int num14 = length; num14 < (num7 - 3); num14++)
                        {
                            for (int num15 = num14 + 1; num15 < (num7 - 2); num15++)
                            {
                                for (int num16 = num15 + 1; num16 < (num7 - 1); num16++)
                                {
                                    for (int num17 = num16 + 1; num17 < num7; num17++)
                                    {
                                        for (int num18 = 0; num18 < strArray4.Length; num18++)
                                        {
                                            list.Add(str + strArray6[num14] + " " + strArray6[num15] + " " + strArray6[num16] + " " + strArray6[num17] + " + " + strArray4[num18]);
                                        }
                                    }
                                }
                            }
                        }
                        break;

                    case 3:
                        for (int num19 = length; num19 < (num7 - 2); num19++)
                        {
                            for (int num20 = num19 + 1; num20 < (num7 - 1); num20++)
                            {
                                for (int num21 = num20 + 1; num21 < num7; num21++)
                                {
                                    for (int num22 = 0; num22 < strArray4.Length; num22++)
                                    {
                                        list.Add(str + strArray6[num19] + " " + strArray6[num20] + " " + strArray6[num21] + " + " + strArray4[num22]);
                                    }
                                }
                            }
                        }
                        break;

                    case 4:
                        for (int num23 = length; num23 < (num7 - 1); num23++)
                        {
                            for (int num24 = num23 + 1; num24 < num7; num24++)
                            {
                                for (int num25 = 0; num25 < strArray4.Length; num25++)
                                {
                                    list.Add(str + strArray6[num23] + " " + strArray6[num24] + " + " + strArray4[num25]);
                                }
                            }
                        }
                        break;

                    case 5:
                        for (int num26 = length; num26 < num7; num26++)
                        {
                            for (int num27 = 0; num27 < strArray4.Length; num27++)
                            {
                                list.Add(str + strArray6[num26] + " + " + strArray4[num27]);
                            }
                        }
                        break;
                }
                string[] strArray7 = new string[list.Count];
                for (int num28 = 0; num28 < list.Count; num28++)
                {
                    strArray7[num28] = list[num28].ToString();
                }
                return strArray7;
            }

            private string[] ToSingle_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = Number.Split(new char[] { '+' });
                CanonicalNumber = "";
                if (strArray.Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                string[] strArray2 = this.FilterRepeated(strArray[0].Trim().Split(new char[] { ' ' }), 0x21);
                string[] strArray3 = this.FilterRepeated(strArray[1].Trim().Split(new char[] { ' ' }), 0x10);
                if (((strArray2.Length < 6) || (strArray3.Length < 1)) || (strArray2.Length > 20))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray2.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray2[i] + " ";
                }
                CanonicalNumber = CanonicalNumber + "+ ";
                for (int j = 0; j < strArray3.Length; j++)
                {
                    CanonicalNumber = CanonicalNumber + strArray3[j] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray2.Length;
                for (int k = 0; k < (length - 5); k++)
                {
                    for (int n = k + 1; n < (length - 4); n++)
                    {
                        for (int num6 = n + 1; num6 < (length - 3); num6++)
                        {
                            for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                            {
                                for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                {
                                    for (int num9 = num8 + 1; num9 < length; num9++)
                                    {
                                        for (int num10 = 0; num10 < strArray3.Length; num10++)
                                        {
                                            list.Add(strArray2[k] + " " + strArray2[n] + " " + strArray2[num6] + " " + strArray2[num7] + " " + strArray2[num8] + " " + strArray2[num9] + " + " + strArray3[num10]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray4 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray4[m] = list[m].ToString();
                }
                return strArray4;
            }
        }

        public class SXKLPK : Lottery.LotteryBase
        {
            public const string Code = "SXKLPK";
            public const int ID = 0x36;
            public const double MaxMoney = 200000.0;
            public const string Name = "陕西快乐扑克";
            public const int PlayType_Mixed = 0x1518;
            public const int PlayType_RX1_D = 0x1519;
            public const int PlayType_RX1_F = 0x151a;
            public const int PlayType_RX2_D = 0x151b;
            public const int PlayType_RX2_F = 0x151c;
            public const int PlayType_RX3_D = 0x151d;
            public const int PlayType_RX3_F = 0x151e;
            public const int PlayType_X4_ZhiD = 0x1523;
            public const int PlayType_X4_ZhiF = 0x1524;
            public const int PlayType_X4_Zu12 = 0x1520;
            public const int PlayType_X4_Zu24 = 0x151f;
            public const int PlayType_X4_Zu4 = 0x1522;
            public const int PlayType_X4_Zu6 = 0x1521;
            public const string sID = "54";

            public SXKLPK()
            {
                base.id = 0x36;
                base.name = "陕西快乐扑克";
                base.code = "SXKLPK";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x1518)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if ((PlayType == 0x1519) || (PlayType == 0x151a))
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if ((PlayType == 0x151b) || (PlayType == 0x151c))
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if ((PlayType == 0x151d) || (PlayType == 0x151e))
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if (PlayType == 0x151f)
                {
                    return this.AnalyseScheme_X4_Zu24(Content, PlayType);
                }
                if (PlayType == 0x1520)
                {
                    return this.AnalyseScheme_X4_Zu12(Content, PlayType);
                }
                if (PlayType == 0x1521)
                {
                    return this.AnalyseScheme_X4_Zu6(Content, PlayType);
                }
                if (PlayType == 0x1522)
                {
                    return this.AnalyseScheme_X4_Zu4(Content, PlayType);
                }
                if ((PlayType != 0x1523) && (PlayType != 0x1524))
                {
                    return "";
                }
                return this.AnalyseScheme_X4_Zhi(Content, PlayType);
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[任选一单式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x1519);
                    }
                    if (strArray[i].StartsWith("[任选一复式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x151a);
                    }
                    if (strArray[i].StartsWith("[任选二单式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x151b);
                    }
                    if (strArray[i].StartsWith("[任选二复式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x151c);
                    }
                    if (strArray[i].StartsWith("[任选三单式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x151d);
                    }
                    if (strArray[i].StartsWith("[任选三复式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x151e);
                    }
                    if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu24(base.FilterPreFix(strArray[i]), 0x151f);
                    }
                    if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu12(base.FilterPreFix(strArray[i]), 0x1520);
                    }
                    if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu6(base.FilterPreFix(strArray[i]), 0x1521);
                    }
                    if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu4(base.FilterPreFix(strArray[i]), 0x1522);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1519)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x151a))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x1519))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x151b)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x151c))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x151b))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x151d)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x151e))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x151d))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1523)
                {
                    str2 = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i].ToString());
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1523) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu12(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu12(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu24(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3,12}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu24(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu4(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu6(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu6(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex("((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                return "";
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1518) && (play_type <= 0x1524));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 20))
                {
                    return -3.0;
                }
                if (!this.AnalyseWinNumber(WinNumber))
                {
                    return -5.0;
                }
                int winCount = 0;
                int num2 = 0;
                int num3 = 0;
                if (PlayType == 0x1518)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13]);
                }
                if ((PlayType == 0x1519) || (PlayType == 0x151a))
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref winCount);
                }
                if ((PlayType == 0x151b) || (PlayType == 0x151c))
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref winCount);
                }
                if ((PlayType == 0x151d) || (PlayType == 0x151e))
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num2, ref num3);
                }
                if ((PlayType == 0x1523) || (PlayType == 0x1524))
                {
                    return this.ComputeWin_X4_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], ref num2, ref num3);
                }
                if (PlayType == 0x151f)
                {
                    return this.ComputeWin_X4_Zu24(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref winCount);
                }
                if (PlayType == 0x1520)
                {
                    return this.ComputeWin_X4_Zu12(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], ref winCount);
                }
                if (PlayType == 0x1521)
                {
                    return this.ComputeWin_X4_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], ref winCount);
                }
                if (PlayType == 0x1522)
                {
                    return this.ComputeWin_X4_Zu4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x12], WinMoneyList[0x13], ref winCount);
                }
                return -4.0;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8, double WinMoney9, double WinMoneyNoWithTax9, double WinMoney10, double WinMoneyNoWithTax10)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int winCount = 0;
                    int num14 = 0;
                    int num15 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[任选一单式]") || strArray[i].StartsWith("[任选一复式]"))
                    {
                        num += this.ComputeWin_RX1(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选二单式]") || strArray[i].StartsWith("[任选二复式]"))
                    {
                        num += this.ComputeWin_RX2(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选三单式]") || strArray[i].StartsWith("[任选三复式]"))
                    {
                        num += this.ComputeWin_RX3(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num4 += num14;
                        num5 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四直选单式]") || strArray[i].StartsWith("[选四直选复式]"))
                    {
                        num += this.ComputeWin_X4_Zhi(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, WinMoney6, WinMoneyNoWithTax6, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += num14;
                        num7 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        num += this.ComputeWin_X4_Zu24(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney7, WinMoneyNoWithTax7, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num8 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        num += this.ComputeWin_X4_Zu12(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney8, WinMoneyNoWithTax8, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num9 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        num += this.ComputeWin_X4_Zu6(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney9, WinMoneyNoWithTax9, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num10 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        num += this.ComputeWin_X4_Zu4(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney10, WinMoneyNoWithTax10, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num11 += winCount;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选一" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选二" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中4 " + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中3 " + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选24 " + num8.ToString() + "注");
                }
                if (num9 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选12 " + num9.ToString() + "注");
                }
                if (num10 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选6 " + num10.ToString() + "注");
                }
                if (num11 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选4 " + num11.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        WinCount++;
                                        num += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选一" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                int num = 0;
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                if (num == 2)
                                {
                                    WinCount++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选二" + ((int) WinCount).ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 3:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 2:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 4:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 3:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中4 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中3 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zu12(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu12(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选12 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu24(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu24(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选24 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选4 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu6(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选6 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private string FilterRepeated(string NumberPart)
            {
                string number = "";
                string[] strArray = NumberPart.Split(new char[] { ',' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (("23456789AJQK10".IndexOf(strArray[i]) >= 0) && (number.IndexOf(strArray[i]) == -1))
                    {
                        number = number + strArray[i] + ",";
                    }
                }
                number = number.Substring(0, number.Length - 1);
                return this.SortKLPK(number);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1518, "混合投注"), new Lottery.PlayType(0x1519, "任选一单式"), new Lottery.PlayType(0x151a, "任选一复式"), new Lottery.PlayType(0x151b, "任选二单式"), new Lottery.PlayType(0x151c, "任选二复式"), new Lottery.PlayType(0x151d, "任选三单式"), new Lottery.PlayType(0x151e, "任选三复式"), new Lottery.PlayType(0x151f, "选四组选24"), new Lottery.PlayType(0x1520, "选四组选12"), new Lottery.PlayType(0x1521, "选四组选6"), new Lottery.PlayType(0x1522, "选四组选4"), new Lottery.PlayType(0x1523, "选四直选单式"), new Lottery.PlayType(0x1524, "选四组选复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            private string SortKLPK(string Number)
            {
                string[] strArray = new string[13];
                string str = "";
                string[] strArray2 = Number.Split(new char[] { ',' });
                for (int i = 0; i < strArray2.Length; i++)
                {
                    if ("23456789AJQK10".IndexOf(strArray2[i]) >= 0)
                    {
                        if (strArray2[i] == "A")
                        {
                            strArray[0] = "A";
                        }
                        else if (strArray2[i] == "2")
                        {
                            strArray[1] = "2";
                        }
                        else if (strArray2[i] == "3")
                        {
                            strArray[2] = "3";
                        }
                        else if (strArray2[i] == "4")
                        {
                            strArray[3] = "4";
                        }
                        else if (strArray2[i] == "5")
                        {
                            strArray[4] = "5";
                        }
                        else if (strArray2[i] == "6")
                        {
                            strArray[5] = "6";
                        }
                        else if (strArray2[i] == "7")
                        {
                            strArray[6] = "7";
                        }
                        else if (strArray2[i] == "8")
                        {
                            strArray[7] = "8";
                        }
                        else if (strArray2[i] == "9")
                        {
                            strArray[8] = "9";
                        }
                        else if (strArray2[i] == "10")
                        {
                            strArray[9] = "10";
                        }
                        else if (strArray2[i] == "J")
                        {
                            strArray[10] = "J";
                        }
                        else if (strArray2[i] == "Q")
                        {
                            strArray[11] = "Q";
                        }
                        else if (strArray2[i] == "K")
                        {
                            strArray[12] = "K";
                        }
                    }
                }
                for (int j = 0; j < 13; j++)
                {
                    if (strArray[j] != null)
                    {
                        str = str + strArray[j] + ",";
                    }
                }
                return str.Substring(0, str.Length - 1);
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x1518)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1519) || (PlayType == 0x151a))
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x151b) || (PlayType == 0x151c))
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x151d) || (PlayType == 0x151e))
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x151f)
                {
                    return this.ToSingle_X4_Zu24(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1520)
                {
                    return this.ToSingle_X4_Zu12(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1521)
                {
                    return this.ToSingle_X4_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1522)
                {
                    return this.ToSingle_X4_Zu4(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x1523) && (PlayType != 0x1524))
                {
                    return null;
                }
                return this.ToSingle_X4_Zhi(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[任选1单式]") || Number.StartsWith("[任选1复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX1(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选2单式]") || Number.StartsWith("[任选2复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX2(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选3单式]") || Number.StartsWith("[任选3复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX3(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选24]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu24(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选12]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu12(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选6]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu6(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选4]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu4(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (!Number.StartsWith("[选4直选单式]") && !Number.StartsWith("[选4直选复式]"))
                {
                    return null;
                }
                return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zhi(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                int num = 0;
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                    if (strArray[i] != "_")
                    {
                        Regex regex2 = new Regex("((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        if (regex2.IsMatch(strArray[i]))
                        {
                            num++;
                        }
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    if (str != "_")
                    {
                        str = str + ",_,_,_";
                        list.Add(str);
                    }
                }
                for (int m = 0; m < strArray[1].Length; m++)
                {
                    string str2 = strArray[1][m].ToString();
                    if (str2 != "_")
                    {
                        str2 = "_," + str2 + ",_,_";
                        list.Add(str2);
                    }
                }
                for (int n = 0; n < strArray[2].Length; n++)
                {
                    string str3 = strArray[2][n].ToString();
                    if (str3 != "_")
                    {
                        str3 = "_,_," + str3 + ",_";
                        list.Add(str3);
                    }
                }
                for (int num7 = 0; num7 < strArray[3].Length; num7++)
                {
                    string str4 = strArray[3][num7].ToString();
                    if (str4 != "_")
                    {
                        str4 = "_,_,_," + str4;
                        list.Add(str4);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num8 = 0; num8 < list.Count; num8++)
                {
                    strArray2[num8] = list[num8].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        string[] strArray3;
                        IntPtr ptr;
                        (strArray3 = strArray)[(int) (ptr = (IntPtr) j)] = strArray3[(int) ptr] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 5)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        strArray[j] = strArray[j] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 6)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu12(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu24(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                string[] strArray = CanonicalNumber.Split(new char[] { ',' });
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int i = 0; i < (length - 3); i++)
                {
                    for (int k = i + 1; k < (length - 2); k++)
                    {
                        for (int m = k + 1; m < (length - 1); m++)
                        {
                            for (int n = m + 1; n < length; n++)
                            {
                                list.Add(strArray[i].ToString() + "," + strArray[k].ToString() + "," + strArray[m].ToString() + "," + strArray[n].ToString());
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu4(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2])) && ((Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3]))) && (((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3]))))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[3]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]))) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3])))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }
        }

        public class SYYDJ : Lottery.LotteryBase
        {
            public const string Code = "SYYDJ";
            public const int ID = 0x3e;
            public const double MaxMoney = 200000.0;
            public const string Name = "十一运夺金";
            public const int PlayType_RX1 = 0x1839;
            public const int PlayType_RX2 = 0x183a;
            public const int PlayType_RX3 = 0x183b;
            public const int PlayType_RX4 = 0x183c;
            public const int PlayType_RX5 = 0x183d;
            public const int PlayType_RX6 = 0x183e;
            public const int PlayType_RX7 = 0x183f;
            public const int PlayType_RX8 = 0x1840;
            public const int PlayType_ZhiQ2 = 0x1841;
            public const int PlayType_ZhiQ3 = 0x1842;
            public const int PlayType_ZuQ2 = 0x1843;
            public const int PlayType_ZuQ3 = 0x1844;
            public const string sID = "62";

            public SYYDJ()
            {
                base.id = 0x3e;
                base.name = "十一运夺金";
                base.code = "SYYDJ";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x1839)
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if (PlayType == 0x183a)
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if (PlayType == 0x183b)
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if (PlayType == 0x183c)
                {
                    return this.AnalyseScheme_RX4(Content, PlayType);
                }
                if (PlayType == 0x183d)
                {
                    return this.AnalyseScheme_RX5(Content, PlayType);
                }
                if (PlayType == 0x183e)
                {
                    return this.AnalyseScheme_RX6(Content, PlayType);
                }
                if (PlayType == 0x183f)
                {
                    return this.AnalyseScheme_RX7(Content, PlayType);
                }
                if (PlayType == 0x1840)
                {
                    return this.AnalyseScheme_RX8(Content, PlayType);
                }
                if (PlayType == 0x1841)
                {
                    return this.AnalyseScheme_ZhiQ2(Content, PlayType);
                }
                if (PlayType == 0x1842)
                {
                    return this.AnalyseScheme_ZhiQ3(Content, PlayType);
                }
                if (PlayType == 0x1843)
                {
                    return this.AnalyseScheme_ZuQ2(Content, PlayType);
                }
                if (PlayType == 0x1844)
                {
                    return this.AnalyseScheme_ZuQ3(Content, PlayType);
                }
                return "";
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){1,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){2,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX3(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){3,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX4(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX5(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){4,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX5(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX6(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){5,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX6(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX7(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){6,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX7(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX8(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){7,10}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX8(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiQ2(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){0,8}(\d\d))[|]((\d\d\s){0,9}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiQ2(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiQ3(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"((\d\d\s){0,8}\d\d)[|]((\d\d\s){0,8}\d\d)[|]((\d\d\s){0,8}\d\d)";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiQ3(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuQ2(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(\d\d\s){1,10}\d\d";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuQ2(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuQ3(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(\d\d\s){2,10}\d\d";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuQ3(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"((\d\d\s){4}\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < Type; j++)
                    {
                        str = str + random.Next(1, 11).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1839) && (play_type <= 0x1844));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 0x18))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                int num12 = 0;
                if (PlayType == 0x1839)
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref num);
                }
                if (PlayType == 0x183a)
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref num2);
                }
                if (PlayType == 0x183b)
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], ref num3);
                }
                if (PlayType == 0x183c)
                {
                    return this.ComputeWin_RX4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[6], WinMoneyList[7], ref num4);
                }
                if (PlayType == 0x183d)
                {
                    return this.ComputeWin_RX5(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], ref num5);
                }
                if (PlayType == 0x183e)
                {
                    return this.ComputeWin_RX6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11], ref num6);
                }
                if (PlayType == 0x183f)
                {
                    return this.ComputeWin_RX7(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref num7);
                }
                if (PlayType == 0x1840)
                {
                    return this.ComputeWin_RX8(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], ref num8);
                }
                if (PlayType == 0x1841)
                {
                    return this.ComputeWin_ZhiQ2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], ref num9);
                }
                if (PlayType == 0x1842)
                {
                    return this.ComputeWin_ZhiQ3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x12], WinMoneyList[0x13], ref num10);
                }
                if (PlayType == 0x1843)
                {
                    return this.ComputeWin_ZuQ2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[20], WinMoneyList[0x15], ref num11);
                }
                if (PlayType == 0x1844)
                {
                    return this.ComputeWin_ZuQ3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x16], WinMoneyList[0x17], ref num12);
                }
                return -4.0;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCountRX1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX1 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[1];
                            Match match = new Regex(@"(?<R0>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 1; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.Substring(0, 2) == strArray3[k])
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 1))
                            {
                                WinCountRX1++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCountRX1 > 0)
                {
                    Description = "任选一奖" + ((int) WinCountRX1).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCountRX2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX2 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[2];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 2; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 2))
                            {
                                WinCountRX2++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                            }
                        }
                    }
                }
                if (WinCountRX2 > 0)
                {
                    Description = "任选二奖" + ((int) WinCountRX2).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney3, double WinMoneyNoWithTax3, ref int WinCountRX3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[3];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 3; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 3))
                            {
                                WinCountRX3++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                        }
                    }
                }
                if (WinCountRX3 > 0)
                {
                    Description = "任选三奖" + ((int) WinCountRX3).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney4, double WinMoneyNoWithTax4, ref int WinCountRX4)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX4 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[4];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 4; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 4))
                            {
                                WinCountRX4++;
                                num += WinMoney4;
                                WinMoneyNoWithTax += WinMoneyNoWithTax4;
                            }
                        }
                    }
                }
                if (WinCountRX4 > 0)
                {
                    Description = "任选四奖" + ((int) WinCountRX4).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX5(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney5, double WinMoneyNoWithTax5, ref int WinCountRX5)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX5 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX5(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[5];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 5; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 5))
                            {
                                WinCountRX5++;
                                num += WinMoney5;
                                WinMoneyNoWithTax += WinMoneyNoWithTax5;
                            }
                        }
                    }
                }
                if (WinCountRX5 > 0)
                {
                    Description = "任选五奖" + ((int) WinCountRX5).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney6, double WinMoneyNoWithTax6, ref int WinCountRX6)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX6 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX6(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[6];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 6; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 5))
                            {
                                WinCountRX6++;
                                num += WinMoney6;
                                WinMoneyNoWithTax += WinMoneyNoWithTax6;
                            }
                        }
                    }
                }
                if (WinCountRX6 > 0)
                {
                    Description = "任选六奖" + ((int) WinCountRX6).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX7(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney7, double WinMoneyNoWithTax7, ref int WinCountRX7)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX7 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX7(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[7];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 7; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 5))
                            {
                                WinCountRX7++;
                                num += WinMoney7;
                                WinMoneyNoWithTax += WinMoneyNoWithTax7;
                            }
                        }
                    }
                }
                if (WinCountRX7 > 0)
                {
                    Description = "任选七奖" + ((int) WinCountRX7).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_RX8(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney8, double WinMoneyNoWithTax8, ref int WinCountRX8)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCountRX8 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX8(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            string[] strArray3 = new string[8];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d\s)(?<R7>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            int num5 = 0;
                            bool flag = true;
                            for (int k = 0; k < 8; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    flag = false;
                                    break;
                                }
                                if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                {
                                    num5++;
                                }
                            }
                            if (flag && (num5 == 5))
                            {
                                WinCountRX8++;
                                num += WinMoney8;
                                WinMoneyNoWithTax += WinMoneyNoWithTax8;
                            }
                        }
                    }
                }
                if (WinCountRX8 > 0)
                {
                    Description = "任选八奖" + ((int) WinCountRX8).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_ZhiQ2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney9, double WinMoneyNoWithTax9, ref int WinCount_ZhiQ2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCount_ZhiQ2 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiQ2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            bool flag = false;
                            Regex regex = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                            if (regex.IsMatch(strArray2[j]) && (WinNumber.Substring(0, 5) == strArray2[j]))
                            {
                                flag = true;
                            }
                            if (flag)
                            {
                                WinCount_ZhiQ2++;
                                num += WinMoney9;
                                WinMoneyNoWithTax += WinMoneyNoWithTax9;
                            }
                        }
                    }
                }
                if (WinCount_ZhiQ2 > 0)
                {
                    Description = "直选前二奖" + ((int) WinCount_ZhiQ2).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_ZhiQ3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney10, double WinMoneyNoWithTax10, ref int WinCount_ZhiQ3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCount_ZhiQ3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiQ3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            bool flag = false;
                            Regex regex = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                            if (regex.IsMatch(strArray2[j]) && (WinNumber.Substring(0, 8) == strArray2[j]))
                            {
                                flag = true;
                            }
                            if (flag)
                            {
                                WinCount_ZhiQ3++;
                                num += WinMoney10;
                                WinMoneyNoWithTax += WinMoneyNoWithTax10;
                            }
                        }
                    }
                }
                if (WinCount_ZhiQ3 > 0)
                {
                    Description = "直选前三奖" + ((int) WinCount_ZhiQ3).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_ZuQ2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney11, double WinMoneyNoWithTax11, ref int WinCount_ZuQ2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCount_ZuQ2 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuQ2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            int num4 = 0;
                            string[] strArray3 = new string[2];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            for (int k = 0; k < 2; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    break;
                                }
                                if (WinNumber.Substring(0, 5).IndexOf(strArray3[k]) >= 0)
                                {
                                    num4++;
                                }
                            }
                            if (num4 == 2)
                            {
                                WinCount_ZuQ2++;
                                num += WinMoney11;
                                WinMoneyNoWithTax += WinMoneyNoWithTax11;
                            }
                        }
                    }
                }
                if (WinCount_ZuQ2 > 0)
                {
                    Description = "组选前二奖" + ((int) WinCount_ZuQ2).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_ZuQ3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney12, double WinMoneyNoWithTax12, ref int WinCount_ZuQ3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinCount_ZuQ3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuQ3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            int num4 = 0;
                            string[] strArray3 = new string[3];
                            Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                            for (int k = 0; k < 3; k++)
                            {
                                strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                if (strArray3[k] == "")
                                {
                                    break;
                                }
                                if (WinNumber.Substring(0, 8).IndexOf(strArray3[k]) >= 0)
                                {
                                    num4++;
                                }
                            }
                            if (num4 == 3)
                            {
                                WinCount_ZuQ3++;
                                num += WinMoney12;
                                WinMoneyNoWithTax += WinMoneyNoWithTax12;
                            }
                        }
                    }
                }
                if (WinCount_ZuQ3 > 0)
                {
                    Description = "组选前三奖" + ((int) WinCount_ZuQ3).ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private string ConvertFormatToElectronTicket_HPSD(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((((PlayTypeID == 0x1839) || (PlayTypeID == 0x183a)) || ((PlayTypeID == 0x183b) || (PlayTypeID == 0x183c))) || (((PlayTypeID == 0x183d) || (PlayTypeID == 0x183e)) || ((PlayTypeID == 0x183f) || (PlayTypeID == 0x1840))))
                {
                    str = Number.Replace(" ", ",");
                }
                if ((PlayTypeID == 0x1841) || (PlayTypeID == 0x1842))
                {
                    str = Number;
                }
                if ((PlayTypeID != 0x1843) && (PlayTypeID != 0x1844))
                {
                    return str;
                }
                return Number.Replace(" ", ",").Replace("|", ",");
            }

            private string[] FilterRepeated(string[] NumberPart, int MaxBall)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= MaxBall)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1839, "任选一"), new Lottery.PlayType(0x183a, "任选二"), new Lottery.PlayType(0x183b, "任选三"), new Lottery.PlayType(0x183c, "任选四"), new Lottery.PlayType(0x183d, "任选五"), new Lottery.PlayType(0x183e, "任选六"), new Lottery.PlayType(0x183f, "任选七"), new Lottery.PlayType(0x1840, "任选八"), new Lottery.PlayType(0x1841, "直选前二"), new Lottery.PlayType(0x1842, "直选前三"), new Lottery.PlayType(0x1843, "组选前二"), new Lottery.PlayType(0x1844, "组选前三") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                return "";
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x1839)
                {
                    return this.ToElectronicTicket_HPSD_RX1(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x183a)
                {
                    return this.ToElectronicTicket_HPSD_RX2(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x183b)
                {
                    return this.ToElectronicTicket_HPSD_RX3(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x183c)
                {
                    return this.ToElectronicTicket_HPSD_RX4(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x183d)
                {
                    return this.ToElectronicTicket_HPSD_RX5(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x183e)
                {
                    return this.ToElectronicTicket_HPSD_RX6(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x183f)
                {
                    return this.ToElectronicTicket_HPSD_RX7(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1840)
                {
                    return this.ToElectronicTicket_HPSD_RX8(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1841)
                {
                    return this.ToElectronicTicket_HPSD_ZhiQ2(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1842)
                {
                    return this.ToElectronicTicket_HPSD_ZhiQ3(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1843)
                {
                    return this.ToElectronicTicket_HPSD_ZuQ2(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1844)
                {
                    return this.ToElectronicTicket_HPSD_ZuQ3(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_RX1(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_RX1(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(1, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_RX2(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_RX2(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    string str2 = "";
                    double num5 = 0.0;
                    int num6 = 0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            if (double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]) == 1.0)
                            {
                                number = number + strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                num6++;
                                if ((num6 == 5) || (k == (strArray.Length - 1)))
                                {
                                    Money += num3 * multiple;
                                    list.Add(new Lottery.Ticket(2, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                                    number = "";
                                    num3 = 0.0;
                                    num6 = 0;
                                }
                            }
                            else
                            {
                                str2 = strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num5 = 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                Money += num5 * multiple;
                                list.Add(new Lottery.Ticket(2, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, str2), multiple, num5 * multiple));
                            }
                        }
                    }
                    if (number != "")
                    {
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(2, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_RX3(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_RX3(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    string str2 = "";
                    double num5 = 0.0;
                    int num6 = 0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            if (double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]) == 1.0)
                            {
                                number = number + strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                num6++;
                                if ((num6 == 5) || (k == (strArray.Length - 1)))
                                {
                                    Money += num3 * multiple;
                                    list.Add(new Lottery.Ticket(3, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                                    number = "";
                                    num3 = 0.0;
                                    num6 = 0;
                                }
                            }
                            else
                            {
                                str2 = strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num5 = 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                Money += num5 * multiple;
                                list.Add(new Lottery.Ticket(3, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, str2), multiple, num5 * multiple));
                            }
                        }
                    }
                    if (number != "")
                    {
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(3, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_RX4(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_RX4(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    string str2 = "";
                    double num5 = 0.0;
                    int num6 = 0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            if (double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]) == 1.0)
                            {
                                number = number + strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                num6++;
                                if ((num6 == 5) || (k == (strArray.Length - 1)))
                                {
                                    Money += num3 * multiple;
                                    list.Add(new Lottery.Ticket(4, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                                    number = "";
                                    num3 = 0.0;
                                    num6 = 0;
                                }
                            }
                            else
                            {
                                str2 = strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num5 = 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                Money += num5 * multiple;
                                list.Add(new Lottery.Ticket(4, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, str2), multiple, num5 * multiple));
                            }
                        }
                    }
                    if (number != "")
                    {
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(4, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_RX5(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_RX5(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    string str2 = "";
                    double num5 = 0.0;
                    int num6 = 0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            if (double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]) == 1.0)
                            {
                                number = number + strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                num6++;
                                if ((num6 == 5) || (k == (strArray.Length - 1)))
                                {
                                    Money += num3 * multiple;
                                    list.Add(new Lottery.Ticket(5, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                                    number = "";
                                    num3 = 0.0;
                                    num6 = 0;
                                }
                            }
                            else
                            {
                                str2 = strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num5 = 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                Money += num5 * multiple;
                                list.Add(new Lottery.Ticket(5, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, str2), multiple, num5 * multiple));
                            }
                        }
                    }
                    if (number != "")
                    {
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(5, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_RX6(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_RX6(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    string str2 = "";
                    double num5 = 0.0;
                    int num6 = 0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            if (double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]) == 1.0)
                            {
                                number = number + strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                num6++;
                                if ((num6 == 5) || (k == (strArray.Length - 1)))
                                {
                                    Money += num3 * multiple;
                                    list.Add(new Lottery.Ticket(6, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                                    number = "";
                                    num3 = 0.0;
                                    num6 = 0;
                                }
                            }
                            else
                            {
                                str2 = strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num5 = 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                Money += num5 * multiple;
                                list.Add(new Lottery.Ticket(6, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, str2), multiple, num5 * multiple));
                            }
                        }
                    }
                    if (number != "")
                    {
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(6, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_RX7(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_RX7(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    string str2 = "";
                    double num5 = 0.0;
                    int num6 = 0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            if (double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]) == 1.0)
                            {
                                number = number + strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                num6++;
                                if ((num6 == 5) || (k == (strArray.Length - 1)))
                                {
                                    Money += num3 * multiple;
                                    list.Add(new Lottery.Ticket(7, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                                    number = "";
                                    num3 = 0.0;
                                    num6 = 0;
                                }
                            }
                            else
                            {
                                str2 = strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num5 = 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                Money += num5 * multiple;
                                list.Add(new Lottery.Ticket(7, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, str2), multiple, num5 * multiple));
                            }
                        }
                    }
                    if (number != "")
                    {
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(7, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_RX8(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_RX8(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    string str2 = "";
                    double num5 = 0.0;
                    int num6 = 0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            if (double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]) == 1.0)
                            {
                                number = number + strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                num6++;
                                if ((num6 == 5) || (k == (strArray.Length - 1)))
                                {
                                    Money += num3 * multiple;
                                    list.Add(new Lottery.Ticket(8, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                                    number = "";
                                    num3 = 0.0;
                                    num6 = 0;
                                }
                            }
                            else
                            {
                                str2 = strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num5 = 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                Money += num5 * multiple;
                                list.Add(new Lottery.Ticket(8, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, str2), multiple, num5 * multiple));
                            }
                        }
                    }
                    if (number != "")
                    {
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(8, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_ZhiQ2(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_ZhiQ2(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    string str2 = "";
                    double num5 = 0.0;
                    int num6 = 0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (!string.IsNullOrEmpty(strArray[k].ToString()) && (strArray[k].ToString().Split(new char[] { '|' }).Length >= 3))
                        {
                            if (double.Parse(strArray[k].ToString().Split(new char[] { '|' })[2]) == 1.0)
                            {
                                string str3 = number;
                                number = str3 + strArray[k].ToString().Split(new char[] { '|' })[0] + "|" + strArray[k].ToString().Split(new char[] { '|' })[1] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[2]);
                                num6++;
                                if ((num6 == 5) || (k == (strArray.Length - 1)))
                                {
                                    Money += num3 * multiple;
                                    list.Add(new Lottery.Ticket(9, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                                    number = "";
                                    num3 = 0.0;
                                    num6 = 0;
                                }
                            }
                            else
                            {
                                str2 = strArray[k].ToString().Split(new char[] { '|' })[0] + "|" + strArray[k].ToString().Split(new char[] { '|' })[1] + "\n";
                                num5 = 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[2]);
                                Money += num5 * multiple;
                                list.Add(new Lottery.Ticket(9, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, str2.Replace(" ", ",")), multiple, num5 * multiple));
                            }
                        }
                    }
                    if (number != "")
                    {
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(9, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_ZhiQ3(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_ZhiQ3(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                string str = "";
                double num4 = 0.0;
                int num5 = 0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (!string.IsNullOrEmpty(strArray[k].ToString()) && (strArray[k].ToString().Split(new char[] { '|' }).Length >= 4))
                        {
                            if (double.Parse(strArray[k].ToString().Split(new char[] { '|' })[3]) == 1.0)
                            {
                                string str3 = number;
                                number = str3 + strArray[k].ToString().Split(new char[] { '|' })[0] + "|" + strArray[k].ToString().Split(new char[] { '|' })[1] + "|" + strArray[k].ToString().Split(new char[] { '|' })[2] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[3]);
                                num5++;
                                if ((num5 == 5) || (k == (strArray.Length - 1)))
                                {
                                    Money += num3 * multiple;
                                    list.Add(new Lottery.Ticket(10, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                                    number = "";
                                    num3 = 0.0;
                                    num5 = 0;
                                }
                            }
                            else
                            {
                                str = strArray[k].ToString().Split(new char[] { '|' })[0] + "|" + strArray[k].ToString().Split(new char[] { '|' })[1] + "|" + strArray[k].ToString().Split(new char[] { '|' })[2] + "\n";
                                num4 = 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[3]);
                                Money += num4 * multiple;
                                list.Add(new Lottery.Ticket(10, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, str.Replace(" ", ",")), multiple, num4 * multiple));
                            }
                        }
                    }
                    if (number != "")
                    {
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(10, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_ZuQ2(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_ZuQ2(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    string str2 = "";
                    double num5 = 0.0;
                    int num6 = 0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            if (double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]) == 1.0)
                            {
                                number = number + strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                num6++;
                                if ((num6 == 5) || (k == (strArray.Length - 1)))
                                {
                                    Money += num3 * multiple;
                                    list.Add(new Lottery.Ticket(11, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                                    number = "";
                                    num3 = 0.0;
                                    num6 = 0;
                                }
                            }
                            else
                            {
                                str2 = strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num5 = 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                Money += num5 * multiple;
                                list.Add(new Lottery.Ticket(11, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, str2), multiple, num5 * multiple));
                            }
                        }
                    }
                    if (number != "")
                    {
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(11, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_ZuQ3(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme_ZuQ3(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    string str2 = "";
                    double num5 = 0.0;
                    int num6 = 0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            if (double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]) == 1.0)
                            {
                                number = number + strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                num6++;
                                if ((num6 == 5) || (k == (strArray.Length - 1)))
                                {
                                    Money += num3 * multiple;
                                    list.Add(new Lottery.Ticket(12, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                                    number = "";
                                    num3 = 0.0;
                                    num6 = 0;
                                }
                            }
                            else
                            {
                                str2 = strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                                num5 = 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                                Money += num5 * multiple;
                                list.Add(new Lottery.Ticket(12, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, str2), multiple, num5 * multiple));
                            }
                        }
                    }
                    if (number != "")
                    {
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(12, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x1839)
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x183a)
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x183b)
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x183c)
                {
                    return this.ToSingle_RX4(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x183d)
                {
                    return this.ToSingle_RX5(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x183e)
                {
                    return this.ToSingle_RX6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x183f)
                {
                    return this.ToSingle_RX7(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1840)
                {
                    return this.ToSingle_RX8(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1841)
                {
                    return this.ToSingle_ZhiQ2(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1842)
                {
                    return this.ToSingle_ZhiQ3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1843)
                {
                    return this.ToSingle_ZuQ2(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1844)
                {
                    return this.ToSingle_ZuQ3(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 1)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < length; j++)
                {
                    list.Add(strArray[j]);
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 1); j++)
                {
                    for (int m = j + 1; m < length; m++)
                    {
                        list.Add(strArray[j] + " " + strArray[m]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 2); j++)
                {
                    for (int m = j + 1; m < (length - 1); m++)
                    {
                        for (int n = m + 1; n < length; n++)
                        {
                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n]);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX4(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 3); j++)
                {
                    for (int m = j + 1; m < (length - 2); m++)
                    {
                        for (int n = m + 1; n < (length - 1); n++)
                        {
                            for (int num6 = n + 1; num6 < length; num6++)
                            {
                                list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6]);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX5(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX6(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 6)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 5); j++)
                {
                    for (int m = j + 1; m < (length - 4); m++)
                    {
                        for (int n = m + 1; n < (length - 3); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 2); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 1); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < length; num8++)
                                    {
                                        list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8]);
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX7(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_RX8(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 8)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 7); j++)
                {
                    for (int m = j + 1; m < (length - 6); m++)
                    {
                        for (int n = m + 1; n < (length - 5); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 4); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 3); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 2); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < (length - 1); num9++)
                                        {
                                            for (int num10 = num9 + 1; num10 < length; num10++)
                                            {
                                                list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9] + " " + strArray[num10]);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZhiQ2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { '|' })[0].Trim().Split(new char[] { ' ' }), 11);
                string[] strArray2 = this.FilterRepeated(Number.Trim().Split(new char[] { '|' })[1].Trim().Split(new char[] { ' ' }), 11);
                if ((strArray.Length < 1) && (strArray2.Length < 1))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                CanonicalNumber = CanonicalNumber + "|";
                for (int j = 0; j < strArray2.Length; j++)
                {
                    CanonicalNumber = CanonicalNumber + strArray2[j] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                int num4 = strArray2.Length;
                for (int k = 0; k < length; k++)
                {
                    for (int n = 0; n < num4; n++)
                    {
                        if (strArray[k] != strArray2[n])
                        {
                            list.Add(strArray[k] + " " + strArray2[n]);
                        }
                    }
                }
                string[] strArray3 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray3[m] = list[m].ToString();
                }
                return strArray3;
            }

            private string[] ToSingle_ZhiQ3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { '|' })[0].Trim().Split(new char[] { ' ' }), 11);
                string[] strArray2 = this.FilterRepeated(Number.Trim().Split(new char[] { '|' })[1].Trim().Split(new char[] { ' ' }), 11);
                string[] strArray3 = this.FilterRepeated(Number.Trim().Split(new char[] { '|' })[2].Trim().Split(new char[] { ' ' }), 11);
                if (((strArray.Length < 1) && (strArray2.Length < 1)) && (strArray3.Length < 1))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                CanonicalNumber = CanonicalNumber + "|";
                for (int j = 0; j < strArray2.Length; j++)
                {
                    CanonicalNumber = CanonicalNumber + strArray2[j] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                CanonicalNumber = CanonicalNumber + "|";
                for (int k = 0; k < strArray3.Length; k++)
                {
                    CanonicalNumber = CanonicalNumber + strArray3[k] + " ";
                }
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                int num5 = strArray2.Length;
                int num6 = strArray3.Length;
                for (int m = 0; m < length; m++)
                {
                    for (int num8 = 0; num8 < num5; num8++)
                    {
                        for (int num9 = 0; num9 < num6; num9++)
                        {
                            if (((strArray[m] != strArray2[num8]) && (strArray2[num8] != strArray3[num9])) && (strArray3[num9] != strArray[m]))
                            {
                                list.Add(strArray[m] + " " + strArray2[num8] + " " + strArray3[num9]);
                            }
                        }
                    }
                }
                string[] strArray4 = new string[list.Count];
                for (int n = 0; n < list.Count; n++)
                {
                    strArray4[n] = list[n].ToString();
                }
                return strArray4;
            }

            private string[] ToSingle_ZuQ2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 1); j++)
                {
                    for (int m = j + 1; m < length; m++)
                    {
                        list.Add(strArray[j] + " " + strArray[m]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZuQ3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 11);
                CanonicalNumber = "";
                if (strArray.Length < 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 2); j++)
                {
                    for (int m = j + 1; m < (length - 1); m++)
                    {
                        for (int n = m + 1; n < length; n++)
                        {
                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n]);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class SZFC35X7 : Lottery.LotteryBase
        {
            public const string Code = "SZFC35X7";
            public const int ID = 20;
            public const double MaxMoney = 12870.0;
            public const string Name = "深圳风采35选7";
            public const int PlayType_D = 0x7d1;
            public const int PlayType_F = 0x7d2;
            public const string sID = "20";

            public SZFC35X7()
            {
                base.id = 20;
                base.name = "深圳风采35选7";
                base.code = "SZFC35X7";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x7d1)
                {
                    str2 = @"(\d\d\s){6}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,34}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x7d1) ? 1 : 2))) && (strArray2.Length <= 6435.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){7}[+]\s\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number.Substring(0, 20), ref canonicalNumber, 0x7d1);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 7; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x24);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x7d1) && (play_type <= 0x7d2));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x19)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 0x10))
                {
                    return -3.0;
                }
                string str = WinNumber.Substring(0x17, 2);
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                double num9 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 20)
                            {
                                string[] strArray3 = new string[7];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num12 = 0;
                                bool flag = false;
                                bool flag2 = true;
                                for (int k = 0; k < 7; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag2 = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num12++;
                                    }
                                    if (str == strArray3[k])
                                    {
                                        flag = true;
                                    }
                                }
                                if (flag2)
                                {
                                    if (num12 == 7)
                                    {
                                        num++;
                                        num9 += WinMoneyList[0];
                                        WinMoneyNoWithTax += WinMoneyList[1];
                                    }
                                    else if ((num12 == 6) && flag)
                                    {
                                        num2++;
                                        num9 += WinMoneyList[2];
                                        WinMoneyNoWithTax += WinMoneyList[3];
                                    }
                                    else if (num12 == 6)
                                    {
                                        num3++;
                                        num9 += WinMoneyList[4];
                                        WinMoneyNoWithTax += WinMoneyList[5];
                                    }
                                    else if ((num12 == 5) && flag)
                                    {
                                        num4++;
                                        num9 += WinMoneyList[6];
                                        WinMoneyNoWithTax += WinMoneyList[7];
                                    }
                                    else if (num12 == 5)
                                    {
                                        num5++;
                                        num9 += WinMoneyList[8];
                                        WinMoneyNoWithTax += WinMoneyList[9];
                                    }
                                    else if ((num12 == 4) && flag)
                                    {
                                        num6++;
                                        num9 += WinMoneyList[10];
                                        WinMoneyNoWithTax += WinMoneyList[11];
                                    }
                                    else if (num12 == 4)
                                    {
                                        num7++;
                                        num9 += WinMoneyList[12];
                                        WinMoneyNoWithTax += WinMoneyList[13];
                                    }
                                    else if ((num12 == 3) && flag)
                                    {
                                        num8++;
                                        num9 += WinMoneyList[14];
                                        WinMoneyNoWithTax += WinMoneyList[15];
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "七等奖" + num7.ToString() + "注";
                }
                if (num8 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "八等奖" + num8.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num9;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x23)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x7d1, "单式"), new Lottery.PlayType(0x7d2, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                string str;
                Number = Number.Trim();
                if (Number == "")
                {
                    return "";
                }
                string[] numbers = Number.Split(new char[] { '\n' });
                if ((numbers == null) || (numbers.Length < 1))
                {
                    return "";
                }
                if ((((str = LotteryMachine) == null) || !(str == "福彩投注系统2.2")) || ((PlayTypeID != 0x7d1) && (PlayTypeID != 0x7d2)))
                {
                    return "";
                }
                return this.GetPrintKeyList_FCTZST2_2(numbers);
            }

            private string GetPrintKeyList_FCTZST2_2(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class SZKL8 : Lottery.LotteryBase
        {
            public const string Code = "SZKL8";
            public const int ID = 0x20;
            public const double MaxMoney = 2.0;
            public const string Name = "深圳快乐8";
            public const int PlayType_D = 0xc81;
            public const string sID = "32";

            public SZKL8()
            {
                base.id = 0x20;
                base.name = "深圳快乐8";
                base.code = "SZKL8";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"(\d\d\s){0,7}\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string[] strArray = this.FilterRepeated(Number.Split(new char[] { ' ' }));
                return ((strArray != null) && (strArray.Length == 20));
            }

            public override string BuildNumber(int Num, int Type)
            {
                if ((((Type != 8) && (Type != 7)) && ((Type != 6) && (Type != 5))) && (((Type != 4) && (Type != 3)) && ((Type != 2) && (Type != 1))))
                {
                    Type = 8;
                }
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < Type; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x51);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return (play_type == 0xc81);
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x3b)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 50))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                int num12 = 0;
                int num13 = 0;
                int num14 = 0;
                int num15 = 0;
                int num16 = 0;
                int num17 = 0;
                int num18 = 0;
                int num19 = 0;
                int num20 = 0;
                int num21 = 0;
                int num22 = 0;
                int num23 = 0;
                int num24 = 0;
                int num25 = 0;
                double num26 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, 0xc81);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            int num29 = 0;
                            int num30 = 0;
                            int num31 = 0;
                            int num32 = 0;
                            int num33 = 0;
                            int num34 = 0;
                            int num35 = 0;
                            int num36 = 0;
                            int num37 = 0;
                            int num38 = 0;
                            int num39 = 0;
                            int num40 = 0;
                            int num41 = 0;
                            int num42 = 0;
                            int num43 = 0;
                            int num44 = 0;
                            int num45 = 0;
                            int num46 = 0;
                            int num47 = 0;
                            int num48 = 0;
                            int num49 = 0;
                            int num50 = 0;
                            int num51 = 0;
                            int num52 = 0;
                            int num53 = 0;
                            double num54 = 0.0;
                            double winMoneyNoWithTax = 0.0;
                            switch ((_String.StringAt(strArray2[j], ' ') + 1))
                            {
                                case 1:
                                    num54 = this.ComputeWin_1(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x30], WinMoneyList[0x31], ref num53);
                                    break;

                                case 2:
                                    num54 = this.ComputeWin_2(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x2e], WinMoneyList[0x2f], ref num52);
                                    break;

                                case 3:
                                    num54 = this.ComputeWin_3(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x2a], WinMoneyList[0x2b], WinMoneyList[0x2c], WinMoneyList[0x2d], ref num50, ref num51);
                                    break;

                                case 4:
                                    num54 = this.ComputeWin_4(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x24], WinMoneyList[0x25], WinMoneyList[0x26], WinMoneyList[0x27], WinMoneyList[40], WinMoneyList[0x29], ref num47, ref num48, ref num49);
                                    break;

                                case 5:
                                    num54 = this.ComputeWin_5(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[30], WinMoneyList[0x1f], WinMoneyList[0x20], WinMoneyList[0x21], WinMoneyList[0x22], WinMoneyList[0x23], ref num44, ref num45, ref num46);
                                    break;

                                case 6:
                                    num54 = this.ComputeWin_6(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0x16], WinMoneyList[0x17], WinMoneyList[0x18], WinMoneyList[0x19], WinMoneyList[0x1a], WinMoneyList[0x1b], WinMoneyList[0x1c], WinMoneyList[0x1d], ref num40, ref num41, ref num42, ref num43);
                                    break;

                                case 7:
                                    num54 = this.ComputeWin_7(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13], WinMoneyList[20], WinMoneyList[0x15], ref num35, ref num36, ref num37, ref num38, ref num39);
                                    break;

                                case 8:
                                    num54 = this.ComputeWin_8(strArray2[j], WinNumber, ref winMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], ref num29, ref num30, ref num31, ref num32, ref num33, ref num34);
                                    break;

                                default:
                                    goto Label_0405;
                            }
                            num += num29;
                            num2 += num30;
                            num3 += num31;
                            num4 += num32;
                            num5 += num33;
                            num6 += num34;
                            num7 += num35;
                            num8 += num36;
                            num9 += num37;
                            num10 += num38;
                            num11 += num39;
                            num12 += num40;
                            num13 += num41;
                            num14 += num42;
                            num15 += num43;
                            num16 += num44;
                            num17 += num45;
                            num18 += num46;
                            num19 += num47;
                            num20 += num48;
                            num21 += num49;
                            num22 += num50;
                            num23 += num51;
                            num24 += num52;
                            num25 += num53;
                            num26 += num54;
                            WinMoneyNoWithTax += winMoneyNoWithTax;
                        Label_0405:;
                        }
                    }
                }
                Description = "";
                if (num > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中8奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中7奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中6奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中5奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中4奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选8中0奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中7奖" + num7.ToString() + "注";
                }
                if (num8 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中6奖" + num8.ToString() + "注";
                }
                if (num9 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中5奖" + num9.ToString() + "注";
                }
                if (num10 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中4奖" + num10.ToString() + "注";
                }
                if (num11 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选7中0奖" + num11.ToString() + "注";
                }
                if (num12 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选6中6奖" + num12.ToString() + "注";
                }
                if (num13 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选6中5奖" + num13.ToString() + "注";
                }
                if (num14 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选6中4奖" + num14.ToString() + "注";
                }
                if (num15 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选6中3奖" + num15.ToString() + "注";
                }
                if (num16 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选5中5奖" + num16.ToString() + "注";
                }
                if (num17 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选5中4奖" + num17.ToString() + "注";
                }
                if (num18 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选5中3奖" + num18.ToString() + "注";
                }
                if (num19 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选4中4奖" + num19.ToString() + "注";
                }
                if (num20 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选4中3奖" + num20.ToString() + "注";
                }
                if (num21 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选4中2奖" + num21.ToString() + "注";
                }
                if (num22 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选3中3奖" + num22.ToString() + "注";
                }
                if (num23 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选3中2奖" + num23.ToString() + "注";
                }
                if (num24 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选2中2奖" + num24.ToString() + "注";
                }
                if (num25 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "选2中2奖" + num25.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num26;
            }

            private double ComputeWin_1(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int Description1)
            {
                Description1 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                if (WinNumber.IndexOf(Number) >= 0)
                {
                    Description1++;
                    num += WinMoney1;
                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                }
                return num;
            }

            private double ComputeWin_2(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int Description1)
            {
                Description1 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[2];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                if (num2 == 2)
                {
                    Description1++;
                    num += WinMoney1;
                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                }
                return num;
            }

            private double ComputeWin_3(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int Description1, ref int Description2)
            {
                Description1 = 0;
                Description2 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[3];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 3:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 2:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;
                }
                return num;
            }

            private double ComputeWin_4(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, ref int Description1, ref int Description2, ref int Description3)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[4];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 4:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 3:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 2:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;
                }
                return num;
            }

            private double ComputeWin_5(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, ref int Description1, ref int Description2, ref int Description3)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[5];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 5:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 4:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 3:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;
                }
                return num;
            }

            private double ComputeWin_6(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, ref int Description1, ref int Description2, ref int Description3, ref int Description4)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                Description4 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[6];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 6; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 6:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 5:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 4:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;

                    case 3:
                        Description4++;
                        num += WinMoney4;
                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                        return num;
                }
                return num;
            }

            private double ComputeWin_7(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, ref int Description1, ref int Description2, ref int Description3, ref int Description4, ref int Description5)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                Description4 = 0;
                Description5 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[7];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 7; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 7:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 6:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 5:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;

                    case 4:
                        Description4++;
                        num += WinMoney4;
                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                        return num;

                    case 0:
                        Description5++;
                        num += WinMoney5;
                        WinMoneyNoWithTax += WinMoneyNoWithTax5;
                        return num;
                }
                return num;
            }

            private double ComputeWin_8(string Number, string WinNumber, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, ref int Description1, ref int Description2, ref int Description3, ref int Description4, ref int Description5, ref int Description6)
            {
                Description1 = 0;
                Description2 = 0;
                Description3 = 0;
                Description4 = 0;
                Description5 = 0;
                Description6 = 0;
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                string[] strArray = new string[8];
                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d\s)(?<R7>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                int num2 = 0;
                for (int i = 0; i < 8; i++)
                {
                    strArray[i] = match.Groups["R" + i.ToString()].ToString().Trim();
                    if (WinNumber.IndexOf(strArray[i]) >= 0)
                    {
                        num2++;
                    }
                }
                switch (num2)
                {
                    case 8:
                        Description1++;
                        num += WinMoney1;
                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                        return num;

                    case 7:
                        Description2++;
                        num += WinMoney2;
                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                        return num;

                    case 6:
                        Description3++;
                        num += WinMoney3;
                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                        return num;

                    case 5:
                        Description4++;
                        num += WinMoney4;
                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                        return num;

                    case 4:
                        Description5++;
                        num += WinMoney5;
                        WinMoneyNoWithTax += WinMoneyNoWithTax5;
                        return num;

                    case 0:
                        Description6++;
                        num += WinMoney6;
                        WinMoneyNoWithTax += WinMoneyNoWithTax6;
                        return num;
                }
                return num;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 80)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xc81, "代购") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 1)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; (i < strArray.Length) && (i < 8); i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                return new string[] { CanonicalNumber };
            }
        }

        public class SZPL : Lottery.LotteryBase
        {
            public const string Code = "SZPL";
            public const int ID = 4;
            public const double MaxMoney = 20000.0;
            public const string Name = "数字排列";
            public const int PlayType_3_ZhiD = 0x191;
            public const int PlayType_3_ZhiF = 0x192;
            public const int PlayType_3_ZhiH = 0x196;
            public const int PlayType_3_Zu3F = 0x195;
            public const int PlayType_3_Zu6F = 0x194;
            public const int PlayType_3_ZuD = 0x193;
            public const int PlayType_3_ZuH = 0x197;
            public const int PlayType_5_D = 0x198;
            public const int PlayType_5_F = 0x199;
            public const string sID = "4";

            public SZPL()
            {
                base.id = 4;
                base.name = "数字排列";
                base.code = "SZPL";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0x191) || (PlayType == 0x192))
                {
                    return this.AnalyseScheme_3(Content, PlayType);
                }
                if ((PlayType == 0x193) || (PlayType == 0x194))
                {
                    return this.AnalyseScheme_Zu3D_Zu6(Content, PlayType);
                }
                if (PlayType == 0x195)
                {
                    return this.AnalyseScheme_Zu3F(Content, PlayType);
                }
                if (PlayType == 0x196)
                {
                    return this.AnalyseScheme_ZhiH(Content, PlayType);
                }
                if (PlayType == 0x197)
                {
                    return this.AnalyseScheme_ZuH(Content, PlayType);
                }
                if ((PlayType != 0x198) && (PlayType != 0x199))
                {
                    return "";
                }
                return this.AnalyseScheme_5(Content, PlayType);
            }

            private string AnalyseScheme_3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x191)
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){3}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x191) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_5(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x198)
                {
                    str2 = @"([\d]){5}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){5}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_5(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x198) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3D_Zu6(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x193)
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"([\d]){3,10}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3D_Zu6(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x193) ? 1 : 2)))
                        {
                            if (this.FilterRepeated(base.Sort(match.Value)).Length == 2)
                            {
                                if (PlayType != 0x194)
                                {
                                    str = str + match.Value + "|1\n";
                                }
                            }
                            else
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_5(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num, int Type)
            {
                if ((Type != 3) && (Type != 5))
                {
                    Type = 5;
                }
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < Type; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x191) && (play_type <= 0x199));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 8))
                {
                    return -3.0;
                }
                if ((PlayType == 0x191) || (PlayType == 0x192))
                {
                    return this.ComputeWin_3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if ((PlayType == 0x193) || (PlayType == 0x194))
                {
                    return this.ComputeWin_Zu3D_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x195)
                {
                    return this.ComputeWin_Zu3F(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3]);
                }
                if (PlayType == 0x196)
                {
                    return this.ComputeWin_ZhiH(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (PlayType == 0x197)
                {
                    return this.ComputeWin_ZuH(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if ((PlayType != 0x198) && (PlayType != 0x199))
                {
                    return -4.0;
                }
                return this.ComputeWin_5(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[6], WinMoneyList[7]);
            }

            private double ComputeWin_3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "单选奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_5(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_5(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 5) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "排列5直选奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZhiH(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiH(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "单选奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu3D_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                double num3 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    if (strArray[i].Length >= 3)
                    {
                        if (this.FilterRepeated(base.Sort(strArray[i])).Length == 2)
                        {
                            if (base.Sort(strArray[i]) == base.Sort(WinNumber))
                            {
                                num++;
                                num3 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                        else
                        {
                            string[] strArray2 = this.ToSingle_Zu3D_Zu6(strArray[i], ref canonicalNumber);
                            if ((strArray2 != null) && (strArray2.Length >= 1))
                            {
                                for (int j = 0; j < strArray2.Length; j++)
                                {
                                    if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                                    {
                                        num2++;
                                        num3 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选3奖" + num.ToString() + "注。";
                }
                if (num2 > 0)
                {
                    Description = "组选6奖" + num2.ToString() + "注。";
                }
                return num3;
            }

            private double ComputeWin_Zu3F(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu3F(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选3奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZuH(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                double num3 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuH(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (this.FilterRepeated(strArray2[j]).Length == 2)
                                {
                                    num++;
                                    num3 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    num2++;
                                    num3 += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选3奖" + num.ToString() + "注。";
                }
                if (num2 > 0)
                {
                    Description = "组选6奖" + num2.ToString() + "注。";
                }
                return num3;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x191, "排列3直选单式"), new Lottery.PlayType(0x192, "排列3直选复式"), new Lottery.PlayType(0x193, "排列3组选单式"), new Lottery.PlayType(0x194, "排列3组选6复式"), new Lottery.PlayType(0x195, "排列3组选3复式"), new Lottery.PlayType(0x196, "排列3直选和值"), new Lottery.PlayType(0x197, "排列3组选和值"), new Lottery.PlayType(0x198, "排列5单式"), new Lottery.PlayType(0x199, "排列5复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    switch (LotteryMachine)
                    {
                        case "CR_YTCII2":
                            if (PlayTypeID != 0x191)
                            {
                                if (PlayTypeID == 0x192)
                                {
                                    return this.GetPrintKeyList_CR_YTCII2_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x193)
                                {
                                    return this.GetPrintKeyList_CR_YTCII2_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x195)
                                {
                                    return this.GetPrintKeyList_CR_YTCII2_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x194)
                                {
                                    return this.GetPrintKeyList_CR_YTCII2_ZhiD(numbers);
                                }
                                if ((PlayTypeID == 0x196) || (PlayTypeID == 0x197))
                                {
                                    return this.GetPrintKeyList_CR_YTCII2_H(numbers);
                                }
                                if (PlayTypeID == 0x198)
                                {
                                    return this.GetPrintKeyList_CR_YTCII2_ZhiD(numbers);
                                }
                                if (PlayTypeID != 0x199)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CR_YTCII2_5_F(numbers);
                            }
                            return this.GetPrintKeyList_CR_YTCII2_ZhiD(numbers);

                        case "TCBJYTD":
                            if (PlayTypeID != 0x191)
                            {
                                if (PlayTypeID == 0x192)
                                {
                                    return this.GetPrintKeyList_TCBJYTD_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x193)
                                {
                                    return this.GetPrintKeyList_TCBJYTD_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x195)
                                {
                                    return this.GetPrintKeyList_TCBJYTD_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x194)
                                {
                                    return this.GetPrintKeyList_TCBJYTD_ZhiD(numbers);
                                }
                                if ((PlayTypeID == 0x196) || (PlayTypeID == 0x197))
                                {
                                    return this.GetPrintKeyList_TCBJYTD_H(numbers);
                                }
                                if (PlayTypeID == 0x198)
                                {
                                    return this.GetPrintKeyList_TCBJYTD_ZhiD(numbers);
                                }
                                if (PlayTypeID != 0x199)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TCBJYTD_5_F(numbers);
                            }
                            return this.GetPrintKeyList_TCBJYTD_ZhiD(numbers);

                        case "TGAMPOS4000":
                            if (PlayTypeID != 0x191)
                            {
                                if (PlayTypeID == 0x192)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x193)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x195)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x194)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_ZhiD(numbers);
                                }
                                if ((PlayTypeID == 0x196) || (PlayTypeID == 0x197))
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_H(numbers);
                                }
                                if (PlayTypeID == 0x198)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_ZhiD(numbers);
                                }
                                if (PlayTypeID != 0x199)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TGAMPOS4000_5_F(numbers);
                            }
                            return this.GetPrintKeyList_TGAMPOS4000_ZhiD(numbers);

                        case "CP86":
                            if (PlayTypeID != 0x191)
                            {
                                if (PlayTypeID == 0x192)
                                {
                                    return this.GetPrintKeyList_CP86_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x193)
                                {
                                    return this.GetPrintKeyList_CP86_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x195)
                                {
                                    return this.GetPrintKeyList_CP86_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x194)
                                {
                                    return this.GetPrintKeyList_CP86_ZhiD(numbers);
                                }
                                if ((PlayTypeID == 0x196) || (PlayTypeID == 0x197))
                                {
                                    return this.GetPrintKeyList_CP86_H(numbers);
                                }
                                if (PlayTypeID == 0x198)
                                {
                                    return this.GetPrintKeyList_CP86_ZhiD(numbers);
                                }
                                if (PlayTypeID != 0x199)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CP86_5_F(numbers);
                            }
                            return this.GetPrintKeyList_CP86_ZhiD(numbers);

                        case "MODEL_4000":
                            if (PlayTypeID != 0x191)
                            {
                                if (PlayTypeID == 0x192)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x193)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x195)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x194)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_ZhiD(numbers);
                                }
                                if ((PlayTypeID == 0x196) || (PlayTypeID == 0x197))
                                {
                                    return this.GetPrintKeyList_MODEL_4000_H(numbers);
                                }
                                if (PlayTypeID == 0x198)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_ZhiD(numbers);
                                }
                                if (PlayTypeID != 0x199)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_MODEL_4000_5_F(numbers);
                            }
                            return this.GetPrintKeyList_MODEL_4000_ZhiD(numbers);

                        case "CORONISTPT":
                            if (PlayTypeID != 0x191)
                            {
                                if (PlayTypeID == 0x192)
                                {
                                    return this.GetPrintKeyList_CORONISTPT_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x193)
                                {
                                    return this.GetPrintKeyList_CORONISTPT_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x195)
                                {
                                    return this.GetPrintKeyList_CORONISTPT_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x194)
                                {
                                    return this.GetPrintKeyList_CORONISTPT_ZhiD(numbers);
                                }
                                if ((PlayTypeID == 0x196) || (PlayTypeID == 0x197))
                                {
                                    return this.GetPrintKeyList_CORONISTPT_H(numbers);
                                }
                                if (PlayTypeID == 0x198)
                                {
                                    return this.GetPrintKeyList_CORONISTPT_ZhiD(numbers);
                                }
                                if (PlayTypeID != 0x199)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CORONISTPT_5_F(numbers);
                            }
                            return this.GetPrintKeyList_CORONISTPT_ZhiD(numbers);

                        case "RS6500":
                            if (PlayTypeID != 0x191)
                            {
                                if (PlayTypeID == 0x192)
                                {
                                    return this.GetPrintKeyList_RS6500_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x193)
                                {
                                    return this.GetPrintKeyList_RS6500_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x195)
                                {
                                    return this.GetPrintKeyList_RS6500_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x194)
                                {
                                    return this.GetPrintKeyList_RS6500_ZhiD(numbers);
                                }
                                if ((PlayTypeID == 0x196) || (PlayTypeID == 0x197))
                                {
                                    return this.GetPrintKeyList_RS6500_H(numbers);
                                }
                                if (PlayTypeID == 0x198)
                                {
                                    return this.GetPrintKeyList_RS6500_ZhiD(numbers);
                                }
                                if (PlayTypeID != 0x199)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_RS6500_5_F(numbers);
                            }
                            return this.GetPrintKeyList_RS6500_ZhiD(numbers);

                        case "ks230":
                            if (PlayTypeID != 0x191)
                            {
                                if (PlayTypeID == 0x192)
                                {
                                    return this.GetPrintKeyList_ks230_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x193)
                                {
                                    return this.GetPrintKeyList_ks230_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x195)
                                {
                                    return this.GetPrintKeyList_ks230_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x194)
                                {
                                    return this.GetPrintKeyList_ks230_ZhiD(numbers);
                                }
                                if ((PlayTypeID == 0x196) || (PlayTypeID == 0x197))
                                {
                                    return this.GetPrintKeyList_ks230_H(numbers);
                                }
                                if (PlayTypeID == 0x198)
                                {
                                    return this.GetPrintKeyList_ks230_ZhiD(numbers);
                                }
                                if (PlayTypeID != 0x199)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_ks230_5_F(numbers);
                            }
                            return this.GetPrintKeyList_ks230_ZhiD(numbers);

                        case "LA-600A":
                            if (PlayTypeID != 0x191)
                            {
                                if (PlayTypeID == 0x192)
                                {
                                    return this.GetPrintKeyList_LA_600A_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x193)
                                {
                                    return this.GetPrintKeyList_LA_600A_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x195)
                                {
                                    return this.GetPrintKeyList_LA_600A_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x194)
                                {
                                    return this.GetPrintKeyList_LA_600A_ZhiD(numbers);
                                }
                                if ((PlayTypeID == 0x196) || (PlayTypeID == 0x197))
                                {
                                    return this.GetPrintKeyList_LA_600A_H(numbers);
                                }
                                if (PlayTypeID == 0x198)
                                {
                                    return this.GetPrintKeyList_LA_600A_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x199)
                                {
                                    return this.GetPrintKeyList_LA_600A_5_F(numbers);
                                }
                                break;
                            }
                            return this.GetPrintKeyList_LA_600A_ZhiD(numbers);
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CORONISTPT_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0x191) || (PlayType == 0x192))
                {
                    return this.ToSingle_3(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x193) || (PlayType == 0x194))
                {
                    return this.ToSingle_Zu3D_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x195)
                {
                    return this.ToSingle_Zu3F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x196)
                {
                    return this.ToSingle_ZhiH(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x197)
                {
                    return this.ToSingle_ZuH(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x198) && (PlayType != 0x199))
                {
                    return null;
                }
                return this.ToSingle_5(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_13(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[2];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))[-](?<L1>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                    if (i == 0)
                    {
                        CanonicalNumber = CanonicalNumber + "-";
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + "-" + strArray[1][m].ToString();
                        list.Add(str2);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[2];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        list.Add(str2);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[3];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            list.Add(str3);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_3_ZhiDanT(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[2];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d){1,2})[,](?<L1>(\d){1,9})", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 0)
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                    strArray[i] = this.FilterRepeated(strArray[i]);
                }
                if ((strArray[0].Length + strArray[1].Length) < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                char[] chArray = strArray[1].ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                if (strArray[0].Length == 1)
                {
                    for (int m = 0; m < (length - 1); m++)
                    {
                        for (int n = m + 1; n < length; n++)
                        {
                            list.Add(strArray[0] + chArray[m].ToString() + chArray[n].ToString());
                        }
                    }
                }
                else
                {
                    for (int num5 = 0; num5 < length; num5++)
                    {
                        list.Add(strArray[0] + chArray[num5]);
                    }
                }
                ArrayList list2 = new ArrayList();
                for (int j = 0; j < 3; j++)
                {
                    for (int num7 = 0; num7 < 3; num7++)
                    {
                        for (int num8 = 0; num8 < 3; num8++)
                        {
                            for (int num9 = 0; num9 < list.Count; num9++)
                            {
                                if (((j != num7) && (num7 != num8)) && (num8 != j))
                                {
                                    char[] chArray2 = list[num9].ToString().ToCharArray();
                                    list2.Add(chArray2[j].ToString() + chArray2[num7].ToString() + chArray2[num8].ToString());
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list2.Count];
                for (int k = 0; k < list2.Count; k++)
                {
                    strArray2[k] = list2[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_3_Zu3DanT(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex(@"(\d){1,10}", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                if (!match.Success)
                {
                    return null;
                }
                ArrayList list = new ArrayList();
                for (int i = 0; i < 10; i++)
                {
                    for (int k = 0; k < match.Value.Length; k++)
                    {
                        if (i != int.Parse(match.Value.Substring(k, 1)))
                        {
                            list.Add(i.ToString() + i.ToString() + match.Value.Substring(k, 1));
                            list.Add(i.ToString() + match.Value.Substring(k, 1) + match.Value.Substring(k, 1));
                        }
                    }
                }
                CanonicalNumber = match.Value;
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_3_Zu6DanT(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex(@"(\d){1,10}", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                if (!match.Success)
                {
                    return null;
                }
                ArrayList list = new ArrayList();
                for (int i = 0; i < 9; i++)
                {
                    for (int k = i + 1; k < 10; k++)
                    {
                        for (int m = 0; m < match.Value.Length; m++)
                        {
                            if ((i != int.Parse(match.Value.Substring(m, 1))) && (k != int.Parse(match.Value.Substring(m, 1))))
                            {
                                list.Add(i.ToString() + k.ToString() + match.Value.Substring(m, 1));
                            }
                        }
                    }
                }
                CanonicalNumber = match.Value;
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_5(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[5];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    list.Add(str5);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_BuDWD(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex(@"((\d){1,10})", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                if (match.Success)
                {
                    CanonicalNumber = this.FilterRepeated(match.Value);
                }
                ArrayList list = new ArrayList();
                for (int i = 0; i < CanonicalNumber.Length; i++)
                {
                    list.Add(CanonicalNumber.Substring(i, 1));
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_DWD(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[3];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>((\d){1,10})|[-])[,](?<L1>((\d){1,10})|[-])[,](?<L2>((\d){1,10})|[-])", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    strArray[i] = this.FilterRepeated(strArray[i]);
                    CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                if (CanonicalNumber == "-,-,-")
                {
                    CanonicalNumber = "";
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < 3; j++)
                {
                    if (strArray[j].Length > 1)
                    {
                        if (j == 0)
                        {
                            for (int m = 0; m < strArray[0].Length; m++)
                            {
                                list.Add(strArray[j].Substring(m, 1) + ",-,-");
                            }
                        }
                        if (j == 1)
                        {
                            for (int n = 0; n < strArray[1].Length; n++)
                            {
                                list.Add("-," + strArray[j].Substring(n, 1) + ",-");
                            }
                        }
                        if (j == 2)
                        {
                            for (int num5 = 0; num5 < strArray[2].Length; num5++)
                            {
                                list.Add("-,-," + strArray[j].Substring(num5, 1));
                            }
                        }
                    }
                    else if (strArray[j] != "-")
                    {
                        switch (j)
                        {
                            case 0:
                                list.Add(strArray[0] + ",-,-");
                                break;

                            case 1:
                                list.Add("-," + strArray[1] + ",-");
                                break;

                            case 2:
                                list.Add("-,-," + strArray[2]);
                                goto Label_01EC;
                        }
                    Label_01EC:;
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_DX_1WDW(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>([大小单双])|(-))(?<L1>([大小单双])|(-))(?<L2>([大小单双])|(-))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str;
                }
                if (CanonicalNumber.Replace("-", "").Length != 1)
                {
                    CanonicalNumber = "";
                    return null;
                }
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_DX_H3WDW(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>([大小单双]))(?<L1>([大小单双]))(?<L2>([大小单双]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str;
                }
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_ZhiH(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 0) || (num > 0x1b))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        for (int m = 0; m <= 9; m++)
                        {
                            if (((i + k) + m) == num)
                            {
                                list.Add(i.ToString() + k.ToString() + m.ToString());
                            }
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZhiKD(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex(@"((\d){1})", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                if (match.Success)
                {
                    CanonicalNumber = match.Value;
                }
                ArrayList list = new ArrayList();
                for (int i = 0; i < (10 - int.Parse(CanonicalNumber)); i++)
                {
                    for (int n = i + 1; n < (int.Parse(CanonicalNumber) + i); n++)
                    {
                        list.Add(i.ToString() + n.ToString() + ((int.Parse(CanonicalNumber) + i)).ToString());
                    }
                }
                ArrayList list2 = new ArrayList();
                for (int j = 0; j < 3; j++)
                {
                    for (int num4 = 0; num4 < 3; num4++)
                    {
                        for (int num5 = 0; num5 < 3; num5++)
                        {
                            for (int num6 = 0; num6 < list.Count; num6++)
                            {
                                if (((j != num4) && (num4 != num5)) && (num5 != j))
                                {
                                    char[] chArray = list[num6].ToString().ToCharArray();
                                    list2.Add(chArray[j].ToString() + chArray[num4].ToString() + chArray[num5].ToString());
                                }
                            }
                        }
                    }
                }
                for (int k = 0; k < (10 - int.Parse(CanonicalNumber)); k++)
                {
                    if (int.Parse(CanonicalNumber) == 0)
                    {
                        list2.Add(k.ToString() + k.ToString() + k.ToString());
                    }
                    else
                    {
                        list2.Add(k.ToString() + ((int.Parse(CanonicalNumber) + k)).ToString() + ((int.Parse(CanonicalNumber) + k)).ToString());
                        list2.Add(k.ToString() + k.ToString() + ((int.Parse(CanonicalNumber) + k)).ToString());
                        list2.Add(((int.Parse(CanonicalNumber) + k)).ToString() + ((int.Parse(CanonicalNumber) + k)).ToString() + k.ToString());
                        list2.Add(((int.Parse(CanonicalNumber) + k)).ToString() + k.ToString() + k.ToString());
                        list2.Add(((int.Parse(CanonicalNumber) + k)).ToString() + k.ToString() + ((int.Parse(CanonicalNumber) + k)).ToString());
                        list2.Add(k.ToString() + ((int.Parse(CanonicalNumber) + k)).ToString() + k.ToString());
                    }
                }
                string[] strArray = new string[list2.Count];
                for (int m = 0; m < list2.Count; m++)
                {
                    strArray[m] = list2[m].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3D_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                if (length == 2)
                {
                    for (int j = 0; j < (length - 1); j++)
                    {
                        for (int k = j + 1; k < length; k++)
                        {
                            list.Add(chArray[j].ToString() + chArray[j].ToString() + chArray[k].ToString());
                            list.Add(chArray[j].ToString() + chArray[k].ToString() + chArray[k].ToString());
                        }
                    }
                }
                else
                {
                    for (int m = 0; m < (length - 2); m++)
                    {
                        for (int n = m + 1; n < (length - 1); n++)
                        {
                            for (int num6 = n + 1; num6 < length; num6++)
                            {
                                list.Add(chArray[m].ToString() + chArray[n].ToString() + chArray[num6].ToString());
                            }
                        }
                    }
                }
                string[] strArray = new string[list.Count];
                for (int i = 0; i < list.Count; i++)
                {
                    strArray[i] = list[i].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[i].ToString() + chArray[k].ToString());
                        list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3KD(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex(@"((\d){1})", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                if (match.Success)
                {
                    CanonicalNumber = match.Value;
                }
                ArrayList list = new ArrayList();
                for (int i = 0; i < (10 - int.Parse(CanonicalNumber)); i++)
                {
                    list.Add(i.ToString() + ((int.Parse(CanonicalNumber) + i)).ToString() + ((int.Parse(CanonicalNumber) + i)).ToString());
                    list.Add(i.ToString() + i.ToString() + ((int.Parse(CanonicalNumber) + i)).ToString());
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu6KD(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex(@"((\d){1})", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                if (match.Success)
                {
                    CanonicalNumber = match.Value;
                }
                ArrayList list = new ArrayList();
                for (int i = 0; i < (10 - int.Parse(CanonicalNumber)); i++)
                {
                    for (int k = i + 1; k < (int.Parse(CanonicalNumber) + i); k++)
                    {
                        list.Add(i.ToString() + k.ToString() + ((int.Parse(CanonicalNumber) + i)).ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZuH(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                ArrayList list = new ArrayList();
                if ((num < 1) || (num > 0x1a))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        if ((i != k) && (((i + i) + k) == num))
                        {
                            list.Add(i.ToString() + i.ToString() + k.ToString());
                        }
                    }
                }
                if ((num >= 3) && (num <= 0x18))
                {
                    for (int m = 0; m <= 7; m++)
                    {
                        for (int n = m + 1; n <= 8; n++)
                        {
                            for (int num6 = n + 1; num6 <= 9; num6++)
                            {
                                if (((m + n) + num6) == num)
                                {
                                    list.Add(m.ToString() + n.ToString() + num6.ToString());
                                }
                            }
                        }
                    }
                }
                CanonicalNumber = num.ToString();
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }
        }

        public class SZPL3 : Lottery.LotteryBase
        {
            public const string Code = "SZPL3";
            public const int ID = 0x3f;
            public const double MaxMoney = 20000.0;
            public const string Name = "数字排列3";
            public const int PlayType_3_ZhiD = 0x189d;
            public const int PlayType_3_ZhiF = 0x189e;
            public const int PlayType_3_ZhiH = 0x18a2;
            public const int PlayType_3_Zu3F = 0x18a1;
            public const int PlayType_3_Zu6F = 0x18a0;
            public const int PlayType_3_ZuD = 0x189f;
            public const int PlayType_3_ZuH = 0x18a3;
            public const string sID = "63";

            public SZPL3()
            {
                base.id = 0x3f;
                base.name = "数字排列3";
                base.code = "SZPL3";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0x189d) || (PlayType == 0x189e))
                {
                    return this.AnalyseScheme_3(Content, PlayType);
                }
                if ((PlayType == 0x189f) || (PlayType == 0x18a0))
                {
                    return this.AnalyseScheme_Zu3D_Zu6(Content, PlayType);
                }
                if (PlayType == 0x18a1)
                {
                    return this.AnalyseScheme_Zu3F(Content, PlayType);
                }
                if (PlayType == 0x18a2)
                {
                    return this.AnalyseScheme_ZhiH(Content, PlayType);
                }
                if (PlayType == 0x18a3)
                {
                    return this.AnalyseScheme_ZuH(Content, PlayType);
                }
                return "";
            }

            private string AnalyseScheme_3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x189d)
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){3}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x189d) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZhiH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZhiH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3D_Zu6(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x189f)
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"([\d]){3,10}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3D_Zu6(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x189f) ? 1 : 2)))
                        {
                            if (this.FilterRepeated(base.Sort(match.Value)).Length == 2)
                            {
                                if (PlayType != 0x18a0)
                                {
                                    str = str + match.Value + "|1\n";
                                }
                            }
                            else
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu3F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu3F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZuH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZuH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_3(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 3; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x189d) && (play_type <= 0x18a3));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((PlayType == 0x189d) || (PlayType == 0x189e))
                {
                    return this.ComputeWin_3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if ((PlayType == 0x189f) || (PlayType == 0x18a0))
                {
                    return this.ComputeWin_Zu3D_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x18a1)
                {
                    return this.ComputeWin_Zu3F(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3]);
                }
                if (PlayType == 0x18a2)
                {
                    return this.ComputeWin_ZhiH(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (PlayType == 0x18a3)
                {
                    return this.ComputeWin_ZuH(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                return -4.0;
            }

            private double ComputeWin_3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "单选奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZhiH(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZhiH(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "单选奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu3D_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                double num3 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    if (strArray[i].Length >= 3)
                    {
                        if (this.FilterRepeated(base.Sort(strArray[i])).Length == 2)
                        {
                            if (base.Sort(strArray[i]) == base.Sort(WinNumber))
                            {
                                num++;
                                num3 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                        else
                        {
                            string[] strArray2 = this.ToSingle_Zu3D_Zu6(strArray[i], ref canonicalNumber);
                            if ((strArray2 != null) && (strArray2.Length >= 1))
                            {
                                for (int j = 0; j < strArray2.Length; j++)
                                {
                                    if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                                    {
                                        num2++;
                                        num3 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选3奖" + num.ToString() + "注。";
                }
                if (num2 > 0)
                {
                    Description = "组选6奖" + num2.ToString() + "注。";
                }
                return num3;
            }

            private double ComputeWin_Zu3F(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zu3F(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选3奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_ZuH(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 3)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 3);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                double num3 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZuH(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (this.FilterRepeated(strArray2[j]).Length == 2)
                                {
                                    num++;
                                    num3 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    num2++;
                                    num3 += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选3奖" + num.ToString() + "注。";
                }
                if (num2 > 0)
                {
                    Description = "组选6奖" + num2.ToString() + "注。";
                }
                return num3;
            }

            private string ConvertFormatToElectronTicket_DYJ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string canonicalNumber = "";
                string str2 = "";
                if (((PlayTypeID == 0x189d) || (PlayTypeID == 0x189f)) || ((PlayTypeID == 0x189e) || (PlayTypeID == 0x18a2)))
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        if (PlayTypeID == 0x189d)
                        {
                            str2 = str2 + "1|";
                        }
                        else if (PlayTypeID == 0x189f)
                        {
                            str2 = str2 + "6|";
                        }
                        else if (PlayTypeID == 0x189e)
                        {
                            str2 = str2 + "1|";
                        }
                        else if (PlayTypeID == 0x18a2)
                        {
                            str2 = str2 + "s1|";
                        }
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            if (PlayTypeID == 0x189f)
                            {
                                strArray[i] = base.Sort(strArray[i]);
                            }
                            str2 = str2 + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str2.EndsWith(","))
                        {
                            str2 = str2.Substring(0, str2.Length - 1);
                        }
                        str2 = str2 + ";\n";
                    }
                    if (str2.EndsWith("\n"))
                    {
                        str2 = str2.Substring(0, str2.Length - 1);
                    }
                }
                if (PlayTypeID == 0x18a0)
                {
                    string[] singleNumber = this.ToSingle_Zu3D_Zu6(Number, ref canonicalNumber);
                    str2 = "F6|" + this.GetFormateOfElectronTicket(singleNumber) + ";";
                }
                if (PlayTypeID == 0x18a1)
                {
                    string[] strArray3 = this.ToSingle_Zu3F(Number, ref canonicalNumber);
                    str2 = "F3|" + this.GetFormateOfElectronTicket(strArray3) + ";";
                }
                if (PlayTypeID == 0x18a3)
                {
                    string[] strArray4 = this.ToSingle_ZuH(Number, ref canonicalNumber);
                    str2 = "6|" + this.GetFormateOfElectronTicket(strArray4) + ";";
                }
                return str2;
            }

            private string ConvertFormatToElectronTicket_HPSD(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string canonicalNumber = "";
                string formateOfElectronTicket = "";
                if (((PlayTypeID == 0x189d) || (PlayTypeID == 0x189f)) || ((PlayTypeID == 0x189e) || (PlayTypeID == 0x18a2)))
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            if (PlayTypeID == 0x189f)
                            {
                                strArray[i] = base.Sort(strArray[i]);
                            }
                            formateOfElectronTicket = formateOfElectronTicket + strArray[i].Substring(j, 1) + ",";
                        }
                        if (formateOfElectronTicket.EndsWith(","))
                        {
                            formateOfElectronTicket = formateOfElectronTicket.Substring(0, formateOfElectronTicket.Length - 1);
                        }
                        formateOfElectronTicket = formateOfElectronTicket + "\n";
                    }
                    if (formateOfElectronTicket.EndsWith("\n"))
                    {
                        formateOfElectronTicket = formateOfElectronTicket.Substring(0, formateOfElectronTicket.Length - 1);
                    }
                }
                if (PlayTypeID == 0x18a0)
                {
                    string[] singleNumber = this.ToSingle_Zu3D_Zu6(Number, ref canonicalNumber);
                    formateOfElectronTicket = this.GetFormateOfElectronTicket(singleNumber);
                }
                if (PlayTypeID == 0x18a1)
                {
                    string[] strArray3 = this.ToSingle_Zu3F(Number, ref canonicalNumber);
                    formateOfElectronTicket = this.GetFormateOfElectronTicket(strArray3);
                }
                if (PlayTypeID == 0x18a3)
                {
                    string[] strArray4 = this.ToSingle_ZuH(Number, ref canonicalNumber);
                    formateOfElectronTicket = this.GetFormateOfElectronTicket(strArray4);
                }
                return formateOfElectronTicket;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            private string GetFormateOfElectronTicket(string[] SingleNumber)
            {
                string str = "";
                string[] strArray = new string[SingleNumber.Length];
                for (int i = 0; i < SingleNumber.Length; i++)
                {
                    for (int j = 0; j < SingleNumber[i].Length; j++)
                    {
                        string[] strArray2;
                        IntPtr ptr;
                        (strArray2 = strArray)[(int) (ptr = (IntPtr) i)] = strArray2[(int) ptr] + SingleNumber[i].Substring(j, 1) + ",";
                    }
                    str = str + strArray[i].Substring(0, strArray[i].Length - 1) + "\n";
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x189d, "排列3直选单式"), new Lottery.PlayType(0x189e, "排列3直选复式"), new Lottery.PlayType(0x189f, "排列3组选单式"), new Lottery.PlayType(0x18a0, "排列3组选6复式"), new Lottery.PlayType(0x18a1, "排列3组选3复式"), new Lottery.PlayType(0x18a2, "排列3直选和值"), new Lottery.PlayType(0x18a3, "排列3组选和值") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    switch (LotteryMachine)
                    {
                        case "CR_YTCII2":
                            if (PlayTypeID != 0x189d)
                            {
                                if (PlayTypeID == 0x189e)
                                {
                                    return this.GetPrintKeyList_CR_YTCII2_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x189f)
                                {
                                    return this.GetPrintKeyList_CR_YTCII2_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a1)
                                {
                                    return this.GetPrintKeyList_CR_YTCII2_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a0)
                                {
                                    return this.GetPrintKeyList_CR_YTCII2_ZhiD(numbers);
                                }
                                if ((PlayTypeID != 0x18a2) && (PlayTypeID != 0x18a3))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CR_YTCII2_H(numbers);
                            }
                            return this.GetPrintKeyList_CR_YTCII2_ZhiD(numbers);

                        case "TCBJYTD":
                            if (PlayTypeID != 0x189d)
                            {
                                if (PlayTypeID == 0x189e)
                                {
                                    return this.GetPrintKeyList_TCBJYTD_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x189f)
                                {
                                    return this.GetPrintKeyList_TCBJYTD_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a1)
                                {
                                    return this.GetPrintKeyList_TCBJYTD_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a0)
                                {
                                    return this.GetPrintKeyList_TCBJYTD_ZhiD(numbers);
                                }
                                if ((PlayTypeID != 0x18a2) && (PlayTypeID != 0x18a3))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TCBJYTD_H(numbers);
                            }
                            return this.GetPrintKeyList_TCBJYTD_ZhiD(numbers);

                        case "TGAMPOS4000":
                            if (PlayTypeID != 0x189d)
                            {
                                if (PlayTypeID == 0x189e)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x189f)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a1)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a0)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_ZhiD(numbers);
                                }
                                if ((PlayTypeID != 0x18a2) && (PlayTypeID != 0x18a3))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TGAMPOS4000_H(numbers);
                            }
                            return this.GetPrintKeyList_TGAMPOS4000_ZhiD(numbers);

                        case "CP86":
                            if (PlayTypeID != 0x189d)
                            {
                                if (PlayTypeID == 0x189e)
                                {
                                    return this.GetPrintKeyList_CP86_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x189f)
                                {
                                    return this.GetPrintKeyList_CP86_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a1)
                                {
                                    return this.GetPrintKeyList_CP86_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a0)
                                {
                                    return this.GetPrintKeyList_CP86_ZhiD(numbers);
                                }
                                if ((PlayTypeID != 0x18a2) && (PlayTypeID != 0x18a3))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CP86_H(numbers);
                            }
                            return this.GetPrintKeyList_CP86_ZhiD(numbers);

                        case "MODEL_4000":
                            if (PlayTypeID != 0x189d)
                            {
                                if (PlayTypeID == 0x189e)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x189f)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a1)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a0)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_ZhiD(numbers);
                                }
                                if ((PlayTypeID != 0x18a2) && (PlayTypeID != 0x18a3))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_MODEL_4000_H(numbers);
                            }
                            return this.GetPrintKeyList_MODEL_4000_ZhiD(numbers);

                        case "CORONISTPT":
                            if (PlayTypeID != 0x189d)
                            {
                                if (PlayTypeID == 0x189e)
                                {
                                    return this.GetPrintKeyList_CORONISTPT_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x189f)
                                {
                                    return this.GetPrintKeyList_CORONISTPT_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a1)
                                {
                                    return this.GetPrintKeyList_CORONISTPT_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a0)
                                {
                                    return this.GetPrintKeyList_CORONISTPT_ZhiD(numbers);
                                }
                                if ((PlayTypeID != 0x18a2) && (PlayTypeID != 0x18a3))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CORONISTPT_H(numbers);
                            }
                            return this.GetPrintKeyList_CORONISTPT_ZhiD(numbers);

                        case "RS6500":
                            if (PlayTypeID != 0x189d)
                            {
                                if (PlayTypeID == 0x189e)
                                {
                                    return this.GetPrintKeyList_RS6500_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x189f)
                                {
                                    return this.GetPrintKeyList_RS6500_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a1)
                                {
                                    return this.GetPrintKeyList_RS6500_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a0)
                                {
                                    return this.GetPrintKeyList_RS6500_ZhiD(numbers);
                                }
                                if ((PlayTypeID != 0x18a2) && (PlayTypeID != 0x18a3))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_RS6500_H(numbers);
                            }
                            return this.GetPrintKeyList_RS6500_ZhiD(numbers);

                        case "ks230":
                            if (PlayTypeID != 0x189d)
                            {
                                if (PlayTypeID == 0x189e)
                                {
                                    return this.GetPrintKeyList_ks230_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x189f)
                                {
                                    return this.GetPrintKeyList_ks230_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a1)
                                {
                                    return this.GetPrintKeyList_ks230_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a0)
                                {
                                    return this.GetPrintKeyList_ks230_ZhiD(numbers);
                                }
                                if ((PlayTypeID != 0x18a2) && (PlayTypeID != 0x18a3))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_ks230_H(numbers);
                            }
                            return this.GetPrintKeyList_ks230_ZhiD(numbers);

                        case "LA-600A":
                            if (PlayTypeID != 0x189d)
                            {
                                if (PlayTypeID == 0x189e)
                                {
                                    return this.GetPrintKeyList_LA_600A_3_ZhiF(numbers);
                                }
                                if (PlayTypeID == 0x189f)
                                {
                                    return this.GetPrintKeyList_LA_600A_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a1)
                                {
                                    return this.GetPrintKeyList_LA_600A_ZhiD(numbers);
                                }
                                if (PlayTypeID == 0x18a0)
                                {
                                    return this.GetPrintKeyList_LA_600A_ZhiD(numbers);
                                }
                                if ((PlayTypeID == 0x18a2) || (PlayTypeID == 0x18a3))
                                {
                                    return this.GetPrintKeyList_LA_600A_H(numbers);
                                }
                                break;
                            }
                            return this.GetPrintKeyList_LA_600A_ZhiD(numbers);
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CORONISTPT_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x189d)
                {
                    return this.ToElectronicTicket_DYJ_Zhi_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if ((PlayTypeID == 0x189e) || (PlayTypeID == 0x18a2))
                {
                    return this.ToElectronicTicket_DYJ_Zhi_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x189f)
                {
                    return this.ToElectronicTicket_DYJ_Zu_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (((PlayTypeID != 0x18a1) && (PlayTypeID != 0x18a0)) && (PlayTypeID != 0x18a3))
                {
                    return null;
                }
                return this.ToElectronicTicket_DYJ_Zu_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_Zhi_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_Zhi_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                string canonicalNumber = "";
                ArrayList list = new ArrayList();
                if (PlayTypeID == 0x189e)
                {
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string[] strArray2 = this.ToSingle_3(strArray[k].Split(new char[] { '|' })[0], ref canonicalNumber);
                        for (int m = 0; m < strArray2.Length; m++)
                        {
                            list.Add(strArray2[m]);
                        }
                    }
                }
                if (PlayTypeID == 0x18a2)
                {
                    for (int n = 0; n < strArray.Length; n++)
                    {
                        string[] strArray3 = this.ToSingle_ZhiH(strArray[n].Split(new char[] { '|' })[0], ref canonicalNumber);
                        for (int num4 = 0; num4 < strArray3.Length; num4++)
                        {
                            list.Add(strArray3[num4]);
                        }
                    }
                }
                ArrayList list2 = new ArrayList();
                Money = 0.0;
                int num5 = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num5 = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num5 = Multiple / MaxMultiple;
                }
                int multiple = 1;
                double num7 = 0.0;
                for (int i = 1; i < (num5 + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int num9 = 0; num9 < list.Count; num9 += 5)
                    {
                        string number = "";
                        num7 = 0.0;
                        for (int num10 = 0; num10 < 5; num10++)
                        {
                            if (((num9 + num10) < list.Count) && (list[num9 + num10].ToString().Length >= 2))
                            {
                                number = number + list[num9 + num10].ToString() + "\n";
                                num7 = 2 * (num10 + 1);
                            }
                        }
                        Money += num7 * multiple;
                        list2.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num7 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list2.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list2[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_Zu_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_Zu_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x189d)
                {
                    return this.ToElectronicTicket_HPSD_Zhi_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if ((PlayTypeID == 0x189e) || (PlayTypeID == 0x18a2))
                {
                    return this.ToElectronicTicket_HPSD_Zhi_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x189f)
                {
                    return this.ToElectronicTicket_HPSD_Zu_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (((PlayTypeID != 0x18a1) && (PlayTypeID != 0x18a0)) && (PlayTypeID != 0x18a3))
                {
                    return null;
                }
                return this.ToElectronicTicket_HPSD_Zu_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_Zhi_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_Zhi_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                string canonicalNumber = "";
                ArrayList list = new ArrayList();
                if (PlayTypeID == 0x189e)
                {
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string[] strArray2 = this.ToSingle_3(strArray[k].Split(new char[] { '|' })[0], ref canonicalNumber);
                        for (int m = 0; m < strArray2.Length; m++)
                        {
                            list.Add(strArray2[m]);
                        }
                    }
                }
                if (PlayTypeID == 0x18a2)
                {
                    for (int n = 0; n < strArray.Length; n++)
                    {
                        string[] strArray3 = this.ToSingle_ZhiH(strArray[n].Split(new char[] { '|' })[0], ref canonicalNumber);
                        for (int num4 = 0; num4 < strArray3.Length; num4++)
                        {
                            list.Add(strArray3[num4]);
                        }
                    }
                }
                ArrayList list2 = new ArrayList();
                Money = 0.0;
                int num5 = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num5 = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num5 = Multiple / MaxMultiple;
                }
                int multiple = 1;
                double num7 = 0.0;
                for (int i = 1; i < (num5 + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int num9 = 0; num9 < list.Count; num9 += 5)
                    {
                        string number = "";
                        num7 = 0.0;
                        for (int num10 = 0; num10 < 5; num10++)
                        {
                            if (((num9 + num10) < list.Count) && (list[num9 + num10].ToString().Length >= 2))
                            {
                                number = number + list[num9 + num10].ToString() + "\n";
                                num7 = 2 * (num10 + 1);
                            }
                        }
                        Money += num7 * multiple;
                        list2.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num7 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list2.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list2[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_Zu_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_Zu_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0x189d) || (PlayType == 0x189e))
                {
                    return this.ToSingle_3(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x189f) || (PlayType == 0x18a0))
                {
                    return this.ToSingle_Zu3D_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x18a1)
                {
                    return this.ToSingle_Zu3F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x18a2)
                {
                    return this.ToSingle_ZhiH(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x18a3)
                {
                    return this.ToSingle_ZuH(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[3];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            list.Add(str3);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_ZhiH(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                if ((num < 0) || (num > 0x1b))
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = num.ToString();
                ArrayList list = new ArrayList();
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        for (int m = 0; m <= 9; m++)
                        {
                            if (((i + k) + m) == num)
                            {
                                list.Add(i.ToString() + k.ToString() + m.ToString());
                            }
                        }
                    }
                }
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3D_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = Number;
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                if (length == 2)
                {
                    for (int j = 0; j < (length - 1); j++)
                    {
                        for (int k = j + 1; k < length; k++)
                        {
                            list.Add(chArray[j].ToString() + chArray[j].ToString() + chArray[k].ToString());
                            list.Add(chArray[j].ToString() + chArray[k].ToString() + chArray[k].ToString());
                        }
                    }
                }
                else
                {
                    for (int m = 0; m < (length - 2); m++)
                    {
                        for (int n = m + 1; n < (length - 1); n++)
                        {
                            for (int num6 = n + 1; num6 < length; num6++)
                            {
                                list.Add(chArray[m].ToString() + chArray[n].ToString() + chArray[num6].ToString());
                            }
                        }
                    }
                }
                string[] strArray = new string[list.Count];
                for (int i = 0; i < list.Count; i++)
                {
                    strArray[i] = list[i].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_Zu3F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[i].ToString() + chArray[k].ToString());
                        list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_ZuH(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                ArrayList list = new ArrayList();
                if ((num < 1) || (num > 0x1a))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        if ((i != k) && (((i + i) + k) == num))
                        {
                            list.Add(i.ToString() + i.ToString() + k.ToString());
                        }
                    }
                }
                if ((num >= 3) && (num <= 0x18))
                {
                    for (int m = 0; m <= 7; m++)
                    {
                        for (int n = m + 1; n <= 8; n++)
                        {
                            for (int num6 = n + 1; num6 <= 9; num6++)
                            {
                                if (((m + n) + num6) == num)
                                {
                                    list.Add(m.ToString() + n.ToString() + num6.ToString());
                                }
                            }
                        }
                    }
                }
                CanonicalNumber = num.ToString();
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }
        }

        public class SZPL5 : Lottery.LotteryBase
        {
            public const string Code = "SZPL5";
            public const int ID = 0x40;
            public const double MaxMoney = 20000.0;
            public const string Name = "体彩排列5";
            public const int PlayType_5_D = 0x1901;
            public const int PlayType_5_F = 0x1902;
            public const string sID = "64";

            public SZPL5()
            {
                base.id = 0x40;
                base.name = "体彩排列5";
                base.code = "SZPL5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType != 0x1901) && (PlayType != 0x1902))
                {
                    return "";
                }
                return this.AnalyseScheme_5(Content, PlayType);
            }

            private string AnalyseScheme_5(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1901)
                {
                    str2 = @"([\d]){5}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){5}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_5(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1901) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_5(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 5; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1901) && (play_type <= 0x1902));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((PlayType != 0x1901) && (PlayType != 0x1902))
                {
                    return -4.0;
                }
                return this.ComputeWin_5(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
            }

            private double ComputeWin_5(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_5(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 5) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "排列5直选奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private string ConvertFormatToElectronTicket_DYJ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (PlayTypeID == 0x1901)
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                    str = str + ";";
                }
                if (PlayTypeID == 0x1902)
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int k = 0; k < strArray2.Length; k++)
                    {
                        string[] strArray3 = new string[5];
                        Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[k]);
                        for (int m = 0; m < 5; m++)
                        {
                            strArray3[m] = match.Groups["L" + m.ToString()].ToString().Trim();
                            if (strArray3[m] == "")
                            {
                                return "";
                            }
                            if (strArray3[m].Length > 1)
                            {
                                strArray3[m] = strArray3[m].Substring(1, strArray3[m].Length - 2);
                                if (strArray3[m].Length > 1)
                                {
                                    strArray3[m] = this.FilterRepeated(strArray3[m]);
                                }
                                if (strArray3[m] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray3[m] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + ";\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string ConvertFormatToElectronTicket_HPSD(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if (PlayTypeID == 0x1901)
                {
                    string[] strArray = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        for (int j = 0; j < strArray[i].Length; j++)
                        {
                            str = str + strArray[i].Substring(j, 1) + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                    if (str.EndsWith("\n"))
                    {
                        str = str.Substring(0, str.Length - 1);
                    }
                }
                if (PlayTypeID == 0x1902)
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int k = 0; k < strArray2.Length; k++)
                    {
                        string[] strArray3 = new string[5];
                        Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[k]);
                        for (int m = 0; m < 5; m++)
                        {
                            strArray3[m] = match.Groups["L" + m.ToString()].ToString().Trim();
                            if (strArray3[m] == "")
                            {
                                return "";
                            }
                            if (strArray3[m].Length > 1)
                            {
                                strArray3[m] = strArray3[m].Substring(1, strArray3[m].Length - 2);
                                if (strArray3[m].Length > 1)
                                {
                                    strArray3[m] = this.FilterRepeated(strArray3[m]);
                                }
                                if (strArray3[m] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray3[m] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1901, "排列5单式"), new Lottery.PlayType(0x1902, "排列5复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    switch (LotteryMachine)
                    {
                        case "CR_YTCII2":
                            if (PlayTypeID != 0x1901)
                            {
                                if (PlayTypeID != 0x1902)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CR_YTCII2_5_F(numbers);
                            }
                            return this.GetPrintKeyList_CR_YTCII2_ZhiD(numbers);

                        case "TCBJYTD":
                            if (PlayTypeID != 0x1901)
                            {
                                if (PlayTypeID != 0x1902)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TCBJYTD_5_F(numbers);
                            }
                            return this.GetPrintKeyList_TCBJYTD_ZhiD(numbers);

                        case "TGAMPOS4000":
                            if (PlayTypeID != 0x1901)
                            {
                                if (PlayTypeID != 0x1902)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TGAMPOS4000_5_F(numbers);
                            }
                            return this.GetPrintKeyList_TGAMPOS4000_ZhiD(numbers);

                        case "CP86":
                            if (PlayTypeID != 0x1901)
                            {
                                if (PlayTypeID != 0x1902)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CP86_5_F(numbers);
                            }
                            return this.GetPrintKeyList_CP86_ZhiD(numbers);

                        case "MODEL_4000":
                            if (PlayTypeID != 0x1901)
                            {
                                if (PlayTypeID != 0x1902)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_MODEL_4000_5_F(numbers);
                            }
                            return this.GetPrintKeyList_MODEL_4000_ZhiD(numbers);

                        case "CORONISTPT":
                            if (PlayTypeID != 0x1901)
                            {
                                if (PlayTypeID != 0x1902)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CORONISTPT_5_F(numbers);
                            }
                            return this.GetPrintKeyList_CORONISTPT_ZhiD(numbers);

                        case "RS6500":
                            if (PlayTypeID != 0x1901)
                            {
                                if (PlayTypeID != 0x1902)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_RS6500_5_F(numbers);
                            }
                            return this.GetPrintKeyList_RS6500_ZhiD(numbers);

                        case "ks230":
                            if (PlayTypeID != 0x1901)
                            {
                                if (PlayTypeID != 0x1902)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_ks230_5_F(numbers);
                            }
                            return this.GetPrintKeyList_ks230_ZhiD(numbers);

                        case "LA-600A":
                            if (PlayTypeID != 0x1901)
                            {
                                if (PlayTypeID == 0x1902)
                                {
                                    return this.GetPrintKeyList_LA_600A_5_F(numbers);
                                }
                                break;
                            }
                            return this.GetPrintKeyList_LA_600A_ZhiD(numbers);
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CORONISTPT_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[→]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_3_ZhiF(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 3; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 2)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_5_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str2);
                    for (int i = 0; i < 5; i++)
                    {
                        string str3 = match.Groups["L" + i.ToString()].ToString().Trim();
                        if (str3.Length == 1)
                        {
                            str = str + "[" + str3 + "]";
                        }
                        else
                        {
                            foreach (char ch in str3.Substring(1, str3.Length - 2))
                            {
                                str = str + "[" + ch.ToString() + "]";
                            }
                        }
                        if (i < 4)
                        {
                            str = str + "[↓]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_H(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").PadLeft(2, '0'))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_ZhiD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x1901)
                {
                    return this.ToElectronicTicket_DYJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1902)
                {
                    return this.ToElectronicTicket_DYJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x1901)
                {
                    return this.ToElectronicTicket_HPSD_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1902)
                {
                    return this.ToElectronicTicket_HPSD_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            string number = "";
                            num3 = 0.0;
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType != 0x1901) && (PlayType != 0x1902))
                {
                    return null;
                }
                return this.ToSingle_5(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_5(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[5];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    list.Add(str5);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class TC22X5 : Lottery.LotteryBase
        {
            public const string Code = "TC22X5";
            public const int ID = 9;
            public const double MaxMoney = 20000.0;
            public const string Name = "体彩22选5";
            public const int PlayType_D = 0x385;
            public const int PlayType_F = 0x386;
            public const string sID = "9";

            public TC22X5()
            {
                base.id = 9;
                base.name = "体彩22选5";
                base.code = "TC22X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x385)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,21}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x385) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x385);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x17);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x385) && (play_type <= 0x386));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num8 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num8++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num8)
                                    {
                                        case 5:
                                            num++;
                                            num4 += WinMoneyList[0];
                                            WinMoneyNoWithTax += WinMoneyList[1];
                                            break;

                                        case 4:
                                            num2++;
                                            num4 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                            break;

                                        case 3:
                                            num3++;
                                            num4 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string ConvertFormatToElectronTicket_DYJ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID != 0x385) && (PlayTypeID != 0x386))
                {
                    return str;
                }
                return Number;
            }

            private string ConvertFormatToElectronTicket_HPSD(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID != 0x385) && (PlayTypeID != 0x386))
                {
                    return str;
                }
                return Number.Replace(" ", ",");
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x16)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x385, "单式"), new Lottery.PlayType(0x386, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    switch (LotteryMachine)
                    {
                        case "CR_YTCII2":
                            if ((PlayTypeID != 0x385) && (PlayTypeID != 0x386))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_CR_YTCII2(numbers);

                        case "TCBJYTD":
                            if ((PlayTypeID != 0x385) && (PlayTypeID != 0x386))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_TCBJYTD(numbers);

                        case "TGAMPOS4000":
                            if ((PlayTypeID != 0x385) && (PlayTypeID != 0x386))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_TGAMPOS4000(numbers);

                        case "CP86":
                            if ((PlayTypeID != 0x385) && (PlayTypeID != 0x386))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_CP86(numbers);

                        case "MODEL_4000":
                            if ((PlayTypeID != 0x385) && (PlayTypeID != 0x386))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_MODEL_4000(numbers);

                        case "CORONISTPT":
                            if ((PlayTypeID != 0x385) && (PlayTypeID != 0x386))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_CORONISTPT(numbers);

                        case "RS6500":
                            if ((PlayTypeID != 0x385) && (PlayTypeID != 0x386))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_RS6500(numbers);

                        case "ks230":
                            if ((PlayTypeID != 0x385) && (PlayTypeID != 0x386))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_ks230(numbers);

                        case "LA-600A":
                            if ((PlayTypeID != 0x385) && (PlayTypeID != 0x386))
                            {
                                break;
                            }
                            return this.GetPrintKeyList_LA_600A(numbers);
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CORONISTPT(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x385)
                {
                    return this.ToElectronicTicket_DYJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x386)
                {
                    return this.ToElectronicTicket_DYJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + ";\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0] + ";";
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x385)
                {
                    return this.ToElectronicTicket_HPSD_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x386)
                {
                    return this.ToElectronicTicket_HPSD_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class TC29X7 : Lottery.LotteryBase
        {
            public const string Code = "TC29X7";
            public const int ID = 14;
            public const double MaxMoney = 20000.0;
            public const string Name = "体彩29选7";
            public const int PlayType_D = 0x579;
            public const int PlayType_F = 0x57a;
            public const string sID = "14";

            public TC29X7()
            {
                base.id = 14;
                base.name = "体彩29选7";
                base.code = "TC29X7";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x579)
                {
                    str2 = @"(\d\d\s){6}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,28}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x579) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){7}[+]\s\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number.Substring(0, 20), ref canonicalNumber, 0x579);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 7; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 30);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x579) && (play_type <= 0x57a));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x19)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 14))
                {
                    return -3.0;
                }
                string str = WinNumber.Substring(0x17, 2);
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                double num8 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 20)
                            {
                                string[] strArray3 = new string[7];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num11 = 0;
                                bool flag = false;
                                bool flag2 = true;
                                for (int k = 0; k < 7; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag2 = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num11++;
                                    }
                                    if (str == strArray3[k])
                                    {
                                        flag = true;
                                    }
                                }
                                if (flag2)
                                {
                                    if (num11 == 7)
                                    {
                                        num++;
                                        num8 += WinMoneyList[0];
                                        WinMoneyNoWithTax += WinMoneyList[1];
                                    }
                                    else if ((num11 == 6) && flag)
                                    {
                                        num2++;
                                        num8 += WinMoneyList[2];
                                        WinMoneyNoWithTax += WinMoneyList[3];
                                    }
                                    else if (num11 == 6)
                                    {
                                        num3++;
                                        num8 += WinMoneyList[4];
                                        WinMoneyNoWithTax += WinMoneyList[5];
                                    }
                                    else if ((num11 == 5) && flag)
                                    {
                                        num4++;
                                        num8 += WinMoneyList[6];
                                        WinMoneyNoWithTax += WinMoneyList[7];
                                    }
                                    else if (num11 == 5)
                                    {
                                        num5++;
                                        num8 += WinMoneyList[8];
                                        WinMoneyNoWithTax += WinMoneyList[9];
                                    }
                                    else if ((num11 == 4) && flag)
                                    {
                                        num6++;
                                        num8 += WinMoneyList[10];
                                        WinMoneyNoWithTax += WinMoneyList[11];
                                    }
                                    else if (num11 == 4)
                                    {
                                        num7++;
                                        num8 += WinMoneyList[12];
                                        WinMoneyNoWithTax += WinMoneyList[13];
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "七等奖" + num7.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num8;
            }

            private string ConvertFormatToElectronTicket_HPSD(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID != 0x579) && (PlayTypeID != 0x57a))
                {
                    return str;
                }
                return Number.Replace(" ", ",");
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x1d)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x579, "单式"), new Lottery.PlayType(0x57a, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    string str = LotteryMachine;
                    if (str != null)
                    {
                        if (!(str == "TCBJYTD"))
                        {
                            if (str == "CORONISTPT")
                            {
                                if ((PlayTypeID == 0x579) || (PlayTypeID == 0x57a))
                                {
                                    return this.GetPrintKeyList_CORONISTPT(numbers);
                                }
                            }
                            else if (str == "CP86")
                            {
                                if ((PlayTypeID == 0x579) || (PlayTypeID == 0x57a))
                                {
                                    return this.GetPrintKeyList_CP86(numbers);
                                }
                            }
                            else if (str == "RS6500")
                            {
                                if ((PlayTypeID == 0x579) || (PlayTypeID == 0x57a))
                                {
                                    return this.GetPrintKeyList_RS6500(numbers);
                                }
                            }
                            else if ((str == "ks230") && ((PlayTypeID == 0x579) || (PlayTypeID == 0x57a)))
                            {
                                return this.GetPrintKeyList_ks230(numbers);
                            }
                        }
                        else if ((PlayTypeID == 0x579) || (PlayTypeID == 0x57a))
                        {
                            return this.GetPrintKeyList_TCBJYTD(numbers);
                        }
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CORONISTPT(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x579)
                {
                    return this.ToElectronicTicket_HPSD_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x57a)
                {
                    return this.ToElectronicTicket_HPSD_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        number = number + strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                    }
                    list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    string number = "";
                    num3 = 0.0;
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        number = number + strArray[k].ToString().Split(new char[] { '|' })[0] + "\n";
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                    }
                    list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class TC31X7 : Lottery.LotteryBase
        {
            public const string Code = "TC31X7";
            public const int ID = 0x41;
            public const double MaxMoney = 20000.0;
            public const string Name = "体彩31选7";
            public const int PlayType_D = 0x1965;
            public const int PlayType_F = 0x1966;
            public const string sID = "65";

            public TC31X7()
            {
                base.id = 0x41;
                base.name = "体彩31选7";
                base.code = "TC31X7";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1965)
                {
                    str2 = @"(\d\d\s){6}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){6,31}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1965) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){7}[+]\s\d\d", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number.Substring(0, 20), ref canonicalNumber, 0x1965);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 7; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x20);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1965) && (play_type <= 0x1966));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x19)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 14))
                {
                    return -3.0;
                }
                string str = WinNumber.Substring(0x17, 2);
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                double num8 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 20)
                            {
                                string[] strArray3 = new string[7];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)(?<R5>\d\d\s)(?<R6>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num11 = 0;
                                bool flag = false;
                                bool flag2 = true;
                                for (int k = 0; k < 7; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag2 = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num11++;
                                    }
                                    if (str == strArray3[k])
                                    {
                                        flag = true;
                                    }
                                }
                                if (flag2)
                                {
                                    if (num11 == 7)
                                    {
                                        num++;
                                        num8 += WinMoneyList[0];
                                        WinMoneyNoWithTax += WinMoneyList[1];
                                    }
                                    else if ((num11 == 6) && flag)
                                    {
                                        num2++;
                                        num8 += WinMoneyList[2];
                                        WinMoneyNoWithTax += WinMoneyList[3];
                                    }
                                    else if (num11 == 6)
                                    {
                                        num3++;
                                        num8 += WinMoneyList[4];
                                        WinMoneyNoWithTax += WinMoneyList[5];
                                    }
                                    else if ((num11 == 5) && flag)
                                    {
                                        num4++;
                                        num8 += WinMoneyList[6];
                                        WinMoneyNoWithTax += WinMoneyList[7];
                                    }
                                    else if (num11 == 5)
                                    {
                                        num5++;
                                        num8 += WinMoneyList[8];
                                        WinMoneyNoWithTax += WinMoneyList[9];
                                    }
                                    else if ((num11 == 4) && flag)
                                    {
                                        num6++;
                                        num8 += WinMoneyList[10];
                                        WinMoneyNoWithTax += WinMoneyList[11];
                                    }
                                    else if (num11 == 4)
                                    {
                                        num7++;
                                        num8 += WinMoneyList[12];
                                        WinMoneyNoWithTax += WinMoneyList[13];
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "七等奖" + num7.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num8;
            }

            private string ConvertFormatToElectronTicket_DYJ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID != 0x1965) && (PlayTypeID != 0x1966))
                {
                    return str;
                }
                return Number;
            }

            private string ConvertFormatToElectronTicket_HPSD(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((PlayTypeID != 0x1965) && (PlayTypeID != 0x1966))
                {
                    return str;
                }
                return Number.Replace(" ", ",");
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x1f)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1965, "单式"), new Lottery.PlayType(0x1966, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    string str = LotteryMachine;
                    if (str != null)
                    {
                        if (!(str == "TCBJYTD"))
                        {
                            if (str == "CORONISTPT")
                            {
                                if ((PlayTypeID == 0x1965) || (PlayTypeID == 0x1966))
                                {
                                    return this.GetPrintKeyList_CORONISTPT(numbers);
                                }
                            }
                            else if (str == "CP86")
                            {
                                if ((PlayTypeID == 0x1965) || (PlayTypeID == 0x1966))
                                {
                                    return this.GetPrintKeyList_CP86(numbers);
                                }
                            }
                            else if (str == "RS6500")
                            {
                                if ((PlayTypeID == 0x1965) || (PlayTypeID == 0x1966))
                                {
                                    return this.GetPrintKeyList_RS6500(numbers);
                                }
                            }
                            else if ((str == "ks230") && ((PlayTypeID == 0x1965) || (PlayTypeID == 0x1966)))
                            {
                                return this.GetPrintKeyList_ks230(numbers);
                            }
                        }
                        else if ((PlayTypeID == 0x1965) || (PlayTypeID == 0x1966))
                        {
                            return this.GetPrintKeyList_TCBJYTD(numbers);
                        }
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CORONISTPT(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TCBJYTD(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x1965)
                {
                    return this.ToElectronicTicket_DYJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1966)
                {
                    return this.ToElectronicTicket_DYJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + ";\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0] + ";";
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x1965)
                {
                    return this.ToElectronicTicket_HPSD_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1966)
                {
                    return this.ToElectronicTicket_HPSD_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 7)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 6); j++)
                {
                    for (int m = j + 1; m < (length - 5); m++)
                    {
                        for (int n = m + 1; n < (length - 4); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 3); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < (length - 2); num7++)
                                {
                                    for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                                    {
                                        for (int num9 = num8 + 1; num9 < length; num9++)
                                        {
                                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7] + " " + strArray[num8] + " " + strArray[num9]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class TCCJDLT : Lottery.LotteryBase
        {
            public const string Code = "TCCJDLT";
            public const int ID = 0x27;
            public const double MaxMoney = 30000.0;
            public const string Name = "体彩超级大乐透";
            public const int PlayType_2_D = 0xf41;
            public const int PlayType_2_F = 0xf42;
            public const int PlayType_D = 0xf3d;
            public const int PlayType_F = 0xf3e;
            public const int PlayType_ZJ_D = 0xf3f;
            public const int PlayType_ZJ_F = 0xf40;
            public const string sID = "39";

            public TCCJDLT()
            {
                base.id = 0x27;
                base.name = "体彩超级大乐透";
                base.code = "TCCJDLT";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0xf3d) || (PlayType == 0xf3e))
                {
                    return this.AnalyseScheme_0(Content, PlayType);
                }
                if ((PlayType == 0xf3f) || (PlayType == 0xf40))
                {
                    return this.AnalyseScheme_ZJ(Content, PlayType);
                }
                if ((PlayType != 0xf41) && (PlayType != 0xf42))
                {
                    return null;
                }
                return this.AnalyseScheme_12X2(Content, PlayType);
            }

            private string AnalyseScheme_0(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xf3d)
                {
                    str2 = @"(\d\d\s){5}[+](\s\d\d){2}";
                }
                else
                {
                    str2 = @"(\d\d\s){5,35}[+](\s\d\d){2,12}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_0(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xf3d) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_12X2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xf41)
                {
                    str2 = @"\d\d\s\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){2,11}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_12X2(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xf41) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZJ(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xf3f)
                {
                    str2 = @"(\d\d\s){5}[+](\s\d\d){2}";
                }
                else
                {
                    str2 = @"(\d\d\s){5,35}[+](\s\d\d){2,12}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_0(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xf3f) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"(\d\d\s){5}[+](\s\d\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0xf3d);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Red, int Blue, int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                ArrayList list2 = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    list2.Clear();
                    for (int j = 0; j < Red; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x24);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    for (int k = 0; k < Blue; k++)
                    {
                        int num5 = 0;
                        while ((num5 == 0) || base.isExistBall(list2, num5))
                        {
                            num5 = random.Next(1, 13);
                        }
                        list2.Add(num5.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    list2.Sort(comparer);
                    string str = "";
                    for (int m = 0; m < al.Count; m++)
                    {
                        str = str + al[m].ToString() + " ";
                    }
                    if (str != "")
                    {
                        str = str + "+ ";
                    }
                    for (int n = 0; n < list2.Count; n++)
                    {
                        str = str + list2[n].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xf3d) && (play_type <= 0xf42));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 30))
                {
                    return -3.0;
                }
                if ((PlayType == 0xf3d) || (PlayType == 0xf3e))
                {
                    return this.ComputeWin_0(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[4], WinMoneyList[5], WinMoneyList[8], WinMoneyList[9], WinMoneyList[12], WinMoneyList[13], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[20], WinMoneyList[0x15], WinMoneyList[0x18], WinMoneyList[0x19], WinMoneyList[0x1c], WinMoneyList[0x1d]);
                }
                if ((PlayType == 0xf3f) || (PlayType == 0xf40))
                {
                    return this.ComputeWin_ZJ(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13], WinMoneyList[20], WinMoneyList[0x15], WinMoneyList[0x16], WinMoneyList[0x17], WinMoneyList[0x18], WinMoneyList[0x19], WinMoneyList[0x1a], WinMoneyList[0x1b], WinMoneyList[0x1c], WinMoneyList[0x1d]);
                }
                if ((PlayType != 0xf41) && (PlayType != 0xf42))
                {
                    return -4.0;
                }
                return this.ComputeWin_12X2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[30], WinMoneyList[0x1f]);
            }

            private double ComputeWin_0(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x16)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = WinNumber.Substring(0, 15);
                string str2 = WinNumber.Substring(0x11, 5).Trim();
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                double num9 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_0(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 0x16)
                            {
                                string[] strArray3 = new string[5];
                                string[] strArray4 = new string[2];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)[+]\s(?<B0>\d\d\s)(?<B1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num12 = 0;
                                int num13 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (str.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num12++;
                                    }
                                }
                                for (int m = 0; m < 2; m++)
                                {
                                    strArray4[m] = match.Groups["B" + m.ToString()].ToString().Trim();
                                    if (strArray4[m] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (str2.IndexOf(strArray4[m]) >= 0)
                                    {
                                        num13++;
                                    }
                                }
                                if (flag)
                                {
                                    if ((num12 == 5) && (num13 == 2))
                                    {
                                        num++;
                                        num9 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                    else if ((num12 == 5) && (num13 == 1))
                                    {
                                        num2++;
                                        num9 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                    }
                                    else if (num12 == 5)
                                    {
                                        num3++;
                                        num9 += WinMoney3;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                    }
                                    else if ((num12 == 4) && (num13 == 2))
                                    {
                                        num4++;
                                        num9 += WinMoney4;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                                    }
                                    else if ((num12 == 4) && (num13 == 1))
                                    {
                                        num5++;
                                        num9 += WinMoney5;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax5;
                                    }
                                    else if ((num12 == 4) || ((num12 == 3) && (num13 == 2)))
                                    {
                                        num6++;
                                        num9 += WinMoney6;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax6;
                                    }
                                    else if (((num12 == 3) && (num13 == 1)) || ((num12 == 2) && (num13 == 2)))
                                    {
                                        num7++;
                                        num9 += WinMoney7;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax7;
                                    }
                                    else if ((((num12 == 3) || ((num12 == 2) && (num13 == 1))) || ((num12 == 1) && (num13 == 2))) || (num13 == 2))
                                    {
                                        num8++;
                                        num9 += WinMoney8;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax8;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "六等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "七等奖" + num7.ToString() + "注";
                }
                if (num8 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "八等奖" + num8.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num9;
            }

            private double ComputeWin_12X2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x16)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = WinNumber.Substring(0x11, 5).Trim();
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_12X2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 2)
                            {
                                string[] strArray3 = new string[2];
                                Match match = new Regex(@"(?<B0>\d\d\s)(?<B1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num5 = 0;
                                bool flag = true;
                                for (int k = 0; k < 2; k++)
                                {
                                    strArray3[k] = match.Groups["B" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (str.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num5++;
                                    }
                                }
                                if (flag && (num5 == 2))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "12选2" + num.ToString() + "注";
                }
                return num2;
            }

            private double ComputeWin_ZJ(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double ZJ_WinMoney1, double ZJ_WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double ZJ_WinMoney2, double ZJ_WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double ZJ_WinMoney3, double ZJ_WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double ZJ_WinMoney4, double ZJ_WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double ZJ_WinMoney5, double ZJ_WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double ZJ_WinMoney6, double ZJ_WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double ZJ_WinMoney7, double ZJ_WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 0x16)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = WinNumber.Substring(0, 15);
                string str2 = WinNumber.Substring(0x11, 5).Trim();
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                double num9 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_0(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 0x16)
                            {
                                string[] strArray3 = new string[5];
                                string[] strArray4 = new string[2];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d\s)[+]\s(?<B0>\d\d\s)(?<B1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num12 = 0;
                                int num13 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (str.IndexOf(strArray3[k] + " ") >= 0)
                                    {
                                        num12++;
                                    }
                                }
                                for (int m = 0; m < 2; m++)
                                {
                                    strArray4[m] = match.Groups["B" + m.ToString()].ToString().Trim();
                                    if (strArray4[m] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (str2.IndexOf(strArray4[m]) >= 0)
                                    {
                                        num13++;
                                    }
                                }
                                if (flag)
                                {
                                    if ((num12 == 5) && (num13 == 2))
                                    {
                                        num++;
                                        num9 += WinMoney1 + ZJ_WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1 + ZJ_WinMoneyNoWithTax1;
                                    }
                                    else if ((num12 == 5) && (num13 == 1))
                                    {
                                        num2++;
                                        num9 += WinMoney2 + ZJ_WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2 + ZJ_WinMoneyNoWithTax2;
                                    }
                                    else if (num12 == 5)
                                    {
                                        num3++;
                                        num9 += WinMoney3 + ZJ_WinMoney3;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax3 + ZJ_WinMoneyNoWithTax3;
                                    }
                                    else if ((num12 == 4) && (num13 == 2))
                                    {
                                        num4++;
                                        num9 += WinMoney4 + ZJ_WinMoney4;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax4 + ZJ_WinMoneyNoWithTax4;
                                    }
                                    else if ((num12 == 4) && (num13 == 1))
                                    {
                                        num5++;
                                        num9 += WinMoney5 + ZJ_WinMoney5;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax5 + ZJ_WinMoneyNoWithTax5;
                                    }
                                    else if ((num12 == 4) || ((num12 == 3) && (num13 == 2)))
                                    {
                                        num6++;
                                        num9 += WinMoney6 + ZJ_WinMoney6;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax6 + ZJ_WinMoneyNoWithTax6;
                                    }
                                    else if (((num12 == 3) && (num13 == 1)) || ((num12 == 2) && (num13 == 2)))
                                    {
                                        num7++;
                                        num9 += WinMoney7 + ZJ_WinMoney7;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax7 + ZJ_WinMoneyNoWithTax7;
                                    }
                                    else if ((((num12 == 3) || ((num12 == 2) && (num13 == 1))) || ((num12 == 1) && (num13 == 2))) || (num13 == 2))
                                    {
                                        num8++;
                                        num9 += WinMoney8;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax8;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "追加一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "追加二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "追加三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "追加四等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "追加五等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "追加六等奖" + num6.ToString() + "注";
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "追加七等奖" + num7.ToString() + "注";
                }
                if (num8 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "八等奖" + num8.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num9;
            }

            private string ConvertFormatToElectronTicket_DYJ(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((((PlayTypeID != 0xf3d) && (PlayTypeID != 0xf3e)) && ((PlayTypeID != 0xf3f) && (PlayTypeID != 0xf40))) && ((PlayTypeID != 0xf41) && (PlayTypeID != 0xf42)))
                {
                    return str;
                }
                return Number.Replace(" + ", "-");
            }

            private string ConvertFormatToElectronTicket_HPSD(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string str = "";
                if ((((PlayTypeID != 0xf3d) && (PlayTypeID != 0xf3e)) && ((PlayTypeID != 0xf3f) && (PlayTypeID != 0xf40))) && ((PlayTypeID != 0xf41) && (PlayTypeID != 0xf42)))
                {
                    return str;
                }
                return Number.Replace(" ", ",").Replace(",+,", "|");
            }

            private string[] FilterRepeated(string[] NumberPart, int MaxBall)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= MaxBall)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xf3d, "单式"), new Lottery.PlayType(0xf3e, "复式"), new Lottery.PlayType(0xf3f, "追加单式"), new Lottery.PlayType(0xf40, "追加复式"), new Lottery.PlayType(0xf41, "12选2单式"), new Lottery.PlayType(0xf42, "12选2复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    switch (LotteryMachine)
                    {
                        case "CR_YTCII2":
                            if ((PlayTypeID != 0xf3d) && (PlayTypeID != 0xf3f))
                            {
                                if ((PlayTypeID == 0xf3e) || (PlayTypeID == 0xf40))
                                {
                                    return this.GetPrintKeyList_CR_YTCII2_F(numbers);
                                }
                                if ((PlayTypeID != 0xf41) && (PlayTypeID != 0xf42))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CR_YTCII2_12X2(numbers);
                            }
                            return this.GetPrintKeyList_CR_YTCII2_D(numbers);

                        case "TGAMPOS4000":
                            if (PlayTypeID != 0xf3d)
                            {
                                if (PlayTypeID == 0xf3f)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_ZJ_D(numbers);
                                }
                                if (PlayTypeID == 0xf3e)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_F(numbers);
                                }
                                if (PlayTypeID == 0xf40)
                                {
                                    return this.GetPrintKeyList_TGAMPOS4000_ZJ_F(numbers);
                                }
                                if ((PlayTypeID != 0xf41) && (PlayTypeID != 0xf42))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_TGAMPOS4000_12X2(numbers);
                            }
                            return this.GetPrintKeyList_TGAMPOS4000_D(numbers);

                        case "CP86":
                            if ((PlayTypeID != 0xf3d) && (PlayTypeID != 0xf3f))
                            {
                                if ((PlayTypeID == 0xf3e) || (PlayTypeID == 0xf40))
                                {
                                    return this.GetPrintKeyList_CP86_F(numbers);
                                }
                                if ((PlayTypeID != 0xf41) && (PlayTypeID != 0xf42))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CP86_12X2(numbers);
                            }
                            return this.GetPrintKeyList_CP86_D(numbers);

                        case "MODEL_4000":
                            if (PlayTypeID != 0xf3d)
                            {
                                if (PlayTypeID == 0xf3f)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_ZJ_D(numbers);
                                }
                                if (PlayTypeID == 0xf3e)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_F(numbers);
                                }
                                if (PlayTypeID == 0xf40)
                                {
                                    return this.GetPrintKeyList_MODEL_4000_ZJ_F(numbers);
                                }
                                if ((PlayTypeID != 0xf41) && (PlayTypeID != 0xf42))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_MODEL_4000_12X2(numbers);
                            }
                            return this.GetPrintKeyList_MODEL_4000_D(numbers);

                        case "CORONISTPT":
                            if (PlayTypeID != 0xf3d)
                            {
                                if (PlayTypeID == 0xf3f)
                                {
                                    return this.GetPrintKeyList_CORONISTPT_ZJ_D(numbers);
                                }
                                if (PlayTypeID == 0xf3e)
                                {
                                    return this.GetPrintKeyList_CORONISTPT_F(numbers);
                                }
                                if (PlayTypeID == 0xf40)
                                {
                                    return this.GetPrintKeyList_CORONISTPT_ZJ_F(numbers);
                                }
                                if ((PlayTypeID != 0xf41) && (PlayTypeID != 0xf42))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_CORONISTPT_12X2(numbers);
                            }
                            return this.GetPrintKeyList_CORONISTPT_D(numbers);

                        case "RS6500":
                            if (PlayTypeID != 0xf3d)
                            {
                                if (PlayTypeID == 0xf3f)
                                {
                                    return this.GetPrintKeyList_RS6500_ZJ_D(numbers);
                                }
                                if (PlayTypeID == 0xf3e)
                                {
                                    return this.GetPrintKeyList_RS6500_F(numbers);
                                }
                                if (PlayTypeID != 0xf40)
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_RS6500_ZJ_F(numbers);
                            }
                            return this.GetPrintKeyList_RS6500_D(numbers);

                        case "ks230":
                            if ((PlayTypeID != 0xf3d) && (PlayTypeID != 0xf3f))
                            {
                                if ((PlayTypeID == 0xf3e) || (PlayTypeID == 0xf40))
                                {
                                    return this.GetPrintKeyList_ks230_F(numbers);
                                }
                                if ((PlayTypeID != 0xf41) && (PlayTypeID != 0xf42))
                                {
                                    break;
                                }
                                return this.GetPrintKeyList_ks230_12X2(numbers);
                            }
                            return this.GetPrintKeyList_ks230_D(numbers);

                        case "LA-600A":
                            if ((PlayTypeID != 0xf3d) && (PlayTypeID != 0xf3f))
                            {
                                if ((PlayTypeID == 0xf3e) || (PlayTypeID == 0xf40))
                                {
                                    return this.GetPrintKeyList_LA_600A_F(numbers);
                                }
                                if ((PlayTypeID == 0xf41) || (PlayTypeID == 0xf42))
                                {
                                    return this.GetPrintKeyList_LA_600A_12X2(numbers);
                                }
                                break;
                            }
                            return this.GetPrintKeyList_LA_600A_D(numbers);
                    }
                }
                return "";
            }

            private string GetPrintKeyList_CORONISTPT_12X2(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch != '+')
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[↓]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CORONISTPT_ZJ_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch != '+')
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return (str + "[A]");
            }

            private string GetPrintKeyList_CORONISTPT_ZJ_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[↓]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return (str + "[A]");
            }

            private string GetPrintKeyList_CP86_12X2(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch != '+')
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CP86_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[ENTER]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_12X2(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch != '+')
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_CR_YTCII2_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[ENTER]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_12X2(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch != '+')
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_ks230_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[ENTER]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_12X2(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch != '+')
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LA_600A_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    str = str + "[↓]";
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[↓][↓]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_12X2(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch != '+')
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[↓][↓]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_MODEL_4000_ZJ_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch != '+')
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return (str + "[+]");
            }

            private string GetPrintKeyList_MODEL_4000_ZJ_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[↓][↓]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return (str + "[+]");
            }

            private string GetPrintKeyList_RS6500_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch != '+')
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[↓]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_RS6500_ZJ_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch != '+')
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return (str + "[A]");
            }

            private string GetPrintKeyList_RS6500_ZJ_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[↓]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return (str + "[A]");
            }

            private string GetPrintKeyList_TGAMPOS4000_12X2(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch != '+')
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[↓][↓]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_TGAMPOS4000_ZJ_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        if (ch != '+')
                        {
                            str = str + "[" + ch.ToString() + "]";
                        }
                    }
                }
                return (str + "[+]");
            }

            private string GetPrintKeyList_TGAMPOS4000_ZJ_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string[] strArray = str2.Split(new char[] { '+' });
                    if (strArray.Length != 2)
                    {
                        return "";
                    }
                    string str3 = strArray[0].Replace(" ", "");
                    string str4 = strArray[1].Replace(" ", "").Replace("\r", "").Replace("\n", "");
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                    str = str + "[↓][↓]";
                    foreach (char ch2 in str4)
                    {
                        str = str + "[" + ch2.ToString() + "]";
                    }
                }
                return (str + "[+]");
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override Lottery.Ticket[] ToElectronicTicket_DYJ(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0xf3d)
                {
                    return this.ToElectronicTicket_DYJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xf3e)
                {
                    return this.ToElectronicTicket_DYJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xf3f)
                {
                    return this.ToElectronicTicket_DYJ_ZJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xf40)
                {
                    return this.ToElectronicTicket_DYJ_ZJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xf41)
                {
                    return this.ToElectronicTicket_DYJ_2_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xf42)
                {
                    return this.ToElectronicTicket_DYJ_2_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_2_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + ";\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x69, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_2_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            number = strArray[k].ToString().Split(new char[] { '|' })[0] + ";";
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x69, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + ";\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            number = strArray[k].ToString().Split(new char[] { '|' })[0] + ";";
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_ZJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + ";\n";
                                num3 += 3.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x67, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_DYJ_ZJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            number = strArray[k].ToString().Split(new char[] { '|' })[0] + ";";
                            num3 += 3.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x68, this.ConvertFormatToElectronTicket_DYJ(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSD(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0xf3d)
                {
                    return this.ToElectronicTicket_HPSD_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xf3e)
                {
                    return this.ToElectronicTicket_HPSD_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xf3f)
                {
                    return this.ToElectronicTicket_HPSD_ZJ_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xf40)
                {
                    return this.ToElectronicTicket_HPSD_ZJ_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xf41)
                {
                    return this.ToElectronicTicket_HPSD_2_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0xf42)
                {
                    return this.ToElectronicTicket_HPSD_2_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_2_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x69, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_2_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        ArrayList list2 = new ArrayList();
                        string[] strArray2 = strArray[k].Split(new char[] { ' ' });
                        int length = strArray2.Length;
                        for (int m = 0; m < (length - 1); m++)
                        {
                            for (int num8 = m + 1; num8 < length; num8++)
                            {
                                list2.Add(strArray2[m] + " " + strArray2[num8]);
                            }
                        }
                        for (int n = 0; n < list2.Count; n++)
                        {
                            number = number + list2[n].ToString().Split(new char[] { '|' })[0] + "\n";
                            num3 = 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x69, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x65, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x66, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_ZJ_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if (((k + m) < strArray.Length) && (strArray[k + m].ToString().Split(new char[] { '|' }).Length >= 2))
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 3.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0x67, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSD_ZJ_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        if (strArray[k].ToString().Split(new char[] { '|' }).Length >= 2)
                        {
                            number = strArray[k].ToString().Split(new char[] { '|' })[0];
                            num3 += 3.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                            Money += num3 * multiple;
                            list.Add(new Lottery.Ticket(0x68, this.ConvertFormatToElectronTicket_HPSD(PlayTypeID, number), multiple, num3 * multiple));
                        }
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (((PlayType == 0xf3d) || (PlayType == 0xf3e)) || ((PlayType == 0xf3f) || (PlayType == 0xf40)))
                {
                    return this.ToSingle_0(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0xf41) && (PlayType != 0xf42))
                {
                    return null;
                }
                return this.ToSingle_12X2(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_0(string Number, ref string CanonicalNumber)
            {
                string[] strArray = Number.Split(new char[] { '+' });
                CanonicalNumber = "";
                if (strArray.Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                string[] strArray2 = this.FilterRepeated(strArray[0].Trim().Split(new char[] { ' ' }), 0x23);
                string[] strArray3 = this.FilterRepeated(strArray[1].Trim().Split(new char[] { ' ' }), 12);
                if ((strArray2.Length < 5) || (strArray3.Length < 2))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray2.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray2[i] + " ";
                }
                CanonicalNumber = CanonicalNumber + "+ ";
                for (int j = 0; j < strArray3.Length; j++)
                {
                    CanonicalNumber = CanonicalNumber + strArray3[j] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray2.Length;
                int num4 = strArray3.Length;
                for (int k = 0; k < (length - 4); k++)
                {
                    for (int n = k + 1; n < (length - 3); n++)
                    {
                        for (int num7 = n + 1; num7 < (length - 2); num7++)
                        {
                            for (int num8 = num7 + 1; num8 < (length - 1); num8++)
                            {
                                for (int num9 = num8 + 1; num9 < length; num9++)
                                {
                                    for (int num10 = 0; num10 < (num4 - 1); num10++)
                                    {
                                        for (int num11 = num10 + 1; num11 < num4; num11++)
                                        {
                                            list.Add(strArray2[k] + " " + strArray2[n] + " " + strArray2[num7] + " " + strArray2[num8] + " " + strArray2[num9] + " + " + strArray3[num10] + " " + strArray3[num11]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray4 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray4[m] = list[m].ToString();
                }
                return strArray4;
            }

            private string[] ToSingle_12X2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }), 12);
                CanonicalNumber = "";
                if (strArray.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 1); j++)
                {
                    for (int m = j + 1; m < length; m++)
                    {
                        list.Add(strArray[j] + " " + strArray[m]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class Ticket
        {
            public double Money;
            public int Multiple;
            public string Number;
            public int PlayTypeID;

            public Ticket(int playtype_id, string number, int multiple, double money)
            {
                this.PlayTypeID = playtype_id;
                this.Multiple = multiple;
                this.Number = number;
                this.Money = money;
            }

            public override string ToString()
            {
                return (this.PlayTypeID.ToString() + "," + this.Multiple.ToString() + "," + this.Money.ToString() + "," + this.Number.Replace("\r\n", "\t").Replace("\n", "\t") + ";");
            }
        }

        public class TJFC15X5 : Lottery.LotteryBase
        {
            public const string Code = "TJFC15X5";
            public const int ID = 0x2e;
            public const double MaxMoney = 6006.0;
            public const string Name = "天津风采15选5";
            public const int PlayType_D = 0x11f9;
            public const int PlayType_D_3 = 0x11fb;
            public const int PlayType_F = 0x11fa;
            public const int PlayType_F_3 = 0x11fc;
            public const string sID = "46";

            public TJFC15X5()
            {
                base.id = 0x2e;
                base.name = "天津风采15选5";
                base.code = "TJFC15X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0x11f9) || (PlayType == 0x11fa))
                {
                    return this.AnalyseScheme_Zhi(Content, PlayType);
                }
                if ((PlayType != 0x11fb) && (PlayType != 0x11fc))
                {
                    return "";
                }
                return this.AnalyseScheme_3(Content, PlayType);
            }

            private string AnalyseScheme_3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x11fb)
                {
                    str2 = @"(\d\d\s){2}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){2,14}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x11fb) ? 1 : 2))) && (strArray2.Length <= 3003.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x11f9)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,14}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zhi(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x11f9) ? 1 : 2))) && (strArray2.Length <= 3003.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_Zhi(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x10);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x11f9) && (play_type <= 0x11fc));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                if ((PlayType == 0x11f9) || (PlayType == 0x11fa))
                {
                    return this.ComputeWin_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3]);
                }
                if ((PlayType != 0x11fb) && (PlayType != 0x11fc))
                {
                    return -4.0;
                }
                return this.ComputeWin_3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5]);
            }

            private double ComputeWin_3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 7)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 7)
                            {
                                string[] strArray3 = new string[3];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num6 = 0;
                                bool flag = true;
                                for (int k = 0; k < 3; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num6++;
                                    }
                                }
                                if (flag && (num6 == 3))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "彩中3奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                double num3 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num7 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num7++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num7)
                                    {
                                        case 5:
                                            num++;
                                            num3 += WinMoney1;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                            break;

                                        case 4:
                                            num2++;
                                            num3 += WinMoney2;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num3;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 15)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x11f9, "单式"), new Lottery.PlayType(0x11fa, "复式"), new Lottery.PlayType(0x11fb, "彩中3单式"), new Lottery.PlayType(0x11fc, "彩中3复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                string str;
                Number = Number.Trim();
                if (Number == "")
                {
                    return "";
                }
                string[] numbers = Number.Split(new char[] { '\n' });
                if ((numbers == null) || (numbers.Length < 1))
                {
                    return "";
                }
                if ((((str = LotteryMachine) == null) || !(str == "SN-3000CQA")) || ((PlayTypeID != 0x11f9) && (PlayTypeID != 0x11fa)))
                {
                    return "";
                }
                return this.GetPrintKeyList_SN_3000CQA_D(numbers);
            }

            private string GetPrintKeyList_SN_3000CQA_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0x11f9) || (PlayType == 0x11fa))
                {
                    return this.ToSingle_Zhi(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x11fb) && (PlayType != 0x11fc))
                {
                    return null;
                }
                return this.ToSingle_3(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 2); j++)
                {
                    for (int m = j + 1; m < (length - 1); m++)
                    {
                        for (int n = m + 1; n < length; n++)
                        {
                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n]);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class TTCX4 : Lottery.LotteryBase
        {
            public const string Code = "TTCX4";
            public const int ID = 60;
            public const double MaxMoney = 10000.0;
            public const string Name = "天天彩选4";
            public const int PlayType_ZhiD = 0x1771;
            public const int PlayType_ZhiF = 0x1772;
            public const int PlayType_ZuD = 0x1773;
            public const string sID = "60";

            public TTCX4()
            {
                base.id = 60;
                base.name = "天天彩选4";
                base.code = "TTCX4";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0x1771) || (PlayType == 0x1772))
                {
                    return this.AnalyseScheme_Zhi(Content, PlayType);
                }
                if (PlayType == 0x1773)
                {
                    return this.AnalyseScheme_Zu(Content, PlayType);
                }
                return "";
            }

            private string AnalyseScheme_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1771)
                {
                    str2 = @"([\d]){4}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){4}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1771) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zu(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(([\d])|([(][\d]{2,10}[)])){4}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1773) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseSchemeToElectronicTicket_Zu(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(([\d])|([(][\d]{1,10}[)])){4}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zu(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                str = str + strArray2[j] + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_Zhi(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 4; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1771) && (play_type <= 0x1773));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 10))
                {
                    return -3.0;
                }
                if ((PlayType == 0x1771) || (PlayType == 0x1772))
                {
                    return this.ComputeWin_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1]);
                }
                if (PlayType == 0x1773)
                {
                    return this.ComputeWin_Zu(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9]);
                }
                return -4.0;
            }

            private double ComputeWin_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 4) && (strArray2[j] == WinNumber))
                            {
                                num++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "单选奖" + num.ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_Zu(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 4)
                {
                    return -1.0;
                }
                WinNumber = WinNumber.Substring(0, 4);
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                double num5 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    if (strArray[i].Length >= 4)
                    {
                        string[] strArray2 = this.ToSingle_Zu(strArray[i], ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            for (int j = 0; j < strArray2.Length; j++)
                            {
                                if ((strArray2[j].Length >= 4) && ((base.Sort(strArray2[j]) == base.Sort(WinNumber)) || base.Sort(strArray2[j]).Equals(base.Sort(WinNumber))))
                                {
                                    if ((this.FilterRepeated(base.Sort(strArray2[j])).Length == 2) && (base.Sort(strArray2[j]).Substring(1, 1) == base.Sort(strArray2[j]).Substring(2, 1)))
                                    {
                                        num++;
                                        num5 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                    if ((this.FilterRepeated(base.Sort(strArray2[j])).Length == 2) && (base.Sort(strArray2[j]).Substring(1, 1) != base.Sort(strArray2[j]).Substring(2, 1)))
                                    {
                                        num2++;
                                        num5 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                    }
                                    if (this.FilterRepeated(base.Sort(strArray2[j])).Length == 3)
                                    {
                                        num3++;
                                        num5 += WinMoney3;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                    }
                                    if (this.FilterRepeated(base.Sort(strArray2[j])).Length == 4)
                                    {
                                        num4++;
                                        num5 += WinMoney4;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax4;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "组选4奖" + num.ToString() + "注。";
                }
                if (num2 > 0)
                {
                    Description = "组选6奖" + num2.ToString() + "注。";
                }
                if (num3 > 0)
                {
                    Description = "组选12奖" + num3.ToString() + "注。";
                }
                if (num4 > 0)
                {
                    Description = "组选24奖" + num4.ToString() + "注。";
                }
                return num5;
            }

            private string ConvertFormatToElectronTicket_HPSH(int PlayTypeID, string Number)
            {
                Number = Number.Trim();
                string[] strArray = new string[4];
                string str = "";
                if (((PlayTypeID == 0x1771) || (PlayTypeID == 0x1773)) || (PlayTypeID == 0x1772))
                {
                    string[] strArray2 = Number.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray2.Length; i++)
                    {
                        Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[i]);
                        for (int j = 0; j < 4; j++)
                        {
                            strArray[j] = match.Groups["L" + j.ToString()].ToString().Trim();
                            if (strArray[j] == "")
                            {
                                return "";
                            }
                            if (strArray[j].Length > 1)
                            {
                                strArray[j] = strArray[j].Substring(1, strArray[j].Length - 2);
                                if (strArray[j].Length > 1)
                                {
                                    strArray[j] = this.FilterRepeated(strArray[j]);
                                }
                                if (strArray[j] == "")
                                {
                                    return "";
                                }
                            }
                            str = str + strArray[j] + ",";
                        }
                        if (str.EndsWith(","))
                        {
                            str = str.Substring(0, str.Length - 1);
                        }
                        str = str + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1771, "直选单式"), new Lottery.PlayType(0x1772, "直选复式"), new Lottery.PlayType(0x1773, "组选单复式") };
            }

            public override string HPSH_ToElectronicTicket(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                if (((PlayTypeID != 0x1771) && (PlayTypeID != 0x1772)) && (PlayTypeID != 0x1773))
                {
                    return "";
                }
                return this.HPSH_ToElectronicTicket(PlayTypeID, Number, ref TicketNumber, ref NewPlayTypeID);
            }

            private string HPSH_ToElectronicTicket_D(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID)
            {
                Number = Number.Trim();
                string str = "";
                foreach (string str2 in Number.Split(new char[] { ',' }))
                {
                    if (str2.Length > 1)
                    {
                        str = str + "(" + str2 + ")";
                    }
                    else
                    {
                        str = str + str2;
                    }
                }
                NewPlayTypeID = PlayTypeID;
                return str;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override Lottery.Ticket[] ToElectronicTicket_HPSH(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                if (PlayTypeID == 0x1771)
                {
                    return this.ToElectronicTicket_HPSH_D(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1772)
                {
                    return this.ToElectronicTicket_HPSH_F(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                if (PlayTypeID == 0x1773)
                {
                    return this.ToElectronicTicket_HPSH_Zu(PlayTypeID, Number, Multiple, MaxMultiple, ref Money);
                }
                return null;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_D(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k += 5)
                    {
                        string number = "";
                        num3 = 0.0;
                        for (int m = 0; m < 5; m++)
                        {
                            if ((k + m) < strArray.Length)
                            {
                                number = number + strArray[k + m].ToString().Split(new char[] { '|' })[0] + "\n";
                                num3 += 2.0 * double.Parse(strArray[k + m].ToString().Split(new char[] { '|' })[1]);
                            }
                        }
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xc9, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_F(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseScheme(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xd0, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            private Lottery.Ticket[] ToElectronicTicket_HPSH_Zu(int PlayTypeID, string Number, int Multiple, int MaxMultiple, ref double Money)
            {
                string[] strArray = this.AnalyseSchemeToElectronicTicket_Zu(Number, PlayTypeID).Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return null;
                }
                if (strArray.Length == 0)
                {
                    return null;
                }
                Money = 0.0;
                int num = 0;
                if ((Multiple % MaxMultiple) != 0)
                {
                    num = ((Multiple - (Multiple % MaxMultiple)) / MaxMultiple) + 1;
                }
                else
                {
                    num = Multiple / MaxMultiple;
                }
                ArrayList list = new ArrayList();
                int multiple = 1;
                double num3 = 0.0;
                for (int i = 1; i < (num + 1); i++)
                {
                    if ((i * MaxMultiple) < Multiple)
                    {
                        multiple = MaxMultiple;
                    }
                    else
                    {
                        multiple = Multiple - ((i - 1) * MaxMultiple);
                    }
                    for (int k = 0; k < strArray.Length; k++)
                    {
                        string number = "";
                        num3 = 0.0;
                        number = strArray[k].ToString().Split(new char[] { '|' })[0];
                        num3 += 2.0 * double.Parse(strArray[k].ToString().Split(new char[] { '|' })[1]);
                        Money += num3 * multiple;
                        list.Add(new Lottery.Ticket(0xca, this.ConvertFormatToElectronTicket_HPSH(PlayTypeID, number), multiple, num3 * multiple));
                    }
                }
                Lottery.Ticket[] ticketArray = new Lottery.Ticket[list.Count];
                for (int j = 0; j < ticketArray.Length; j++)
                {
                    ticketArray[j] = (Lottery.Ticket) list[j];
                }
                return ticketArray;
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0x1771) || (PlayType == 0x1772))
                {
                    return this.ToSingle_Zhi(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1773)
                {
                    return this.ToSingle_Zu(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zu(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                ArrayList list2 = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int num3 = 0; num3 < strArray[1].Length; num3++)
                    {
                        string str2 = str + strArray[1][num3].ToString();
                        for (int num4 = 0; num4 < strArray[2].Length; num4++)
                        {
                            string str3 = str2 + strArray[2][num4].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                for (int k = 0; k < list.Count; k++)
                {
                    if (this.FilterRepeated(base.Sort(list[k].ToString())).Length == 1)
                    {
                        list.Remove(list[k]);
                    }
                }
                for (int m = 0; m < list.Count; m++)
                {
                    list[m] = base.Sort(list[m].ToString());
                }
                for (int n = 0; n < list.Count; n++)
                {
                    if (list2.IndexOf(list[n]) == -1)
                    {
                        list2.Add(list[n]);
                    }
                }
                string[] strArray2 = new string[list2.Count];
                for (int num9 = 0; num9 < list2.Count; num9++)
                {
                    strArray2[num9] = list2[num9].ToString();
                }
                return strArray2;
            }
        }

        public class TTL22X5 : Lottery.LotteryBase
        {
            public const string Code = "TTL22X5";
            public const int ID = 0x2c;
            public const double MaxMoney = 200000.0;
            public const string Name = "天天乐22选5";
            public const int PlayType_D = 0x1131;
            public const int PlayType_F = 0x1132;
            public const string sID = "44";

            public TTL22X5()
            {
                base.id = 0x2c;
                base.name = "天天乐22选5";
                base.code = "TTL22X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1131)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,21}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1131) ? 1 : 2))) && (strArray2.Length <= 100000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x1131);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x17);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1131) && (play_type <= 0x1132));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num8 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num8++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num8)
                                    {
                                        case 5:
                                            num++;
                                            num4 += WinMoneyList[0];
                                            WinMoneyNoWithTax += WinMoneyList[1];
                                            break;

                                        case 4:
                                            num2++;
                                            num4 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                            break;

                                        case 3:
                                            num3++;
                                            num4 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x16)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1131, "单式"), new Lottery.PlayType(0x1132, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class XJSSC : Lottery.LotteryBase
        {
            public const string Code = "SHSSL";
            public const int ID = 0x42;
            public const double MaxMoney = 200000.0;
            public const string Name = "新疆时时彩";
            public const int PlayType_2X_QW = 0x19d5;
            public const int PlayType_2X_QWF = 0x19d6;
            public const int PlayType_2X_ZuB = 0x19d2;
            public const int PlayType_2X_ZuBD = 0x19d3;
            public const int PlayType_2X_ZuD = 0x19cf;
            public const int PlayType_2X_ZuF = 0x19d0;
            public const int PlayType_2X_ZuFW = 0x19d1;
            public const int PlayType_3X_B = 0x19d4;
            public const int PlayType_3X_ZHFS = 0x19db;
            public const int PlayType_3X_Zu3D = 0x19d7;
            public const int PlayType_3X_Zu3F = 0x19d8;
            public const int PlayType_3X_Zu6D = 0x19d9;
            public const int PlayType_3X_Zu6F = 0x19da;
            public const int PlayType_3X_ZuB = 0x19dc;
            public const int PlayType_3X_ZuBD = 0x19dd;
            public const int PlayType_5X_TXD = 0x19cd;
            public const int PlayType_5X_TXF = 0x19ce;
            public const int PlayType_D = 0x19c9;
            public const int PlayType_DX = 0x19cc;
            public const int PlayType_F = 0x19ca;
            public const int PlayType_Mixed = 0x19c8;
            public const int PlayType_ZH = 0x19cb;
            public const string sID = "66";

            public XJSSC()
            {
                base.id = 0x42;
                base.name = "新疆时时彩";
                base.code = "XJSSC";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x19c8)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if (PlayType == 0x19c9)
                {
                    return this.AnalyseScheme_D(Content, PlayType);
                }
                if (PlayType == 0x19ca)
                {
                    return this.AnalyseScheme_F(Content, PlayType);
                }
                if (PlayType == 0x19cb)
                {
                    return this.AnalyseScheme_ZH(Content, PlayType);
                }
                if (PlayType == 0x19cc)
                {
                    return this.AnalyseScheme_DX(Content, PlayType);
                }
                if ((PlayType == 0x19cd) || (PlayType == 0x19ce))
                {
                    return this.AnalyseScheme_5X_TX(Content, PlayType);
                }
                if ((PlayType == 0x19cf) || (PlayType == 0x19d0))
                {
                    return this.AnalyseScheme_2X_ZuD_ZuF(Content, PlayType);
                }
                if (PlayType == 0x19d1)
                {
                    return this.AnalyseScheme_2X_ZuFW(Content, PlayType);
                }
                if (PlayType == 0x19d2)
                {
                    return this.AnalyseScheme_2X_ZuB(Content, PlayType);
                }
                if (PlayType == 0x19d3)
                {
                    return this.AnalyseScheme_2X_ZuBD(Content, PlayType);
                }
                if (PlayType == 0x19d4)
                {
                    return this.AnalyseScheme_3X_B(Content, PlayType);
                }
                if (PlayType == 0x19d7)
                {
                    return this.AnalyseScheme_3X_Zu3D(Content, PlayType);
                }
                if (PlayType == 0x19d8)
                {
                    return this.AnalyseScheme_3X_Zu3F(Content, PlayType);
                }
                if (PlayType == 0x19d9)
                {
                    return this.AnalyseScheme_3X_Zu6D(Content, PlayType);
                }
                if (PlayType == 0x19da)
                {
                    return this.AnalyseScheme_3X_Zu6F(Content, PlayType);
                }
                if (PlayType == 0x19db)
                {
                    return this.AnalyseScheme_3X_ZHFS(Content, PlayType);
                }
                if (PlayType == 0x19dc)
                {
                    return this.AnalyseScheme_3X_ZuB(Content, PlayType);
                }
                if (PlayType == 0x19dd)
                {
                    return this.AnalyseScheme_3X_ZuBD(Content, PlayType);
                }
                if ((PlayType != 0x19d5) && (PlayType != 0x19d6))
                {
                    return "";
                }
                return this.AnalyseScheme_2X_QW(Content, PlayType);
            }

            private string AnalyseScheme_2X_QW(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x19d5)
                {
                    str2 = @"([\d]){3}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){3}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_QW(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x19d5) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2X_ZuB(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuB(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2X_ZuBD(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuBD(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2X_ZuD_ZuF(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x19cf)
                {
                    str2 = @"(\d){2}";
                }
                else
                {
                    str2 = @"(\d){3,10}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuD_ZuF(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x19cf) ? 1 : 2)))
                        {
                            if (this.FilterRepeated(base.Sort(match.Value)).Length == 2)
                            {
                                if (PlayType != 0x19d0)
                                {
                                    str = str + match.Value + "|1\n";
                                }
                            }
                            else
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_2X_ZuFW(string Content, int PlayType)
            {
                string[] strArray = Content.Trim().Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"([(](\d){2,10}[)][(](\d){2,10}[)])|([\d][(](\d){2,10}[)])|([(](\d){2,10}[)][\d])";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    strArray[i] = base.FilterPreFix(strArray[i]);
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_2X_ZuFW(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_B(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_B(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_ZHFS(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){3,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_ZHFS(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_Zu3D(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"[\d]{3}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_Zu3D(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_Zu3F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){2,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_Zu3F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_Zu6D(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"[\d]{3}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_Zu6D(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_Zu6F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){3,}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_Zu6F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_ZuB(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_ZuB(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_3X_ZuBD(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                Regex regex = new Regex(@"([\d]){1,2}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_3X_ZuBD(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str3 = str;
                            string[] strArray3 = new string[] { str3, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_5X_TX(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x19cd)
                {
                    str2 = @"([\d]){5}";
                }
                else
                {
                    str2 = @"(([\d])|([(][\d]{1,10}[)])){5}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_5X_TX(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x19cd) ? 1 : 2))) && (strArray2.Length <= 100000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_D(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(([\d])|([-])){4}[\d]";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_D(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_DX(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "([[]猜大小[]])*?([大小单双]){2}";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_DX(match.Value.Replace("[猜大小]", ""), ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_F(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(([\d])|([-])){4}[\d]";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_F(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 1))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[单式]"))
                    {
                        str3 = str3 + this.AnalyseScheme_D(strArray[i], 0x19c9);
                    }
                    if (strArray[i].StartsWith("[复式]"))
                    {
                        str3 = str3 + this.AnalyseScheme_F(strArray[i], 0x19ca);
                    }
                    if (strArray[i].StartsWith("[组合玩法]"))
                    {
                        str3 = str3 + this.AnalyseScheme_ZH(strArray[i], 0x19cb);
                    }
                    if (strArray[i].StartsWith("[猜大小]"))
                    {
                        str3 = str3 + this.AnalyseScheme_DX(strArray[i], 0x19cc);
                    }
                    if (strArray[i].StartsWith("[五星通选单式]"))
                    {
                        str3 = str3 + this.AnalyseScheme_5X_TX(strArray[i], 0x19cd);
                    }
                    if (strArray[i].StartsWith("[五星通选复式]"))
                    {
                        str3 = str3 + this.AnalyseScheme_5X_TX(strArray[i], 0x19ce);
                    }
                    if (strArray[i].StartsWith("[二星组选单式]"))
                    {
                        str3 = str3 + this.AnalyseScheme_2X_ZuD_ZuF(strArray[i], 0x19cf);
                    }
                    if (strArray[i].StartsWith("[二星组选复式]"))
                    {
                        str3 = str3 + this.AnalyseScheme_2X_ZuD_ZuF(strArray[i], 0x19d0);
                    }
                    if (strArray[i].StartsWith("[二星组选分位]"))
                    {
                        str3 = str3 + this.AnalyseScheme_2X_ZuFW(strArray[i], 0x19d1);
                    }
                    if (strArray[i].StartsWith("[二星组选包点]"))
                    {
                        str3 = str3 + this.AnalyseScheme_2X_ZuB(strArray[i], 0x19d2);
                    }
                    if (strArray[i].StartsWith("[二星组选包胆]"))
                    {
                        str3 = str3 + this.AnalyseScheme_2X_ZuBD(strArray[i], 0x19d3);
                    }
                    if (strArray[i].StartsWith("[三星包点]"))
                    {
                        str3 = str3 + this.AnalyseScheme_3X_B(strArray[i], 0x19d4);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_ZH(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(([\d-])|([(][\d]+?[)])){4}(([\d])|([(][\d]+?[)]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_ZH(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= 2))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"([\d]){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                if ((((Type != 5) && (Type != 3)) && ((Type != 2) && (Type != 1))) && (Type != -1))
                {
                    Type = 5;
                }
                if (Type == -1)
                {
                    return this.BuildNumber_DX(Num);
                }
                return this.BuildNumber_5321(Num, Type);
            }

            private string BuildNumber_5321(int Num, int Type)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = Type; j < 5; j++)
                    {
                        str = str + "-";
                    }
                    for (int k = 0; k < Type; k++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            private string BuildNumber_DX(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 2; j++)
                    {
                        str = str + "大小单双".Substring(random.Next(0, 4), 1);
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x19c8) && (play_type <= 0x19dd));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 20))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int winCountDX = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                int num12 = 0;
                if (PlayType == 0x19c8)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13], WinMoneyList[20], WinMoneyList[0x15], WinMoneyList[0x16], WinMoneyList[0x17], WinMoneyList[0x18], WinMoneyList[0x19], WinMoneyList[0x1a], WinMoneyList[0x1b], WinMoneyList[0x1c], WinMoneyList[0x1d]);
                }
                if (PlayType == 0x19c9)
                {
                    return this.ComputeWin_D(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num, ref num2, ref num3, ref num4);
                }
                if (PlayType == 0x19ca)
                {
                    return this.ComputeWin_F(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num, ref num2, ref num3, ref num4);
                }
                if (PlayType == 0x19cb)
                {
                    return this.ComputeWin_ZH(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num, ref num2, ref num3, ref num4);
                }
                if (PlayType == 0x19cc)
                {
                    return this.ComputeWin_DX(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], ref winCountDX);
                }
                if ((PlayType == 0x19cd) || (PlayType == 0x19ce))
                {
                    return this.ComputeWin_5X_TX(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13], ref num8, ref num9, ref num10);
                }
                if ((PlayType == 0x19cf) || (PlayType == 0x19d0))
                {
                    return this.ComputeWin_2X_ZuD_ZuF(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11], ref num6);
                }
                if (PlayType == 0x19d1)
                {
                    return this.ComputeWin_2X_ZuFW(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], ref num6, ref num7);
                }
                if (PlayType == 0x19d2)
                {
                    return this.ComputeWin_2X_ZuB(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], ref num6, ref num7);
                }
                if (PlayType == 0x19d3)
                {
                    return this.ComputeWin_2X_ZuBD(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], ref num6, ref num7);
                }
                if (PlayType == 0x19d4)
                {
                    return this.ComputeWin_3X_B(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref num2);
                }
                if ((PlayType != 0x19d5) && (PlayType != 0x19d6))
                {
                    return -4.0;
                }
                return this.ComputeWin_2X_QW(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[20], WinMoneyList[0x15], WinMoneyList[0x16], WinMoneyList[0x17], ref num11, ref num12);
            }

            private double ComputeWin_2X_QW(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_2XQW_1, ref int WinCount_2XQW_2)
            {
                WinCount_2XQW_1 = 0;
                WinCount_2XQW_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                WinNumber = WinNumber.Substring(2, 3);
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_QW(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j].Substring(1, 2) == WinNumber.Substring(1, 2)))
                            {
                                WinCount_2XQW_2++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                if (((int.Parse(strArray2[j].Substring(0, 1)) <= 4) && (int.Parse(WinNumber.Substring(0, 1)) <= 4)) || ((int.Parse(strArray2[j].Substring(0, 1)) > 4) && (int.Parse(WinNumber.Substring(0, 1)) > 4)))
                                {
                                    WinCount_2XQW_1++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2XQW_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "趣味二星一等奖" + ((int) WinCount_2XQW_1).ToString() + "注");
                }
                if (WinCount_2XQW_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "趣味二星二等奖" + ((int) WinCount_2XQW_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_2X_ZuB(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_2X_Zu, ref int WinCount_2X_Zu_DZH)
            {
                WinCount_2X_Zu = 0;
                WinCount_2X_Zu_DZH = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                bool flag = WinNumber[0] == WinNumber[1];
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuB(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (!flag)
                                {
                                    WinCount_2X_Zu++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    WinCount_2X_Zu_DZH++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (WinCount_2X_Zu_DZH > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖(对子号)" + ((int) WinCount_2X_Zu_DZH).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_2X_ZuBD(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_2X_Zu, ref int WinCount_2X_Zu_DZH)
            {
                WinCount_2X_Zu = 0;
                WinCount_2X_Zu_DZH = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                bool flag = WinNumber[0] == WinNumber[1];
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuBD(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (!flag)
                                {
                                    WinCount_2X_Zu++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    WinCount_2X_Zu_DZH++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (WinCount_2X_Zu_DZH > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖(对子号)" + ((int) WinCount_2X_Zu_DZH).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_2X_ZuD_ZuF(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_2X_Zu)
            {
                WinCount_2X_Zu = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuD_ZuF(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                WinCount_2X_Zu++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_2X_ZuFW(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_2X_Zu, ref int WinCount_2X_Zu_DZH)
            {
                WinCount_2X_Zu = 0;
                WinCount_2X_Zu_DZH = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                WinNumber = WinNumber.Substring(3, 2);
                bool flag = WinNumber[0] == WinNumber[1];
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_2X_ZuFW(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 2) && (base.Sort(strArray2[j]) == base.Sort(WinNumber)))
                            {
                                if (!flag)
                                {
                                    WinCount_2X_Zu++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                else
                                {
                                    WinCount_2X_Zu_DZH++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_2X_Zu > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + ((int) WinCount_2X_Zu).ToString() + "注");
                }
                if (WinCount_2X_Zu_DZH > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖(对子号)" + ((int) WinCount_2X_Zu_DZH).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_3X_B(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount_5XTX_2)
            {
                WinCount_5XTX_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_3X_B(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Length >= 3) && (strArray2[j] == WinNumber.Substring(2, 3)))
                            {
                                WinCount_5XTX_2++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_5XTX_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + ((int) WinCount_5XTX_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_5X_TX(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, ref int WinCount_5XTX_1, ref int WinCount_5XTX_2, ref int WinCount_5XTX_3)
            {
                WinCount_5XTX_1 = 0;
                WinCount_5XTX_2 = 0;
                WinCount_5XTX_3 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_5X_TX(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 5)
                            {
                                if (strArray2[j] == WinNumber)
                                {
                                    WinCount_5XTX_1++;
                                    num += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                                if ((strArray2[j].Substring(2, 3) == WinNumber.Substring(2, 3)) || (strArray2[j].Substring(0, 3) == WinNumber.Substring(0, 3)))
                                {
                                    WinCount_5XTX_2++;
                                    num += WinMoney2;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                }
                                if ((strArray2[j].Substring(3, 2) == WinNumber.Substring(3, 2)) || (strArray2[j].Substring(0, 2) == WinNumber.Substring(0, 2)))
                                {
                                    WinCount_5XTX_3++;
                                    num += WinMoney3;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                }
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount_5XTX_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选一等奖" + ((int) WinCount_5XTX_1).ToString() + "注");
                }
                if (WinCount_5XTX_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选二等奖" + ((int) WinCount_5XTX_2).ToString() + "注");
                }
                if (WinCount_5XTX_3 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选三等奖" + ((int) WinCount_5XTX_3).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_D(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, ref int WinCount5X, ref int WinCount3X, ref int WinCount2X, ref int WinCount1X)
            {
                WinCount5X = 0;
                WinCount3X = 0;
                WinCount2X = 0;
                WinCount1X = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_D(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (regexArray[0].IsMatch(strArray2[j]) && (strArray2[j] == WinNumber))
                            {
                                WinCount5X++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                            else if (regexArray[1].IsMatch(strArray2[j]) && (strArray2[j].Substring(2, 3) == WinNumber.Substring(2, 3)))
                            {
                                WinCount3X++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                            }
                            else if (regexArray[2].IsMatch(strArray2[j]) && (strArray2[j].Substring(3, 2) == WinNumber.Substring(3, 2)))
                            {
                                WinCount2X++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                            else if (regexArray[3].IsMatch(strArray2[j]) && (strArray2[j].Substring(4, 1) == WinNumber.Substring(4, 1)))
                            {
                                WinCount1X++;
                                num += WinMoney4;
                                WinMoneyNoWithTax += WinMoneyNoWithTax4;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount5X > 0)
                {
                    base.MergeWinDescription(ref Description, "五星奖" + ((int) WinCount5X).ToString() + "注");
                }
                if (WinCount3X > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + ((int) WinCount3X).ToString() + "注");
                }
                if (WinCount2X > 0)
                {
                    base.MergeWinDescription(ref Description, "二星奖" + ((int) WinCount2X).ToString() + "注");
                }
                if (WinCount1X > 0)
                {
                    base.MergeWinDescription(ref Description, "一星奖" + ((int) WinCount1X).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_DX(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCountDX)
            {
                WinCountDX = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                string str = "";
                string str2 = "";
                int num = _Convert.StrToInt(WinNumber.Substring(3, 1), 0);
                str = str + ((num <= 4) ? "小" : "大") + (((num % 2) == 0) ? "双" : "单");
                num = _Convert.StrToInt(WinNumber.Substring(4, 1), 0);
                str2 = str2 + ((num <= 4) ? "小" : "大") + (((num % 2) == 0) ? "双" : "单");
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_DX(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (((strArray2[j].Length >= 2) && (str.IndexOf(strArray2[j][0]) >= 0)) && (str2.IndexOf(strArray2[j][1]) >= 0))
                            {
                                WinCountDX++;
                                num2 += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCountDX > 0)
                {
                    base.MergeWinDescription(ref Description, "猜大小奖" + ((int) WinCountDX).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_F(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, ref int WinCount5X, ref int WinCount3X, ref int WinCount2X, ref int WinCount1X)
            {
                WinCount5X = 0;
                WinCount3X = 0;
                WinCount2X = 0;
                WinCount1X = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_F(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (regexArray[0].IsMatch(strArray2[j]) && (strArray2[j] == WinNumber))
                            {
                                WinCount5X++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                            else if (regexArray[1].IsMatch(strArray2[j]) && (strArray2[j].Substring(2, 3) == WinNumber.Substring(2, 3)))
                            {
                                WinCount3X++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                            }
                            else if (regexArray[2].IsMatch(strArray2[j]) && (strArray2[j].Substring(3, 2) == WinNumber.Substring(3, 2)))
                            {
                                WinCount2X++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                            else if (regexArray[3].IsMatch(strArray2[j]) && (strArray2[j].Substring(4, 1) == WinNumber.Substring(4, 1)))
                            {
                                WinCount1X++;
                                num += WinMoney4;
                                WinMoneyNoWithTax += WinMoneyNoWithTax4;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount5X > 0)
                {
                    base.MergeWinDescription(ref Description, "五星奖" + ((int) WinCount5X).ToString() + "注");
                }
                if (WinCount3X > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + ((int) WinCount3X).ToString() + "注");
                }
                if (WinCount2X > 0)
                {
                    base.MergeWinDescription(ref Description, "二星奖" + ((int) WinCount2X).ToString() + "注");
                }
                if (WinCount1X > 0)
                {
                    base.MergeWinDescription(ref Description, "一星奖" + ((int) WinCount1X).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8, double WinMoney9, double WinMoneyNoWithTax9, double WinMoney10, double WinMoneyNoWithTax10, double WinMoney11, double WinMoneyNoWithTax11, double WinMoney12, double WinMoneyNoWithTax12, double WinMoney13, double WinMoneyNoWithTax13, double WinMoney14, double WinMoneyNoWithTax14, double WinMoney15, double WinMoneyNoWithTax15)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int num13 = 0;
                    int num14 = 0;
                    int num15 = 0;
                    int num16 = 0;
                    int winCountDX = 0;
                    int num18 = 0;
                    int num19 = 0;
                    int num20 = 0;
                    int num21 = 0;
                    int num22 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[单式]"))
                    {
                        num += this.ComputeWin_D(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, WinMoney2, WinMoneyNoWithTax2, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num13, ref num14, ref num15, ref num16);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += num13;
                        num3 += num14;
                        num4 += num15;
                        num5 += num16;
                    }
                    else if (strArray[i].StartsWith("[复式]"))
                    {
                        num += this.ComputeWin_F(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, WinMoney2, WinMoneyNoWithTax2, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num13, ref num14, ref num15, ref num16);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += num13;
                        num3 += num14;
                        num4 += num15;
                        num5 += num16;
                    }
                    else if (strArray[i].StartsWith("[组合玩法]"))
                    {
                        num += this.ComputeWin_ZH(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, WinMoney2, WinMoneyNoWithTax2, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num13, ref num14, ref num15, ref num16);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += num13;
                        num3 += num14;
                        num4 += num15;
                        num5 += num16;
                    }
                    else if (strArray[i].StartsWith("[猜大小]"))
                    {
                        num += this.ComputeWin_DX(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, ref winCountDX);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += winCountDX;
                    }
                    else if (strArray[i].StartsWith("[五星通选单式]") || strArray[i].StartsWith("[五星通选复式]"))
                    {
                        num += this.ComputeWin_5X_TX(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney8, WinMoneyNoWithTax8, WinMoney9, WinMoneyNoWithTax9, WinMoney10, WinMoneyNoWithTax10, ref num20, ref num21, ref num22);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num9 += num20;
                        num10 += num21;
                        num11 += num22;
                    }
                    else if (strArray[i].StartsWith("[二星组选单式]") || strArray[i].StartsWith("[二星组选复式]"))
                    {
                        num += this.ComputeWin_2X_ZuD_ZuF(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney6, WinMoneyNoWithTax6, ref num18);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num7 += num18;
                    }
                    else if (strArray[i].StartsWith("[二星组选分位]"))
                    {
                        num += this.ComputeWin_2X_ZuFW(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney6, WinMoneyNoWithTax6, WinMoney7, WinMoneyNoWithTax7, ref num18, ref num19);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num7 += num18;
                        num8 += num19;
                    }
                    else if (strArray[i].StartsWith("[二星组选包点]"))
                    {
                        num += this.ComputeWin_2X_ZuB(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney6, WinMoneyNoWithTax6, WinMoney7, WinMoneyNoWithTax7, ref num18, ref num19);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num7 += num18;
                        num8 += num19;
                    }
                    else if (strArray[i].StartsWith("[二星组选包胆]"))
                    {
                        num += this.ComputeWin_2X_ZuBD(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney6, WinMoneyNoWithTax6, WinMoney7, WinMoneyNoWithTax7, ref num18, ref num19);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num7 += num18;
                        num8 += num19;
                    }
                    else if (strArray[i].StartsWith("[三星包点]"))
                    {
                        num += this.ComputeWin_3X_B(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref num21);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += num21;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星奖" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "二星奖" + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "一星奖" + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "猜大小奖" + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖" + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "二星组选奖(对子号)" + num8.ToString() + "注");
                }
                if (num9 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选一等奖" + num9.ToString() + "注");
                }
                if (num10 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选二等奖" + num10.ToString() + "注");
                }
                if (num11 > 0)
                {
                    base.MergeWinDescription(ref Description, "五星通选三等奖" + num11.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_ZH(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, ref int WinCount5X, ref int WinCount3X, ref int WinCount2X, ref int WinCount1X)
            {
                WinCount5X = 0;
                WinCount3X = 0;
                WinCount2X = 0;
                WinCount1X = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_ZH(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (regexArray[0].IsMatch(strArray2[j]) && (strArray2[j] == WinNumber))
                            {
                                WinCount5X++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                            else if (regexArray[1].IsMatch(strArray2[j]) && (strArray2[j].Substring(2, 3) == WinNumber.Substring(2, 3)))
                            {
                                WinCount3X++;
                                num += WinMoney2;
                                WinMoneyNoWithTax += WinMoneyNoWithTax2;
                            }
                            else if (regexArray[2].IsMatch(strArray2[j]) && (strArray2[j].Substring(3, 2) == WinNumber.Substring(3, 2)))
                            {
                                WinCount2X++;
                                num += WinMoney3;
                                WinMoneyNoWithTax += WinMoneyNoWithTax3;
                            }
                            else if (regexArray[3].IsMatch(strArray2[j]) && (strArray2[j].Substring(4, 1) == WinNumber.Substring(4, 1)))
                            {
                                WinCount1X++;
                                num += WinMoney4;
                                WinMoneyNoWithTax += WinMoneyNoWithTax4;
                            }
                        }
                    }
                }
                Description = "";
                if (WinCount5X > 0)
                {
                    base.MergeWinDescription(ref Description, "五星奖" + ((int) WinCount5X).ToString() + "注");
                }
                if (WinCount3X > 0)
                {
                    base.MergeWinDescription(ref Description, "三星奖" + ((int) WinCount3X).ToString() + "注");
                }
                if (WinCount2X > 0)
                {
                    base.MergeWinDescription(ref Description, "二星奖" + ((int) WinCount2X).ToString() + "注");
                }
                if (WinCount1X > 0)
                {
                    base.MergeWinDescription(ref Description, "一星奖" + ((int) WinCount1X).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789-".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { 
                    new Lottery.PlayType(0x19c8, "混合投注"), new Lottery.PlayType(0x19c9, "单式"), new Lottery.PlayType(0x19ca, "复式"), new Lottery.PlayType(0x19cb, "组合玩法"), new Lottery.PlayType(0x19cc, "猜大小"), new Lottery.PlayType(0x19cd, "五星通选单式"), new Lottery.PlayType(0x19ce, "五星通选复式"), new Lottery.PlayType(0x19cf, "二星组选单式"), new Lottery.PlayType(0x19d0, "二星组选复式"), new Lottery.PlayType(0x19d1, "二星组选分位"), new Lottery.PlayType(0x19d2, "二星组选包点"), new Lottery.PlayType(0x19d3, "二星组选包胆"), new Lottery.PlayType(0x19d4, "三星包点"), new Lottery.PlayType(0x19d5, "趣味二星单式"), new Lottery.PlayType(0x19d6, "趣味二星复式"), new Lottery.PlayType(0x19d7, "三星组3单式"), 
                    new Lottery.PlayType(0x19d8, "三星组3复式"), new Lottery.PlayType(0x19d9, "三星组6单式"), new Lottery.PlayType(0x19da, "三星组6复式"), new Lottery.PlayType(0x19db, "三星直选组合复式"), new Lottery.PlayType(0x19dc, "三星组选包胆"), new Lottery.PlayType(0x19dd, "三星组选包点")
                 };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                Number = Number.Trim();
                if (Number != "")
                {
                    string str;
                    string[] numbers = Number.Split(new char[] { '\n' });
                    if ((numbers == null) || (numbers.Length < 1))
                    {
                        return "";
                    }
                    if (((str = LotteryMachine) != null) && (str == "LT-E"))
                    {
                        if (PlayTypeID == 0x19c9)
                        {
                            return this.GetPrintKeyList_LT_E_D(numbers);
                        }
                        if (PlayTypeID == 0x19ca)
                        {
                            return this.GetPrintKeyList_LT_E_F(numbers);
                        }
                        if (PlayTypeID == 0x19cb)
                        {
                            return this.GetPrintKeyList_LT_E_Zu(numbers);
                        }
                        if (PlayTypeID == 0x19cc)
                        {
                            return this.GetPrintKeyList_LT_E_DX(numbers);
                        }
                    }
                }
                return "";
            }

            private string GetPrintKeyList_LT_E_D(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").Replace("-", "").Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7");
                    if (str3.Length == 1)
                    {
                        str = str + "[Q]";
                    }
                    if (str3.Length == 2)
                    {
                        str = str + "[R]";
                    }
                    if (str3.Length == 3)
                    {
                        str = str + "[3]";
                    }
                    if (str3.Length == 5)
                    {
                        str = str + "[1]";
                    }
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E_DX(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2)
                    {
                        if (ch.ToString() == "小")
                        {
                            str = str + "[Q]";
                        }
                        if (ch.ToString() == "大")
                        {
                            str = str + "[R]";
                        }
                        if (ch.ToString() == "单")
                        {
                            str = str + "[S]";
                        }
                        if (ch.ToString() == "双")
                        {
                            str = str + "[双]";
                        }
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7").Replace("双", "1");
            }

            private string GetPrintKeyList_LT_E_F(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    string str3 = str2.Replace(" ", "").Replace("\r", "").Replace("\n", "").Replace("-", "").Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7");
                    if (str3.Length == 2)
                    {
                        str = str + "[Q]";
                    }
                    if (str3.Length == 3)
                    {
                        str = str + "[R]";
                    }
                    if (str3.Length == 5)
                    {
                        str = str + "[1]";
                    }
                    foreach (char ch in str3)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private string GetPrintKeyList_LT_E_Zu(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    int num = 0;
                    for (int i = 0; i < str2.Length; i++)
                    {
                        if (str2.Substring(i, 1) == "-")
                        {
                            num++;
                        }
                    }
                    switch (num)
                    {
                        case 0:
                            str = str + "[X]";
                            break;

                        case 2:
                            str = str + "[T]";
                            break;

                        case 3:
                            str = str + "[S]";
                            break;
                    }
                    str = str + num.ToString();
                    foreach (char ch in str2)
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str.Replace("0", "O").Replace("1", "Q").Replace("2", "R").Replace("3", "1").Replace("4", "S").Replace("5", "T").Replace("6", "4").Replace("7", "U").Replace("8", "V").Replace("9", "7").Replace("X", "4");
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x19c8)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19c9)
                {
                    return this.ToSingle_D(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19ca)
                {
                    return this.ToSingle_F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19cb)
                {
                    return this.ToSingle_ZH(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19cc)
                {
                    return this.ToSingle_DX(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x19cd) || (PlayType == 0x19ce))
                {
                    return this.ToSingle_5X_TX(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x19cf) || (PlayType == 0x19d0))
                {
                    return this.ToSingle_2X_ZuD_ZuF(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19d1)
                {
                    return this.ToSingle_2X_ZuFW(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19d2)
                {
                    return this.ToSingle_2X_ZuB(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19d3)
                {
                    return this.ToSingle_2X_ZuBD(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19d4)
                {
                    return this.ToSingle_3X_B(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19d7)
                {
                    return this.ToSingle_3X_Zu3D(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19d8)
                {
                    return this.ToSingle_3X_Zu3F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19d9)
                {
                    return this.ToSingle_3X_Zu6D(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19da)
                {
                    return this.ToSingle_3X_Zu6F(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19db)
                {
                    return this.ToSingle_3X_ZHFS(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19dc)
                {
                    return this.ToSingle_3X_ZuB(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x19dd)
                {
                    return this.ToSingle_3X_ZuBD(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x19d5) && (PlayType != 0x19d6))
                {
                    return null;
                }
                return this.ToSingle_2X_QW(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_2X_QW(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[3];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 3; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            list.Add(str3);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_2X_ZuB(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                ArrayList list = new ArrayList();
                if ((num < 0) || (num > 0x12))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = i; k <= 9; k++)
                    {
                        if ((i + k) == num)
                        {
                            list.Add(i.ToString() + k.ToString());
                        }
                    }
                }
                CanonicalNumber = num.ToString();
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_2X_ZuBD(string sBill, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(sBill.Trim());
                if (CanonicalNumber.Length < 1)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if (CanonicalNumber.Length > 2)
                {
                    CanonicalNumber = CanonicalNumber.Substring(0, 2);
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < length; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        list.Add(chArray[i].ToString() + k.ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_2X_ZuD_ZuF(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_2X_ZuFW(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[2];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]{2,10}[)]))(?<L1>(\d)|([(][\d]{2,10}[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                if ((this.FilterRepeated(match.Groups["L0"].ToString()).Length < 2) && (this.FilterRepeated(match.Groups["L1"].ToString()).Length < 2))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < 2; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i].StartsWith("("))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        strArray[i] = this.FilterRepeated(strArray[i]);
                    }
                    if (strArray[i].Length < 1)
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        list.Add(str2);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_3X_B(string sBill, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(sBill, -1);
                CanonicalNumber = "";
                ArrayList list = new ArrayList();
                if ((num < 0) || (num > 0x1b))
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i <= 9; i++)
                {
                    for (int k = 0; k <= 9; k++)
                    {
                        for (int m = 0; m <= 9; m++)
                        {
                            if (((i + k) + m) == num)
                            {
                                list.Add(i.ToString() + k.ToString() + m.ToString());
                            }
                        }
                    }
                }
                CanonicalNumber = num.ToString();
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_3X_ZHFS(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < chArray.Length; i++)
                {
                    for (int k = 0; k < chArray.Length; k++)
                    {
                        for (int m = 0; m < chArray.Length; m++)
                        {
                            if (((i != k) && (k != m)) && ((i != m) && !list.Contains(chArray[i].ToString() + chArray[k].ToString() + chArray[m].ToString())))
                            {
                                list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[m].ToString());
                            }
                        }
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_3X_Zu3D(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number.Trim()).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = Number;
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_3X_Zu3F(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                for (int i = 0; i < (length - 1); i++)
                {
                    for (int k = i + 1; k < length; k++)
                    {
                        list.Add(chArray[i].ToString() + chArray[i].ToString() + chArray[k].ToString());
                        list.Add(chArray[i].ToString() + chArray[k].ToString() + chArray[k].ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_3X_Zu6D(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number.Trim()).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = Number;
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_3X_Zu6F(string Number, ref string CanonicalNumber)
            {
                return this.ToSingle_Zu3D_Zu6(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_3X_ZuB(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = Number;
                if ((CanonicalNumber.Length < 1) || (CanonicalNumber.Length > 2))
                {
                    CanonicalNumber = "";
                    return null;
                }
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                if (length == 1)
                {
                    for (int j = 0; j < length; j++)
                    {
                        for (int k = 0; k <= 9; k++)
                        {
                            for (int m = 0; m <= 9; m++)
                            {
                                if ((chArray[j].ToString() == k.ToString()) && !list.Contains(chArray[j].ToString() + k.ToString() + m.ToString()))
                                {
                                    list.Add(chArray[j].ToString() + k.ToString() + m.ToString());
                                }
                                if ((k.ToString() == m.ToString()) && !list.Contains(chArray[j].ToString() + k.ToString() + m.ToString()))
                                {
                                    list.Add(chArray[j].ToString() + k.ToString() + m.ToString());
                                }
                                if (((chArray[j].ToString() != k.ToString()) && (chArray[j].ToString() != m.ToString())) && ((k.ToString() != m.ToString()) && !list.Contains(base.Sort(chArray[j].ToString() + k.ToString() + m.ToString()))))
                                {
                                    list.Add(base.Sort(chArray[j].ToString() + k.ToString() + m.ToString()));
                                }
                            }
                        }
                    }
                }
                else
                {
                    for (int n = 0; n <= 9; n++)
                    {
                        list.Add(Number + n.ToString());
                    }
                }
                string[] strArray = new string[list.Count];
                for (int i = 0; i < list.Count; i++)
                {
                    strArray[i] = list[i].ToString();
                }
                return strArray;
            }

            private string[] ToSingle_3X_ZuBD(string Number, ref string CanonicalNumber)
            {
                int num = _Convert.StrToInt(Number, -1);
                CanonicalNumber = "";
                ArrayList list = new ArrayList();
                for (int i = 0; i <= 9; i++)
                {
                    for (int m = 0; m <= 9; m++)
                    {
                        for (int n = 0; n <= 9; n++)
                        {
                            if (((((i + m) + n) == num) && (i == m)) && (m == n))
                            {
                                list.Add(i.ToString() + m.ToString() + n.ToString());
                            }
                        }
                    }
                }
                if ((num < 1) || (num > 0x1a))
                {
                    if (list.Count > 0)
                    {
                        string[] strArray = new string[list.Count];
                        for (int num5 = 0; num5 < list.Count; num5++)
                        {
                            strArray[num5] = list[num5].ToString();
                        }
                        CanonicalNumber = num.ToString();
                        return strArray;
                    }
                    CanonicalNumber = "";
                    return null;
                }
                for (int j = 0; j <= 9; j++)
                {
                    for (int num7 = 0; num7 <= 9; num7++)
                    {
                        if ((j != num7) && (((j + j) + num7) == num))
                        {
                            list.Add(j.ToString() + j.ToString() + num7.ToString());
                        }
                    }
                }
                if ((num >= 3) && (num <= 0x18))
                {
                    for (int num8 = 0; num8 <= 7; num8++)
                    {
                        for (int num9 = num8 + 1; num9 <= 8; num9++)
                        {
                            for (int num10 = num9 + 1; num10 <= 9; num10++)
                            {
                                if (((num8 + num9) + num10) == num)
                                {
                                    list.Add(num8.ToString() + num9.ToString() + num10.ToString());
                                }
                            }
                        }
                    }
                }
                CanonicalNumber = num.ToString();
                if (list.Count == 0)
                {
                    return null;
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_5X_TX(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[5];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    list.Add(str5);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_D(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|(-))(?<L1>(\d)|(-))(?<L2>(\d)|(-))(?<L3>(\d)|(-))(?<L4>(\d))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str;
                }
                Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                bool flag = false;
                for (int j = 0; j < 4; j++)
                {
                    if (regexArray[j].IsMatch(CanonicalNumber))
                    {
                        flag = true;
                        break;
                    }
                }
                if (!flag)
                {
                    return null;
                }
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_DX(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>([大小单双]))(?<L1>([大小单双]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 2; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str;
                }
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_F(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.ToSingle_D(Number, ref CanonicalNumber);
                if ((strArray == null) || (strArray.Length != 1))
                {
                    return null;
                }
                Regex[] regexArray = new Regex[] { new Regex(@"(\d){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"--(\d){3}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"---(\d){2}", RegexOptions.Compiled | RegexOptions.IgnoreCase), new Regex(@"----\d", RegexOptions.Compiled | RegexOptions.IgnoreCase) };
                string[] strArray2 = null;
                if (regexArray[0].IsMatch(CanonicalNumber))
                {
                    return new string[] { CanonicalNumber, ("--" + CanonicalNumber.Substring(2, 3)), ("---" + CanonicalNumber.Substring(3, 2)), ("----" + CanonicalNumber.Substring(4, 1)) };
                }
                if (regexArray[1].IsMatch(CanonicalNumber))
                {
                    return new string[] { CanonicalNumber, ("---" + CanonicalNumber.Substring(3, 2)), ("----" + CanonicalNumber.Substring(4, 1)) };
                }
                if (regexArray[2].IsMatch(CanonicalNumber))
                {
                    return new string[] { CanonicalNumber, ("----" + CanonicalNumber.Substring(4, 1)) };
                }
                if (regexArray[3].IsMatch(CanonicalNumber))
                {
                    strArray2 = new string[] { CanonicalNumber };
                }
                return strArray2;
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[单式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_D(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_F(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[组合玩法]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_ZH(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[猜大小]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_DX(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[五星通选单式]") || Number.StartsWith("[五星通选复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_5X_TX(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[二星组选单式]") || Number.StartsWith("[二星组选复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_2X_ZuD_ZuF(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[二星组选分位]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_2X_ZuFW(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[二星组选包点]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_2X_ZuB(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[二星组选包胆]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_2X_ZuBD(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[三星包点]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_3X_B(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                return null;
            }

            private string[] ToSingle_ZH(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[5];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>([\d-])|([(][\d]+?[)]))(?<L1>([\d-])|([(][\d]+?[)]))(?<L2>([\d-])|([(][\d]+?[)]))(?<L3>([\d-])|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string number = str4 + strArray[4][num6].ToString();
                                    string canonicalNumber = "";
                                    string[] strArray2 = this.ToSingle_D(number, ref canonicalNumber);
                                    if ((strArray2 != null) && (strArray2.Length >= 1))
                                    {
                                        list.Add(number);
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray3 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray3[k] = list[k].ToString();
                }
                return strArray3;
            }

            private string[] ToSingle_Zu3D_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                if (CanonicalNumber.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = Number;
                char[] chArray = CanonicalNumber.ToCharArray();
                ArrayList list = new ArrayList();
                int length = chArray.Length;
                if (length == 2)
                {
                    for (int j = 0; j < (length - 1); j++)
                    {
                        for (int k = j + 1; k < length; k++)
                        {
                            list.Add(chArray[j].ToString() + chArray[j].ToString() + chArray[k].ToString());
                            list.Add(chArray[j].ToString() + chArray[k].ToString() + chArray[k].ToString());
                        }
                    }
                }
                else
                {
                    for (int m = 0; m < (length - 2); m++)
                    {
                        for (int n = m + 1; n < (length - 1); n++)
                        {
                            for (int num6 = n + 1; num6 < length; num6++)
                            {
                                list.Add(chArray[m].ToString() + chArray[n].ToString() + chArray[num6].ToString());
                            }
                        }
                    }
                }
                string[] strArray = new string[list.Count];
                for (int i = 0; i < list.Count; i++)
                {
                    strArray[i] = list[i].ToString();
                }
                return strArray;
            }
        }

        public class ZCDC : Lottery.LotteryBase
        {
            public const string Code = "ZCDC";
            public const int ID = 0x2d;
            public const double MaxMoney = 200000.0;
            public const string Name = "足彩单场";
            public const int PlayType_BQCSPF = 0x1199;
            public const int PlayType_SPF = 0x1195;
            public const int PlayType_SXDS = 0x1197;
            public const int PlayType_ZJQ = 0x1196;
            public const int PlayType_ZQBF = 0x1198;
            public const string sID = "45";

            public ZCDC()
            {
                base.id = 0x2d;
                base.name = "足彩单场";
                base.code = "ZCDC";
            }

            public override string AnalyseScheme(string Scheme, int CompetitionCount)
            {
                int num = 0;
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Scheme, ref canonicalNumber, CompetitionCount);
                if ((strArray == null) || (strArray.Length == 0))
                {
                    return "";
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    int num3 = _Convert.StrToInt(strArray[i].Split(new char[] { ';' })[1], 0);
                    num = (num3 > num) ? num3 : num;
                }
                string[] strArray2 = new string[] { strArray.Length.ToString(), "|", num.ToString(), "|", ((strArray.Length * num) * 2).ToString("N") };
                return string.Concat(strArray2);
            }

            public override bool AnalyseWinNumber(string Number, int CompetitionCount)
            {
                string str2 = "";
                string str3 = "";
                string str4 = "";
                string str5 = "";
                string str6 = "";
                for (int i = 0; i < CompetitionCount; i++)
                {
                    str2 = str2 + "(?<L" + i.ToString() + @">[\d]{1,2}[(][310*][,][\d]{1,}([.][\d]{1,}){0,1}[)])[|]";
                }
                str2 = str2.Substring(0, str2.Length - 3);
                for (int j = 0; j < CompetitionCount; j++)
                {
                    str3 = str3 + "(?<L" + ((CompetitionCount + j)).ToString() + @">[\d]{1,2}[(][01234567*][,][\d]{1,}([.][\d]{1,}){0,1}[)])[|]";
                }
                str3 = str3.Substring(0, str3.Length - 3);
                for (int k = 0; k < CompetitionCount; k++)
                {
                    str4 = str4 + "(?<L" + (((CompetitionCount * 2) + k)).ToString() + @">[\d]{1,2}[(][1234*][,][\d]{1,}([.][\d]{1,}){0,1}[)])[|]";
                }
                str4 = str4.Substring(0, str4.Length - 3);
                for (int m = 0; m < CompetitionCount; m++)
                {
                    str5 = str5 + "(?<L" + (((CompetitionCount * 3) + m)).ToString() + @">[\d]{1,2}[(]([\d]{1,2}|[*])[,][\d]{1,}([.][\d]{1,}){0,1}[)])[|]";
                }
                str5 = str5.Substring(0, str5.Length - 3);
                for (int n = 0; n < CompetitionCount; n++)
                {
                    str6 = str6 + "(?<L" + (((CompetitionCount * 4) + n)).ToString() + @">[\d]{1,2}[(][123456789*][,][\d]{1,}([.][\d]{1,}){0,1}[)])[|]";
                }
                str6 = str6.Substring(0, str6.Length - 3);
                Regex regex = new Regex(str2 + ";" + str3 + ";" + str4 + ";" + str5 + ";" + str6, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                return true;
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1195) && (play_type <= 0x1199));
            }

            private bool ComparedWithResult(int BuyNumberOfShowings, string BuyLotteryTicketResult, string WinNumber, int PlayType, int ResultLength, ref double SpIndex)
            {
                bool flag = false;
                string[] strArray = WinNumber.Split(new char[] { ';' });
                string str = "";
                if (PlayType == 0x1195)
                {
                    str = strArray[0];
                }
                else if (PlayType == 0x1196)
                {
                    str = strArray[1];
                }
                else if (PlayType == 0x1197)
                {
                    str = strArray[2];
                }
                else if (PlayType == 0x1198)
                {
                    str = strArray[3];
                }
                else if (PlayType == 0x1199)
                {
                    str = strArray[4];
                }
                else
                {
                    return flag;
                }
                string[] strArray2 = str.Split(new char[] { '|' });
                if ((BuyNumberOfShowings - 1) > strArray2.Length)
                {
                    SpIndex = 0.0;
                    return false;
                }
                int num = int.Parse(strArray2[BuyNumberOfShowings - 1].Substring(0, strArray2[BuyNumberOfShowings - 1].IndexOf('(')).ToString());
                string str2 = strArray2[BuyNumberOfShowings - 1].Substring(strArray2[BuyNumberOfShowings - 1].IndexOf('(') + 1, (strArray2[BuyNumberOfShowings - 1].IndexOf(',') - strArray2[BuyNumberOfShowings - 1].IndexOf('(')) - 1).ToString();
                if ((BuyNumberOfShowings != num) || (!(BuyLotteryTicketResult == str2) && !(str2 == "*")))
                {
                    return flag;
                }
                if ((ResultLength <= 1) && (str2 == "*"))
                {
                    SpIndex = -1.0;
                    return true;
                }
                if ((ResultLength > 1) && (str2 == "*"))
                {
                    SpIndex = 1.0;
                    return true;
                }
                SpIndex = double.Parse(strArray2[BuyNumberOfShowings - 1].Substring(strArray2[BuyNumberOfShowings - 1].IndexOf(',') + 1, (strArray2[BuyNumberOfShowings - 1].IndexOf(')') - strArray2[BuyNumberOfShowings - 1].IndexOf(',')) - 1).ToString());
                return true;
            }

            public override double ComputeWin(string Scheme, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, int CompetitionCount, string NoSignificance)
            {
                if (Scheme.Length < 0x10)
                {
                    return -3.0;
                }
                if ((PlayType < 0x1195) || (PlayType > 0x1199))
                {
                    return -2.0;
                }
                if (((PlayType != 0x1195) && (PlayType != 0x1196)) && (((PlayType != 0x1197) && (PlayType != 0x1198)) && (PlayType != 0x1199)))
                {
                    return -4.0;
                }
                return this.ComputeWinMethods(Scheme, WinNumber, ref Description, ref WinMoneyNoWithTax, PlayType, CompetitionCount);
            }

            private double ComputeWinMethods(string Scheme, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, int CompetitionCount)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Scheme, ref canonicalNumber, CompetitionCount);
                if ((strArray == null) || (strArray.Length < 1))
                {
                    return -2.0;
                }
                int num = 0;
                int resultLength = 0;
                double num3 = 0.0;
                double spIndex = 1.0;
                double num5 = 1.0;
                string str2 = "";
                bool flag = false;
                Description = "";
                int num6 = 0;
                int num7 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    flag = false;
                    str2 = strArray[i].Split(new char[] { ';' })[0];
                    try
                    {
                        num = int.Parse(strArray[i].Split(new char[] { ';' })[1].ToString());
                    }
                    catch
                    {
                        num = 0;
                    }
                    num5 = 1.0;
                    string[] strArray2 = str2.Split(new char[] { '|' });
                    resultLength = strArray2.Length;
                    for (int j = 0; j < resultLength; j++)
                    {
                        if (strArray2[j].Length >= 4)
                        {
                            int buyNumberOfShowings = 0;
                            try
                            {
                                buyNumberOfShowings = int.Parse(strArray2[j].Substring(0, strArray2[j].IndexOf('(')).ToString());
                            }
                            catch
                            {
                                buyNumberOfShowings = 0;
                            }
                            string buyLotteryTicketResult = strArray2[j].Substring(strArray2[j].IndexOf('(') + 1, (strArray2[j].IndexOf(')') - strArray2[j].IndexOf('(')) - 1).ToString();
                            spIndex = 1.0;
                            flag = this.ComparedWithResult(buyNumberOfShowings, buyLotteryTicketResult, WinNumber, PlayType, resultLength, ref spIndex);
                            if (!flag)
                            {
                                break;
                            }
                            if (((strArray2.Length == 1) && (spIndex < 1.538)) && (spIndex > 0.0))
                            {
                                spIndex = 1.538;
                            }
                            num5 *= Math.Round(spIndex, 4);
                        }
                    }
                    if (flag)
                    {
                        if ((strArray2.Length == 1) && (num5 == -1.0))
                        {
                            num3 += 2 * num;
                            num7++;
                        }
                        else
                        {
                            num6++;
                            num3 += (Math.Round((double) (num5 * 0.65), 4) * 2.0) * num;
                            if ((Math.Round((double) (num5 * 0.65), 4) * 2.0) >= 10000.0)
                            {
                                WinMoneyNoWithTax += ((Math.Round((double) (num5 * 0.65), 4) * 2.0) * num) * 0.8;
                            }
                            else
                            {
                                WinMoneyNoWithTax += (Math.Round((double) (num5 * 0.65), 4) * 2.0) * num;
                            }
                        }
                    }
                }
                if (num7 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "退票" + num7.ToString() + "注（场）";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "中奖" + num6.ToString() + "注";
                }
                WinMoneyNoWithTax = Math.Round(WinMoneyNoWithTax, 2);
                return Math.Round(num3, 2);
            }

            private string FilterRepeated(string NumberPart, string strPlayType)
            {
                string[] strArray = NumberPart.Split(new char[] { ',' });
                if (strArray.Length == 1)
                {
                    return NumberPart;
                }
                string str = "";
                string str2 = "";
                int num = 0;
                int num2 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    for (int k = 1; k < (strArray.Length - i); k++)
                    {
                        try
                        {
                            num = int.Parse(strArray[k]);
                        }
                        catch
                        {
                            num = -1;
                        }
                        try
                        {
                            num2 = int.Parse(strArray[k - 1]);
                        }
                        catch
                        {
                            num2 = -1;
                        }
                        if (num < num2)
                        {
                            str = strArray[k - 1];
                            strArray[k - 1] = strArray[k];
                            strArray[k] = str;
                        }
                    }
                }
                for (int j = 0; j < strArray.Length; j++)
                {
                    if (("013".IndexOf(strArray[j]) >= 0) && (strPlayType == "4501"))
                    {
                        str2 = str2 + strArray[j] + ",";
                    }
                    else if (("01234567".IndexOf(strArray[j]) >= 0) && (strPlayType == "4502"))
                    {
                        str2 = str2 + strArray[j] + ",";
                    }
                    else if (("1234".IndexOf(strArray[j]) >= 0) && (strPlayType == "4503"))
                    {
                        str2 = str2 + strArray[j] + ",";
                    }
                    else if (strPlayType == "4504")
                    {
                        int num6 = 0;
                        try
                        {
                            num6 = int.Parse(strArray[j]);
                        }
                        catch
                        {
                            num6 = 0;
                        }
                        if ((num6 > 0) && (num6 < 0x1a))
                        {
                            str2 = str2 + strArray[j] + ",";
                        }
                    }
                    else if (("123456789".IndexOf(strArray[j]) >= 0) && (strPlayType == "4505"))
                    {
                        str2 = str2 + strArray[j] + ",";
                    }
                }
                return str2.Substring(0, str2.Length - 1);
            }

            private string FilterRepeatedScheme(string Scheme)
            {
                string[] strArray = Scheme.Split(new char[] { '|' });
                if (strArray.Length == 1)
                {
                    return Scheme;
                }
                string str = "";
                string str2 = "";
                int num = 0;
                int num2 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    for (int k = 1; k < (strArray.Length - i); k++)
                    {
                        try
                        {
                            num = int.Parse(strArray[k].Substring(0, strArray[k].IndexOf('(')));
                        }
                        catch
                        {
                            num = 0;
                        }
                        try
                        {
                            num2 = int.Parse(strArray[k - 1].Substring(0, strArray[k - 1].IndexOf('(')));
                        }
                        catch
                        {
                            num2 = 0;
                        }
                        if (num < num2)
                        {
                            str = strArray[k - 1];
                            strArray[k - 1] = strArray[k];
                            strArray[k] = str;
                        }
                    }
                }
                for (int j = 0; j < strArray.Length; j++)
                {
                    str2 = str2 + strArray[j] + "|";
                }
                return str2.Substring(0, str2.Length - 1);
            }

            private string FilterRepeatedWaysResult(string WaysResult)
            {
                string[] strArray = WaysResult.Split(new char[] { ',' });
                if (strArray.Length == 1)
                {
                    return WaysResult;
                }
                string str = "";
                string str2 = "";
                int num = 0;
                int num2 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    for (int k = 1; k < (strArray.Length - i); k++)
                    {
                        try
                        {
                            num = int.Parse(_Convert.Asc(char.Parse(strArray[k].Substring(0, 1).ToString())).ToString());
                        }
                        catch
                        {
                            num = 0;
                        }
                        try
                        {
                            num2 = int.Parse(_Convert.Asc(char.Parse(strArray[k - 1].Substring(0, 1).ToString())).ToString());
                        }
                        catch
                        {
                            num2 = 0;
                        }
                        if (num < num2)
                        {
                            str = strArray[k - 1];
                            strArray[k - 1] = strArray[k];
                            strArray[k] = str;
                        }
                    }
                }
                for (int j = 0; j < strArray.Length; j++)
                {
                    str2 = str2 + strArray[j] + ",";
                }
                return str2.Substring(0, str2.Length - 1);
            }

            private string[] getAll1G(int GamesNumber, string[] Locate, string[] LocateBuyResult, string[] Screenings, int TempWaysMultiples)
            {
                ArrayList list = new ArrayList();
                for (int i = 0; i < GamesNumber; i++)
                {
                    int index = 0;
                    goto Label_0073;
                Label_0011:;
                    list.Add(string.Concat(new object[] { Screenings[i], "(", LocateBuyResult[i].Split(new char[] { ',' })[index].ToString(), ");", TempWaysMultiples }));
                    index++;
                Label_0073:;
                    if (index < LocateBuyResult[i].Split(new char[] { ',' }).Length)
                    {
                        goto Label_0011;
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] getAll2G(int GamesNumber, string[] Locate, string[] LocateBuyResult, string[] Screenings, int TempWaysMultiples)
            {
                ArrayList list = new ArrayList();
                for (int i = 0; i < GamesNumber; i++)
                {
                    int num3;
                    int index = 0;
                    goto Label_00F8;
                Label_0014:
                    num3 = i + 1;
                    while (num3 < GamesNumber)
                    {
                        int num4 = 0;
                        goto Label_00C8;
                    Label_0025:;
                        list.Add(string.Concat(new object[] { Screenings[i], "(", LocateBuyResult[i].Split(new char[] { ',' })[index].ToString(), ")|", Screenings[num3], "(", LocateBuyResult[num3].Split(new char[] { ',' })[num4].ToString(), ");", TempWaysMultiples }));
                        num4++;
                    Label_00C8:;
                        if (num4 < LocateBuyResult[num3].Split(new char[] { ',' }).Length)
                        {
                            goto Label_0025;
                        }
                        num3++;
                    }
                    index++;
                Label_00F8:;
                    if (index < LocateBuyResult[i].Split(new char[] { ',' }).Length)
                    {
                        goto Label_0014;
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] getAll3G(int GamesNumber, string[] Locate, string[] LocateBuyResult, string[] Screenings, int TempWaysMultiples)
            {
                ArrayList list = new ArrayList();
                for (int i = 0; i < GamesNumber; i++)
                {
                    int num3;
                    int index = 0;
                    goto Label_0184;
                Label_0014:
                    num3 = i + 1;
                    while (num3 < GamesNumber)
                    {
                        int num5;
                        int num4 = 0;
                        goto Label_0154;
                    Label_0025:
                        num5 = num3 + 1;
                        while (num5 < GamesNumber)
                        {
                            int num6 = 0;
                            goto Label_011E;
                        Label_0037:;
                            list.Add(string.Concat(new object[] { Screenings[i], "(", LocateBuyResult[i].Split(new char[] { ',' })[index].ToString(), ")|", Screenings[num3], "(", LocateBuyResult[num3].Split(new char[] { ',' })[num4].ToString(), ")|", Screenings[num5], "(", LocateBuyResult[num5].Split(new char[] { ',' })[num6].ToString(), ");", TempWaysMultiples }));
                            num6++;
                        Label_011E:;
                            if (num6 < LocateBuyResult[num5].Split(new char[] { ',' }).Length)
                            {
                                goto Label_0037;
                            }
                            num5++;
                        }
                        num4++;
                    Label_0154:;
                        if (num4 < LocateBuyResult[num3].Split(new char[] { ',' }).Length)
                        {
                            goto Label_0025;
                        }
                        num3++;
                    }
                    index++;
                Label_0184:;
                    if (index < LocateBuyResult[i].Split(new char[] { ',' }).Length)
                    {
                        goto Label_0014;
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] getAll4G(int GamesNumber, string[] Locate, string[] LocateBuyResult, string[] Screenings, int TempWaysMultiples)
            {
                ArrayList list = new ArrayList();
                for (int i = 0; i < GamesNumber; i++)
                {
                    int num3;
                    int index = 0;
                    goto Label_0211;
                Label_0014:
                    num3 = i + 1;
                    while (num3 < GamesNumber)
                    {
                        int num5;
                        int num4 = 0;
                        goto Label_01E1;
                    Label_0025:
                        num5 = num3 + 1;
                        while (num5 < GamesNumber)
                        {
                            int num7;
                            int num6 = 0;
                            goto Label_01AB;
                        Label_0037:
                            num7 = num5 + 1;
                            while (num7 < GamesNumber)
                            {
                                int num8 = 0;
                                goto Label_0175;
                            Label_004A:;
                                list.Add(string.Concat(new object[] { 
                                    Screenings[i], "(", LocateBuyResult[i].Split(new char[] { ',' })[index].ToString(), ")|", Screenings[num3], "(", LocateBuyResult[num3].Split(new char[] { ',' })[num4].ToString(), ")|", Screenings[num5], "(", LocateBuyResult[num5].Split(new char[] { ',' })[num6].ToString(), ")|", Screenings[num7], "(", LocateBuyResult[num7].Split(new char[] { ',' })[num8].ToString(), ");", 
                                    TempWaysMultiples
                                 }));
                                num8++;
                            Label_0175:;
                                if (num8 < LocateBuyResult[num7].Split(new char[] { ',' }).Length)
                                {
                                    goto Label_004A;
                                }
                                num7++;
                            }
                            num6++;
                        Label_01AB:;
                            if (num6 < LocateBuyResult[num5].Split(new char[] { ',' }).Length)
                            {
                                goto Label_0037;
                            }
                            num5++;
                        }
                        num4++;
                    Label_01E1:;
                        if (num4 < LocateBuyResult[num3].Split(new char[] { ',' }).Length)
                        {
                            goto Label_0025;
                        }
                        num3++;
                    }
                    index++;
                Label_0211:;
                    if (index < LocateBuyResult[i].Split(new char[] { ',' }).Length)
                    {
                        goto Label_0014;
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] getAll5G(int GamesNumber, string[] Locate, string[] LocateBuyResult, string[] Screenings, int TempWaysMultiples)
            {
                ArrayList list = new ArrayList();
                for (int i = 0; i < GamesNumber; i++)
                {
                    int num3;
                    int index = 0;
                    goto Label_029E;
                Label_0014:
                    num3 = i + 1;
                    while (num3 < GamesNumber)
                    {
                        int num5;
                        int num4 = 0;
                        goto Label_026E;
                    Label_0025:
                        num5 = num3 + 1;
                        while (num5 < GamesNumber)
                        {
                            int num7;
                            int num6 = 0;
                            goto Label_0238;
                        Label_0037:
                            num7 = num5 + 1;
                            while (num7 < GamesNumber)
                            {
                                int num9;
                                int num8 = 0;
                                goto Label_0202;
                            Label_004A:
                                num9 = num7 + 1;
                                while (num9 < GamesNumber)
                                {
                                    int num10 = 0;
                                    goto Label_01CC;
                                Label_005D:;
                                    list.Add(string.Concat(new object[] { 
                                        Screenings[i], "(", LocateBuyResult[i].Split(new char[] { ',' })[index].ToString(), ")|", Screenings[num3], "(", LocateBuyResult[num3].Split(new char[] { ',' })[num4].ToString(), ")|", Screenings[num5], "(", LocateBuyResult[num5].Split(new char[] { ',' })[num6].ToString(), ")|", Screenings[num7], "(", LocateBuyResult[num7].Split(new char[] { ',' })[num8].ToString(), ")|", 
                                        Screenings[num9], "(", LocateBuyResult[num9].Split(new char[] { ',' })[num10].ToString(), ");", TempWaysMultiples
                                     }));
                                    num10++;
                                Label_01CC:;
                                    if (num10 < LocateBuyResult[num9].Split(new char[] { ',' }).Length)
                                    {
                                        goto Label_005D;
                                    }
                                    num9++;
                                }
                                num8++;
                            Label_0202:;
                                if (num8 < LocateBuyResult[num7].Split(new char[] { ',' }).Length)
                                {
                                    goto Label_004A;
                                }
                                num7++;
                            }
                            num6++;
                        Label_0238:;
                            if (num6 < LocateBuyResult[num5].Split(new char[] { ',' }).Length)
                            {
                                goto Label_0037;
                            }
                            num5++;
                        }
                        num4++;
                    Label_026E:;
                        if (num4 < LocateBuyResult[num3].Split(new char[] { ',' }).Length)
                        {
                            goto Label_0025;
                        }
                        num3++;
                    }
                    index++;
                Label_029E:;
                    if (index < LocateBuyResult[i].Split(new char[] { ',' }).Length)
                    {
                        goto Label_0014;
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] getAll6G(int GamesNumber, string[] Locate, string[] LocateBuyResult, string[] Screenings, int TempWaysMultiples)
            {
                ArrayList list = new ArrayList();
                for (int i = 0; i < GamesNumber; i++)
                {
                    int num3;
                    int index = 0;
                    goto Label_032B;
                Label_0014:
                    num3 = i + 1;
                    while (num3 < GamesNumber)
                    {
                        int num5;
                        int num4 = 0;
                        goto Label_02FB;
                    Label_0025:
                        num5 = num3 + 1;
                        while (num5 < GamesNumber)
                        {
                            int num7;
                            int num6 = 0;
                            goto Label_02C5;
                        Label_0037:
                            num7 = num5 + 1;
                            while (num7 < GamesNumber)
                            {
                                int num9;
                                int num8 = 0;
                                goto Label_028F;
                            Label_004A:
                                num9 = num7 + 1;
                                while (num9 < GamesNumber)
                                {
                                    int num11;
                                    int num10 = 0;
                                    goto Label_0259;
                                Label_005D:
                                    num11 = num9 + 1;
                                    while (num11 < GamesNumber)
                                    {
                                        int num12 = 0;
                                        goto Label_0223;
                                    Label_0070:;
                                        list.Add(string.Concat(new object[] { 
                                            Screenings[i], "(", LocateBuyResult[i].Split(new char[] { ',' })[index].ToString(), ")|", Screenings[num3], "(", LocateBuyResult[num3].Split(new char[] { ',' })[num4].ToString(), ")|", Screenings[num5], "(", LocateBuyResult[num5].Split(new char[] { ',' })[num6].ToString(), ")|", Screenings[num7], "(", LocateBuyResult[num7].Split(new char[] { ',' })[num8].ToString(), ")|", 
                                            Screenings[num9], "(", LocateBuyResult[num9].Split(new char[] { ',' })[num10].ToString(), ")|", Screenings[num11], "(", LocateBuyResult[num11].Split(new char[] { ',' })[num12].ToString(), ");", TempWaysMultiples
                                         }));
                                        num12++;
                                    Label_0223:;
                                        if (num12 < LocateBuyResult[num11].Split(new char[] { ',' }).Length)
                                        {
                                            goto Label_0070;
                                        }
                                        num11++;
                                    }
                                    num10++;
                                Label_0259:;
                                    if (num10 < LocateBuyResult[num9].Split(new char[] { ',' }).Length)
                                    {
                                        goto Label_005D;
                                    }
                                    num9++;
                                }
                                num8++;
                            Label_028F:;
                                if (num8 < LocateBuyResult[num7].Split(new char[] { ',' }).Length)
                                {
                                    goto Label_004A;
                                }
                                num7++;
                            }
                            num6++;
                        Label_02C5:;
                            if (num6 < LocateBuyResult[num5].Split(new char[] { ',' }).Length)
                            {
                                goto Label_0037;
                            }
                            num5++;
                        }
                        num4++;
                    Label_02FB:;
                        if (num4 < LocateBuyResult[num3].Split(new char[] { ',' }).Length)
                        {
                            goto Label_0025;
                        }
                        num3++;
                    }
                    index++;
                Label_032B:;
                    if (index < LocateBuyResult[i].Split(new char[] { ',' }).Length)
                    {
                        goto Label_0014;
                    }
                }
                string[] strArray = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray[j] = list[j].ToString();
                }
                return strArray;
            }

            private string[] getAllMC1(int GamesNumber, string[] Locate, string[] LocateBuyResult, string[] Screenings, int TempWaysMultiples)
            {
                string str;
                int num3;
                int num4;
                string str2;
                int num5;
                int num6;
                string str3;
                int num7;
                int num8;
                string str4;
                int num9;
                int num10;
                string str5;
                int num11;
                int num12;
                string str6;
                int num13;
                int num14;
                string str7;
                int num15;
                int num16;
                string str8;
                int num17;
                int num18;
                string str9;
                int num19;
                int num20;
                string str10;
                int num21;
                int num22;
                string str11;
                int num23;
                int num24;
                string str12;
                int num25;
                int num26;
                string str13;
                int num27;
                int num28;
                ArrayList list = new ArrayList();
                int index = 0;
                int num2 = 0;
                goto Label_0AEB;
            Label_06B2:
                num28++;
            Label_06B8:;
                if (num28 < LocateBuyResult[num27].Split(new char[] { ',' }).Length)
                {
                    string str14 = str13 + Screenings[num27] + "(" + LocateBuyResult[num27].Split(new char[] { ',' })[num28].ToString() + ")|";
                    int num29 = num27 + 1;
                    if (num29 >= GamesNumber)
                    {
                        list.Add(str14.Substring(0, str14.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_06B2;
                    }
                    int num30 = 0;
                Label_0665:;
                    if (num30 < LocateBuyResult[num29].Split(new char[] { ',' }).Length)
                    {
                        string str15 = str14 + Screenings[num29] + "(" + LocateBuyResult[num29].Split(new char[] { ',' })[num30].ToString() + ")|";
                        list.Add(str15.Substring(0, str15.Length - 1) + ";" + TempWaysMultiples);
                        num30++;
                        goto Label_0665;
                    }
                    goto Label_06B2;
                }
            Label_0705:
                num26++;
            Label_070B:;
                if (num26 < LocateBuyResult[num25].Split(new char[] { ',' }).Length)
                {
                    str13 = str12 + Screenings[num25] + "(" + LocateBuyResult[num25].Split(new char[] { ',' })[num26].ToString() + ")|";
                    num27 = num25 + 1;
                    if (num27 >= GamesNumber)
                    {
                        list.Add(str13.Substring(0, str13.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_0705;
                    }
                    num28 = 0;
                    goto Label_06B8;
                }
            Label_0758:
                num24++;
            Label_075E:;
                if (num24 < LocateBuyResult[num23].Split(new char[] { ',' }).Length)
                {
                    str12 = str11 + Screenings[num23] + "(" + LocateBuyResult[num23].Split(new char[] { ',' })[num24].ToString() + ")|";
                    num25 = num23 + 1;
                    if (num25 >= GamesNumber)
                    {
                        list.Add(str12.Substring(0, str12.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_0758;
                    }
                    num26 = 0;
                    goto Label_070B;
                }
            Label_07AB:
                num22++;
            Label_07B1:;
                if (num22 < LocateBuyResult[num21].Split(new char[] { ',' }).Length)
                {
                    str11 = str10 + Screenings[num21] + "(" + LocateBuyResult[num21].Split(new char[] { ',' })[num22].ToString() + ")|";
                    num23 = num21 + 1;
                    if (num23 >= GamesNumber)
                    {
                        list.Add(str11.Substring(0, str11.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_07AB;
                    }
                    num24 = 0;
                    goto Label_075E;
                }
            Label_07FE:
                num20++;
            Label_0804:;
                if (num20 < LocateBuyResult[num19].Split(new char[] { ',' }).Length)
                {
                    str10 = str9 + Screenings[num19] + "(" + LocateBuyResult[num19].Split(new char[] { ',' })[num20].ToString() + ")|";
                    num21 = num19 + 1;
                    if (num21 >= GamesNumber)
                    {
                        list.Add(str10.Substring(0, str10.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_07FE;
                    }
                    num22 = 0;
                    goto Label_07B1;
                }
            Label_0851:
                num18++;
            Label_0857:;
                if (num18 < LocateBuyResult[num17].Split(new char[] { ',' }).Length)
                {
                    str9 = str8 + Screenings[num17] + "(" + LocateBuyResult[num17].Split(new char[] { ',' })[num18].ToString() + ")|";
                    num19 = num17 + 1;
                    if (num19 >= GamesNumber)
                    {
                        list.Add(str9.Substring(0, str9.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_0851;
                    }
                    num20 = 0;
                    goto Label_0804;
                }
            Label_08A4:
                num16++;
            Label_08AA:;
                if (num16 < LocateBuyResult[num15].Split(new char[] { ',' }).Length)
                {
                    str8 = str7 + Screenings[num15] + "(" + LocateBuyResult[num15].Split(new char[] { ',' })[num16].ToString() + ")|";
                    num17 = num15 + 1;
                    if (num17 >= GamesNumber)
                    {
                        list.Add(str8.Substring(0, str8.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_08A4;
                    }
                    num18 = 0;
                    goto Label_0857;
                }
            Label_08F7:
                num14++;
            Label_08FD:;
                if (num14 < LocateBuyResult[num13].Split(new char[] { ',' }).Length)
                {
                    str7 = str6 + Screenings[num13] + "(" + LocateBuyResult[num13].Split(new char[] { ',' })[num14].ToString() + ")|";
                    num15 = num13 + 1;
                    if (num15 >= GamesNumber)
                    {
                        list.Add(str7.Substring(0, str7.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_08F7;
                    }
                    num16 = 0;
                    goto Label_08AA;
                }
            Label_094A:
                num12++;
            Label_0950:;
                if (num12 < LocateBuyResult[num11].Split(new char[] { ',' }).Length)
                {
                    str6 = str5 + Screenings[num11] + "(" + LocateBuyResult[num11].Split(new char[] { ',' })[num12].ToString() + ")|";
                    num13 = num11 + 1;
                    if (num13 >= GamesNumber)
                    {
                        list.Add(str6.Substring(0, str6.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_094A;
                    }
                    num14 = 0;
                    goto Label_08FD;
                }
            Label_099D:
                num10++;
            Label_09A3:;
                if (num10 < LocateBuyResult[num9].Split(new char[] { ',' }).Length)
                {
                    str5 = str4 + Screenings[num9] + "(" + LocateBuyResult[num9].Split(new char[] { ',' })[num10].ToString() + ")|";
                    num11 = num9 + 1;
                    if (num11 >= GamesNumber)
                    {
                        list.Add(str5.Substring(0, str5.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_099D;
                    }
                    num12 = 0;
                    goto Label_0950;
                }
            Label_09F0:
                num8++;
            Label_09F6:;
                if (num8 < LocateBuyResult[num7].Split(new char[] { ',' }).Length)
                {
                    str4 = str3 + Screenings[num7] + "(" + LocateBuyResult[num7].Split(new char[] { ',' })[num8].ToString() + ")|";
                    num9 = num7 + 1;
                    if (num9 >= GamesNumber)
                    {
                        list.Add(str4.Substring(0, str4.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_09F0;
                    }
                    num10 = 0;
                    goto Label_09A3;
                }
            Label_0A43:
                num6++;
            Label_0A49:;
                if (num6 < LocateBuyResult[num5].Split(new char[] { ',' }).Length)
                {
                    str3 = str2 + Screenings[num5] + "(" + LocateBuyResult[num5].Split(new char[] { ',' })[num6].ToString() + ")|";
                    num7 = num5 + 1;
                    if (num7 >= GamesNumber)
                    {
                        list.Add(str3.Substring(0, str3.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_0A43;
                    }
                    num8 = 0;
                    goto Label_09F6;
                }
            Label_0A96:
                num4++;
            Label_0A9C:;
                if (num4 < LocateBuyResult[num3].Split(new char[] { ',' }).Length)
                {
                    str2 = str + Screenings[num3] + "(" + LocateBuyResult[num3].Split(new char[] { ',' })[num4].ToString() + ")|";
                    num5 = num3 + 1;
                    if (num5 >= GamesNumber)
                    {
                        list.Add(str2.Substring(0, str2.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_0A96;
                    }
                    num6 = 0;
                    goto Label_0A49;
                }
            Label_0AE7:
                num2++;
            Label_0AEB:;
                if (num2 < LocateBuyResult[index].Split(new char[] { ',' }).Length)
                {
                    str = Screenings[index] + "(" + LocateBuyResult[index].Split(new char[] { ',' })[num2].ToString() + ")|";
                    num3 = index + 1;
                    if (num3 >= GamesNumber)
                    {
                        list.Add(str.Substring(0, str.Length - 1) + ";" + TempWaysMultiples);
                        goto Label_0AE7;
                    }
                    num4 = 0;
                    goto Label_0A9C;
                }
                string[] strArray = new string[list.Count];
                for (int i = 0; i < list.Count; i++)
                {
                    strArray[i] = list[i].ToString();
                }
                return strArray;
            }

            public int GetBettingNumber(string Scheme, ref string CanonicalNumber, int CompetitionCount)
            {
                string[] strArray = this.ToSingle(Scheme, ref CanonicalNumber, CompetitionCount);
                if ((strArray != null) && (strArray.Length >= 1))
                {
                    return strArray.Length;
                }
                return -2;
            }

            private void GetNewPlayTypeID(int PlayTypeID, ref int NewPlayTypeID, ref string Rule)
            {
                switch (PlayTypeID)
                {
                    case 0x1195:
                        NewPlayTypeID = 0x2c;
                        Rule = "单场胜平负";
                        return;

                    case 0x1196:
                        NewPlayTypeID = 0x2d;
                        Rule = "单场进球数";
                        return;

                    case 0x1197:
                        NewPlayTypeID = 0x2e;
                        Rule = "单场上下单双";
                        return;

                    case 0x1198:
                        NewPlayTypeID = 0x2f;
                        Rule = "单场比分";
                        return;

                    case 0x1199:
                        NewPlayTypeID = 0x30;
                        Rule = "单场半全场胜平负";
                        return;
                }
                NewPlayTypeID = 0;
                Rule = "";
            }

            private string GetPassMode(string passmode)
            {
                return passmode.Replace("1", "单关").Replace("2", "双关").Replace("3", "三关").Replace("4", "2串1").Replace("5", "2串3").Replace("6", "3串1").Replace("7", "3串4").Replace("8", "3串7").Replace("9", "4串1").Replace("A", "4串4").Replace("B", "4串4").Replace("C", "4串11").Replace("D", "4串15").Replace("E", "5串1").Replace("F", "5串6").Replace("G", "5串16").Replace("H", "5串31").Replace("I", "6串1").Replace("J", "6串7").Replace("K", "6串22").Replace("L", "6串42").Replace("M", "6串57").Replace("N", "6串63");
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1195, "胜平负"), new Lottery.PlayType(0x1196, "总进球"), new Lottery.PlayType(0x1197, "上下单双"), new Lottery.PlayType(0x1198, "正确比分"), new Lottery.PlayType(0x1199, "半全场胜平负") };
            }

            public override bool GetSchemeSplit(string Scheme, ref string BuyContent, ref string CnLocateWaysAndMultiples)
            {
                if (Scheme.Split(new char[] { ';' }).Length != 3)
                {
                    BuyContent = "";
                    CnLocateWaysAndMultiples = "";
                    return false;
                }
                Scheme.Trim().Split(new char[] { ';' })[0].ToString();
                string str = Scheme.Trim().Split(new char[] { ';' })[1].ToString();
                BuyContent = str.Substring(1, str.Length - 1).Substring(0, str.Length - 2).ToString().Trim();
                if (BuyContent == "")
                {
                    BuyContent = "";
                    CnLocateWaysAndMultiples = "";
                    return false;
                }
                string str2 = Scheme.Trim().Split(new char[] { ';' })[2].ToString().Substring(1, Scheme.Trim().Split(new char[] { ';' })[2].ToString().Length - 1).Substring(0, Scheme.Trim().Split(new char[] { ';' })[2].ToString().Length - 2).ToString().Trim();
                if (str2 == "")
                {
                    BuyContent = "";
                    CnLocateWaysAndMultiples = "";
                    return false;
                }
                string[] strArray = str2.Split(new char[] { ',' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    switch (strArray[i].ToString().Substring(0, 1))
                    {
                        case "1":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "单关  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "2":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "双关  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "3":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "三关  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "4":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "2串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "5":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "2串3  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "6":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "3串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "7":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "3串4  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "8":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "3串7  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "9":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "4串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "A":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "4串5  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "B":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "4串11  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "C":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "4串15  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "D":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "5串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "E":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "5串6  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "F":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "5串16  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "G":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "5串26  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "H":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "5串31  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "I":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "6串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "J":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "6串7  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "K":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "6串22  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "L":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "6串42  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "M":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "6串57  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "N":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "6串63  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "O":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "7串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "P":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "8串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "Q":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "9串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "R":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "10串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "S":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "11串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "T":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "12串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "U":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "13串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "V":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "14串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        case "W":
                            if (CnLocateWaysAndMultiples != "")
                            {
                                CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "，";
                            }
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + "15串1  " + strArray[i].Substring(1, strArray[i].Length - 1) + " 倍";
                            break;

                        default:
                            CnLocateWaysAndMultiples = CnLocateWaysAndMultiples + " <font color='red'>读取错误！</font>";
                            break;
                    }
                }
                return true;
            }

            private string PrizeInfo(int PlayTypeID, string PrizeInfo)
            {
                switch (PlayTypeID)
                {
                    case 0x1195:
                        return PrizeInfo.Replace("3", "胜").Replace("1", "平").Replace("0", "负");

                    case 0x1196:
                        return PrizeInfo;

                    case 0x1197:
                        return PrizeInfo.Replace("1", "上单").Replace("2", "上双").Replace("3", "下单").Replace("4", "下双");

                    case 0x1198:
                        return PrizeInfo.Replace("1", "1:0").Replace("2", "2:0").Replace("3", "2:1").Replace("4", "3:0").Replace("5", "3:1").Replace("6", "3:2").Replace("7", "4:0").Replace("8", "4:1").Replace("9", "4:2").Replace("10", "胜其他").Replace("11", "0:0").Replace("12", "1:1").Replace("13", "2:2").Replace("14", "3:3").Replace("15", "平其他").Replace("16", "0:1").Replace("17", "0:2").Replace("18", "1:2").Replace("19", "0:3").Replace("20", "1:3").Replace("21", "2:3").Replace("22", "0:4").Replace("23", "1:4").Replace("24", "2:4").Replace("25", "负其他");

                    case 0x1199:
                        return PrizeInfo.Replace("1", "胜-胜").Replace("2", "胜-平").Replace("3", "胜-负").Replace("4", "平-胜").Replace("5", "平-平").Replace("6", "平-负").Replace("7", "负-胜").Replace("8", "负-平").Replace("9", "负-负");
                }
                return PrizeInfo;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string ToElectronicTicket_BJDC(int PlayTypeID, string Number, ref string TicketNumber, ref int NewPlayTypeID, ref string Rule, ref int Multiple, ref double Money, ref string GameNoList, ref string PassMode, ref int TicketCount)
            {
                this.GetNewPlayTypeID(PlayTypeID, ref NewPlayTypeID, ref Rule);
                if (Number.Split(new char[] { ';' }).Length == 3)
                {
                    string str = Number.Trim().Split(new char[] { ';' })[1].ToString();
                    string str2 = Number.Trim().Split(new char[] { ';' })[2].ToString();
                    PassMode = this.GetPassMode(str2.Substring(0, 1));
                    Multiple = _Convert.StrToInt(str2.Substring(1), 0);
                    string str3 = str.Substring(1, str.Length - 1).Substring(0, str.Length - 2).ToString().Trim();
                    if (str3 == "")
                    {
                        return "";
                    }
                    string[] strArray = str3.Split(new char[] { '|' });
                    if (strArray.Length < 1)
                    {
                        return "";
                    }
                    TicketNumber = "";
                    GameNoList = "";
                    string str4 = "";
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        str4 = strArray[i].Substring(strArray[i].IndexOf('(') + 1, (strArray[i].IndexOf(')') - strArray[i].IndexOf('(')) - 1);
                        GameNoList = GameNoList + str4 + ",";
                        TicketNumber = TicketNumber + str4;
                        TicketNumber = TicketNumber + "[";
                        TicketNumber = TicketNumber + this.PrizeInfo(PlayTypeID, strArray[i].Substring(0, strArray[i].IndexOf('(')));
                        TicketNumber = TicketNumber + "]";
                    }
                    GameNoList = GameNoList.Substring(GameNoList.Length - 1);
                }
                return "";
            }

            public override string[] ToSingle(string Scheme, ref string CanonicalNumber, int CompetitionCount)
            {
                CanonicalNumber = "";
                if (Scheme.Split(new char[] { ';' }).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                string strPlayType = Scheme.Trim().Split(new char[] { ';' })[0].ToString();
                string str2 = Scheme.Trim().Split(new char[] { ';' })[1].ToString();
                string input = str2.Substring(1, str2.Length - 1).Substring(0, str2.Length - 2).ToString().Trim();
                if (input == "")
                {
                    CanonicalNumber = "";
                    return null;
                }
                string str4 = Scheme.Trim().Split(new char[] { ';' })[2].ToString().Substring(1, Scheme.Trim().Split(new char[] { ';' })[2].ToString().Length - 1).Substring(0, Scheme.Trim().Split(new char[] { ';' })[2].ToString().Length - 2).ToString().Trim();
                if (str4 == "")
                {
                    CanonicalNumber = "";
                    return null;
                }
                int length = input.Split(new char[] { '|' }).Length;
                int num3 = str4.Split(new char[] { ',' }).Length;
                string[] locate = new string[length];
                string[] strArray2 = new string[num3];
                string pattern = "";
                string numberPart = "";
                string str7 = "";
                string str8 = "";
                int tempWaysMultiples = 0;
                switch (strPlayType)
                {
                    case "4501":
                        for (int n = 0; n < length; n++)
                        {
                            pattern = pattern + "(?<L" + n.ToString() + @">[\d]{1,2}[(][310]([,][310]){0,2}[)])[|]";
                        }
                        pattern = pattern.Substring(0, pattern.Length - 3);
                        break;

                    case "4502":
                        for (int num6 = 0; num6 < length; num6++)
                        {
                            pattern = pattern + "(?<L" + num6.ToString() + @">[\d]{1,2}[(][01234567]([,][01234567]){0,7}[)])[|]";
                        }
                        pattern = pattern.Substring(0, pattern.Length - 3);
                        break;

                    case "4503":
                        for (int num7 = 0; num7 < length; num7++)
                        {
                            pattern = pattern + "(?<L" + num7.ToString() + @">[\d]{1,2}[(][1234]([,][1234]){0,3}[)])[|]";
                        }
                        pattern = pattern.Substring(0, pattern.Length - 3);
                        break;

                    case "4504":
                        for (int num8 = 0; num8 < length; num8++)
                        {
                            pattern = pattern + "(?<L" + num8.ToString() + @">[\d]{1,2}[(][\d]{1,2}([,][\d]{1,2}){0,24}[)])[|]";
                        }
                        pattern = pattern.Substring(0, pattern.Length - 3);
                        break;

                    case "4505":
                        for (int num9 = 0; num9 < length; num9++)
                        {
                            pattern = pattern + "(?<L" + num9.ToString() + @">[\d]{1,2}[(][\d]([,][\d]){0,8}[)])[|]";
                        }
                        pattern = pattern.Substring(0, pattern.Length - 3);
                        break;
                }
                Match match = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(input);
                for (int i = 0; i < length; i++)
                {
                    locate[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (locate[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (CompetitionCount < int.Parse(locate[i].Substring(0, locate[i].IndexOf('(')).ToString()))
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    numberPart = locate[i].Substring(locate[i].IndexOf('(') + 1, (locate[i].IndexOf(')') - locate[i].IndexOf('(')) - 1);
                    if (numberPart.Length > 0)
                    {
                        numberPart = this.FilterRepeated(numberPart, strPlayType);
                        if (numberPart == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (numberPart.Length > 0)
                    {
                        string str10 = CanonicalNumber;
                        CanonicalNumber = str10 + locate[i].Substring(0, locate[i].IndexOf('(')) + "(" + numberPart + ")|";
                    }
                }
                if (CanonicalNumber.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                CanonicalNumber = this.FilterRepeatedScheme(CanonicalNumber.Substring(0, CanonicalNumber.Length - 1));
                length = 0;
                numberPart = "";
                pattern = "";
                for (int j = 0; j < num3; j++)
                {
                    pattern = pattern + "(?<L" + j.ToString() + @">[123456789ABCDEFGHIJKLMNOPQRSTUVW]{1}[\d]{1,4})[,]";
                }
                Match match2 = new Regex(pattern.Substring(0, pattern.Length - 3), RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(str4);
                for (int k = 0; k < num3; k++)
                {
                    strArray2[k] = match2.Groups["L" + k.ToString()].ToString().Trim();
                    if (strArray2[k] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    numberPart = strArray2[k].Substring(1, strArray2[k].Length - 1);
                    if (numberPart.Length > 0)
                    {
                        try
                        {
                            tempWaysMultiples = Convert.ToInt32(numberPart);
                        }
                        catch
                        {
                            tempWaysMultiples = 0;
                        }
                        if (tempWaysMultiples > 0)
                        {
                            str8 = numberPart;
                        }
                        else
                        {
                            str8 = "";
                        }
                    }
                    if (str8.Length > 0)
                    {
                        str7 = str7 + strArray2[k].Substring(0, 1).ToUpper() + str8.ToString() + ",";
                    }
                }
                if (str7.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                str7 = this.FilterRepeatedWaysResult(str7.Substring(0, str7.Length - 1));
                num3 = 0;
                ArrayList list = new ArrayList();
                length = CanonicalNumber.Split(new char[] { '|' }).Length;
                num3 = str7.Split(new char[] { ',' }).Length;
                if (length == 1)
                {
                    string[] locateBuyResult = new string[length];
                    string[] screenings = new string[length];
                    for (int num13 = 0; num13 < length; num13++)
                    {
                        locate[num13] = CanonicalNumber.Split(new char[] { '|' })[num13].ToString();
                        locateBuyResult[num13] = locate[num13].Substring(locate[num13].IndexOf('(') + 1, (locate[num13].IndexOf(')') - locate[num13].IndexOf('(')) - 1);
                        screenings[num13] = locate[num13].Substring(0, locate[num13].IndexOf('('));
                    }
                    string str9 = str7.Substring(0, 1);
                    if (num3 > 1)
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (str9 != "1")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    tempWaysMultiples = 0;
                    try
                    {
                        tempWaysMultiples = Convert.ToInt32(str7.Substring(1, str7.Length - 1));
                    }
                    catch
                    {
                        tempWaysMultiples = 0;
                    }
                    if (tempWaysMultiples <= 0)
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    string[] strArray5 = this.getAll1G(length, locate, locateBuyResult, screenings, tempWaysMultiples);
                    for (int num14 = 0; num14 < strArray5.Length; num14++)
                    {
                        list.Add(strArray5[num14].ToString());
                    }
                }
                else if (length > 1)
                {
                    string[] strArray6 = new string[length];
                    string[] strArray7 = new string[length];
                    for (int num15 = 0; num15 < length; num15++)
                    {
                        locate[num15] = CanonicalNumber.Split(new char[] { '|' })[num15].ToString();
                        strArray6[num15] = locate[num15].Substring(locate[num15].IndexOf('(') + 1, (locate[num15].IndexOf(')') - locate[num15].IndexOf('(')) - 1);
                        strArray7[num15] = locate[num15].Substring(0, locate[num15].IndexOf('('));
                    }
                    if ((((strPlayType == "4502") || (strPlayType == "4503")) || (strPlayType == "4505")) && (length > 6))
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strPlayType == "4504") && (length > 3))
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    string[] strArray8 = new string[num3];
                    string[] strArray9 = new string[num3];
                    string[] strArray10 = new string[num3];
                    for (int num16 = 0; num16 < num3; num16++)
                    {
                        string[] strArray11;
                        int num17;
                        string[] strArray12;
                        int num18;
                        string[] strArray13;
                        int num19;
                        string[] strArray14;
                        int num20;
                        string[] strArray15;
                        int num21;
                        string[] strArray17;
                        int num23;
                        string[] strArray18;
                        int num24;
                        string[] strArray20;
                        int num26;
                        string[] strArray23;
                        int num29;
                        string[] strArray24;
                        int num30;
                        string[] strArray26;
                        int num32;
                        string[] strArray29;
                        int num35;
                        string[] strArray33;
                        int num39;
                        string[] strArray34;
                        int num40;
                        string[] strArray36;
                        int num42;
                        string[] strArray39;
                        int num45;
                        string[] strArray43;
                        int num49;
                        string[] strArray48;
                        int num54;
                        string[] strArray49;
                        int num55;
                        string[] strArray51;
                        int num57;
                        string[] strArray54;
                        int num60;
                        string[] strArray58;
                        int num64;
                        string[] strArray63;
                        int num69;
                        string[] strArray69;
                        strArray8[num16] = str7.Split(new char[] { ',' })[num16].ToString();
                        strArray9[num16] = strArray8[num16].Substring(0, 1);
                        strArray10[num16] = strArray8[num16].Substring(1, strArray8[num16].Length - 1);
                        switch (strArray9[num16])
                        {
                            case "1":
                                strArray11 = this.getAll1G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num17 = 0;
                                goto Label_0B19;

                            case "2":
                                strArray12 = this.getAll2G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num18 = 0;
                                goto Label_0B62;

                            case "3":
                                strArray13 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num19 = 0;
                                goto Label_0BAB;

                            case "4":
                                strArray14 = this.getAll2G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num20 = 0;
                                goto Label_0BF4;

                            case "5":
                                strArray15 = this.getAll1G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num21 = 0;
                                goto Label_0C3D;

                            case "6":
                                strArray17 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num23 = 0;
                                goto Label_0CCA;

                            case "7":
                                strArray18 = this.getAll2G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num24 = 0;
                                goto Label_0D13;

                            case "8":
                                strArray20 = this.getAll1G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num26 = 0;
                                goto Label_0DA0;

                            case "9":
                                strArray23 = this.getAll4G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num29 = 0;
                                goto Label_0E71;

                            case "A":
                                strArray24 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num30 = 0;
                                goto Label_0EBA;

                            case "B":
                                strArray26 = this.getAll2G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num32 = 0;
                                goto Label_0F47;

                            case "C":
                                strArray29 = this.getAll1G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num35 = 0;
                                goto Label_1018;

                            case "D":
                                strArray33 = this.getAll5G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num39 = 0;
                                goto Label_112D;

                            case "E":
                                strArray34 = this.getAll4G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num40 = 0;
                                goto Label_1176;

                            case "F":
                                strArray36 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num42 = 0;
                                goto Label_1203;

                            case "G":
                                strArray39 = this.getAll2G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num45 = 0;
                                goto Label_12D4;

                            case "H":
                                strArray43 = this.getAll1G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num49 = 0;
                                goto Label_13E9;

                            case "I":
                                strArray48 = this.getAll6G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num54 = 0;
                                goto Label_1542;

                            case "J":
                                strArray49 = this.getAll5G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num55 = 0;
                                goto Label_158B;

                            case "K":
                                strArray51 = this.getAll4G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num57 = 0;
                                goto Label_1618;

                            case "L":
                                strArray54 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num60 = 0;
                                goto Label_16E9;

                            case "M":
                                strArray58 = this.getAll2G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num64 = 0;
                                goto Label_17FE;

                            case "N":
                                strArray63 = this.getAll1G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                                num69 = 0;
                                goto Label_1957;

                            default:
                                goto Label_1AB5;
                        }
                    Label_0B01:
                        list.Add(strArray11[num17].ToString());
                        num17++;
                    Label_0B19:
                        if (num17 < strArray11.Length)
                        {
                            goto Label_0B01;
                        }
                        goto Label_1AF9;
                    Label_0B4A:
                        list.Add(strArray12[num18].ToString());
                        num18++;
                    Label_0B62:
                        if (num18 < strArray12.Length)
                        {
                            goto Label_0B4A;
                        }
                        goto Label_1AF9;
                    Label_0B93:
                        list.Add(strArray13[num19].ToString());
                        num19++;
                    Label_0BAB:
                        if (num19 < strArray13.Length)
                        {
                            goto Label_0B93;
                        }
                        goto Label_1AF9;
                    Label_0BDC:
                        list.Add(strArray14[num20].ToString());
                        num20++;
                    Label_0BF4:
                        if (num20 < strArray14.Length)
                        {
                            goto Label_0BDC;
                        }
                        goto Label_1AF9;
                    Label_0C25:
                        list.Add(strArray15[num21].ToString());
                        num21++;
                    Label_0C3D:
                        if (num21 < strArray15.Length)
                        {
                            goto Label_0C25;
                        }
                        string[] strArray16 = this.getAll2G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num22 = 0; num22 < strArray16.Length; num22++)
                        {
                            list.Add(strArray16[num22].ToString());
                        }
                        goto Label_1AF9;
                    Label_0CB2:
                        list.Add(strArray17[num23].ToString());
                        num23++;
                    Label_0CCA:
                        if (num23 < strArray17.Length)
                        {
                            goto Label_0CB2;
                        }
                        goto Label_1AF9;
                    Label_0CFB:
                        list.Add(strArray18[num24].ToString());
                        num24++;
                    Label_0D13:
                        if (num24 < strArray18.Length)
                        {
                            goto Label_0CFB;
                        }
                        string[] strArray19 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num25 = 0; num25 < strArray19.Length; num25++)
                        {
                            list.Add(strArray19[num25].ToString());
                        }
                        goto Label_1AF9;
                    Label_0D88:
                        list.Add(strArray20[num26].ToString());
                        num26++;
                    Label_0DA0:
                        if (num26 < strArray20.Length)
                        {
                            goto Label_0D88;
                        }
                        string[] strArray21 = this.getAll2G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num27 = 0; num27 < strArray21.Length; num27++)
                        {
                            list.Add(strArray21[num27].ToString());
                        }
                        string[] strArray22 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num28 = 0; num28 < strArray22.Length; num28++)
                        {
                            list.Add(strArray22[num28].ToString());
                        }
                        goto Label_1AF9;
                    Label_0E59:
                        list.Add(strArray23[num29].ToString());
                        num29++;
                    Label_0E71:
                        if (num29 < strArray23.Length)
                        {
                            goto Label_0E59;
                        }
                        goto Label_1AF9;
                    Label_0EA2:
                        list.Add(strArray24[num30].ToString());
                        num30++;
                    Label_0EBA:
                        if (num30 < strArray24.Length)
                        {
                            goto Label_0EA2;
                        }
                        string[] strArray25 = this.getAll4G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num31 = 0; num31 < strArray25.Length; num31++)
                        {
                            list.Add(strArray25[num31].ToString());
                        }
                        goto Label_1AF9;
                    Label_0F2F:
                        list.Add(strArray26[num32].ToString());
                        num32++;
                    Label_0F47:
                        if (num32 < strArray26.Length)
                        {
                            goto Label_0F2F;
                        }
                        string[] strArray27 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num33 = 0; num33 < strArray27.Length; num33++)
                        {
                            list.Add(strArray27[num33].ToString());
                        }
                        string[] strArray28 = this.getAll4G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num34 = 0; num34 < strArray28.Length; num34++)
                        {
                            list.Add(strArray28[num34].ToString());
                        }
                        goto Label_1AF9;
                    Label_1000:
                        list.Add(strArray29[num35].ToString());
                        num35++;
                    Label_1018:
                        if (num35 < strArray29.Length)
                        {
                            goto Label_1000;
                        }
                        string[] strArray30 = this.getAll2G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num36 = 0; num36 < strArray30.Length; num36++)
                        {
                            list.Add(strArray30[num36].ToString());
                        }
                        string[] strArray31 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num37 = 0; num37 < strArray31.Length; num37++)
                        {
                            list.Add(strArray31[num37].ToString());
                        }
                        string[] strArray32 = this.getAll4G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num38 = 0; num38 < strArray32.Length; num38++)
                        {
                            list.Add(strArray32[num38].ToString());
                        }
                        goto Label_1AF9;
                    Label_1115:
                        list.Add(strArray33[num39].ToString());
                        num39++;
                    Label_112D:
                        if (num39 < strArray33.Length)
                        {
                            goto Label_1115;
                        }
                        goto Label_1AF9;
                    Label_115E:
                        list.Add(strArray34[num40].ToString());
                        num40++;
                    Label_1176:
                        if (num40 < strArray34.Length)
                        {
                            goto Label_115E;
                        }
                        string[] strArray35 = this.getAll5G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num41 = 0; num41 < strArray35.Length; num41++)
                        {
                            list.Add(strArray35[num41].ToString());
                        }
                        goto Label_1AF9;
                    Label_11EB:
                        list.Add(strArray36[num42].ToString());
                        num42++;
                    Label_1203:
                        if (num42 < strArray36.Length)
                        {
                            goto Label_11EB;
                        }
                        string[] strArray37 = this.getAll4G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num43 = 0; num43 < strArray37.Length; num43++)
                        {
                            list.Add(strArray37[num43].ToString());
                        }
                        string[] strArray38 = this.getAll5G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num44 = 0; num44 < strArray38.Length; num44++)
                        {
                            list.Add(strArray38[num44].ToString());
                        }
                        goto Label_1AF9;
                    Label_12BC:
                        list.Add(strArray39[num45].ToString());
                        num45++;
                    Label_12D4:
                        if (num45 < strArray39.Length)
                        {
                            goto Label_12BC;
                        }
                        string[] strArray40 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num46 = 0; num46 < strArray40.Length; num46++)
                        {
                            list.Add(strArray40[num46].ToString());
                        }
                        string[] strArray41 = this.getAll4G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num47 = 0; num47 < strArray41.Length; num47++)
                        {
                            list.Add(strArray41[num47].ToString());
                        }
                        string[] strArray42 = this.getAll5G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num48 = 0; num48 < strArray42.Length; num48++)
                        {
                            list.Add(strArray42[num48].ToString());
                        }
                        goto Label_1AF9;
                    Label_13D1:
                        list.Add(strArray43[num49].ToString());
                        num49++;
                    Label_13E9:
                        if (num49 < strArray43.Length)
                        {
                            goto Label_13D1;
                        }
                        string[] strArray44 = this.getAll2G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num50 = 0; num50 < strArray44.Length; num50++)
                        {
                            list.Add(strArray44[num50].ToString());
                        }
                        string[] strArray45 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num51 = 0; num51 < strArray45.Length; num51++)
                        {
                            list.Add(strArray45[num51].ToString());
                        }
                        string[] strArray46 = this.getAll4G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num52 = 0; num52 < strArray46.Length; num52++)
                        {
                            list.Add(strArray46[num52].ToString());
                        }
                        string[] strArray47 = this.getAll5G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num53 = 0; num53 < strArray47.Length; num53++)
                        {
                            list.Add(strArray47[num53].ToString());
                        }
                        goto Label_1AF9;
                    Label_152A:
                        list.Add(strArray48[num54].ToString());
                        num54++;
                    Label_1542:
                        if (num54 < strArray48.Length)
                        {
                            goto Label_152A;
                        }
                        goto Label_1AF9;
                    Label_1573:
                        list.Add(strArray49[num55].ToString());
                        num55++;
                    Label_158B:
                        if (num55 < strArray49.Length)
                        {
                            goto Label_1573;
                        }
                        string[] strArray50 = this.getAll6G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num56 = 0; num56 < strArray50.Length; num56++)
                        {
                            list.Add(strArray50[num56].ToString());
                        }
                        goto Label_1AF9;
                    Label_1600:
                        list.Add(strArray51[num57].ToString());
                        num57++;
                    Label_1618:
                        if (num57 < strArray51.Length)
                        {
                            goto Label_1600;
                        }
                        string[] strArray52 = this.getAll5G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num58 = 0; num58 < strArray52.Length; num58++)
                        {
                            list.Add(strArray52[num58].ToString());
                        }
                        string[] strArray53 = this.getAll6G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num59 = 0; num59 < strArray53.Length; num59++)
                        {
                            list.Add(strArray53[num59].ToString());
                        }
                        goto Label_1AF9;
                    Label_16D1:
                        list.Add(strArray54[num60].ToString());
                        num60++;
                    Label_16E9:
                        if (num60 < strArray54.Length)
                        {
                            goto Label_16D1;
                        }
                        string[] strArray55 = this.getAll4G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num61 = 0; num61 < strArray55.Length; num61++)
                        {
                            list.Add(strArray55[num61].ToString());
                        }
                        string[] strArray56 = this.getAll5G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num62 = 0; num62 < strArray56.Length; num62++)
                        {
                            list.Add(strArray56[num62].ToString());
                        }
                        string[] strArray57 = this.getAll6G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num63 = 0; num63 < strArray57.Length; num63++)
                        {
                            list.Add(strArray57[num63].ToString());
                        }
                        goto Label_1AF9;
                    Label_17E6:
                        list.Add(strArray58[num64].ToString());
                        num64++;
                    Label_17FE:
                        if (num64 < strArray58.Length)
                        {
                            goto Label_17E6;
                        }
                        string[] strArray59 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num65 = 0; num65 < strArray59.Length; num65++)
                        {
                            list.Add(strArray59[num65].ToString());
                        }
                        string[] strArray60 = this.getAll4G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num66 = 0; num66 < strArray60.Length; num66++)
                        {
                            list.Add(strArray60[num66].ToString());
                        }
                        string[] strArray61 = this.getAll5G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num67 = 0; num67 < strArray61.Length; num67++)
                        {
                            list.Add(strArray61[num67].ToString());
                        }
                        string[] strArray62 = this.getAll6G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num68 = 0; num68 < strArray62.Length; num68++)
                        {
                            list.Add(strArray62[num68].ToString());
                        }
                        goto Label_1AF9;
                    Label_193F:
                        list.Add(strArray63[num69].ToString());
                        num69++;
                    Label_1957:
                        if (num69 < strArray63.Length)
                        {
                            goto Label_193F;
                        }
                        string[] strArray64 = this.getAll2G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num70 = 0; num70 < strArray64.Length; num70++)
                        {
                            list.Add(strArray64[num70].ToString());
                        }
                        string[] strArray65 = this.getAll3G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num71 = 0; num71 < strArray65.Length; num71++)
                        {
                            list.Add(strArray65[num71].ToString());
                        }
                        string[] strArray66 = this.getAll4G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num72 = 0; num72 < strArray66.Length; num72++)
                        {
                            list.Add(strArray66[num72].ToString());
                        }
                        string[] strArray67 = this.getAll5G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num73 = 0; num73 < strArray67.Length; num73++)
                        {
                            list.Add(strArray67[num73].ToString());
                        }
                        string[] strArray68 = this.getAll6G(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num74 = 0; num74 < strArray68.Length; num74++)
                        {
                            list.Add(strArray68[num74].ToString());
                        }
                        goto Label_1AF9;
                    Label_1AB5:
                        strArray69 = this.getAllMC1(length, locate, strArray6, strArray7, int.Parse(strArray10[num16].ToString()));
                        for (int num75 = 0; num75 < strArray69.Length; num75++)
                        {
                            list.Add(strArray69[num75].ToString());
                        }
                    Label_1AF9:;
                    }
                }
                string[] strArray70 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray70[m] = list[m].ToString();
                }
                return strArray70;
            }
        }

        public class ZJ15X5 : Lottery.LotteryBase
        {
            public const string Code = "ZJ15X5";
            public const int ID = 0x15;
            public const double MaxMoney = 48202.0;
            public const string Name = "浙江15选5";
            public const int PlayType_D = 0x835;
            public const int PlayType_F = 0x836;
            public const string sID = "21";

            public ZJ15X5()
            {
                base.id = 0x15;
                base.name = "浙江15选5";
                base.code = "ZJ15X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x835)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,14}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x835) ? 1 : 2))) && (strArray2.Length <= 24101.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x835);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x10);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x835) && (play_type <= 0x836));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num8 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num8++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num8)
                                    {
                                        case 5:
                                            if (this.isThreeContinuum(WinNumber))
                                            {
                                                num++;
                                                num4 += WinMoneyList[0];
                                                WinMoneyNoWithTax += WinMoneyList[1];
                                            }
                                            else
                                            {
                                                num2++;
                                                num4 += WinMoneyList[2];
                                                WinMoneyNoWithTax += WinMoneyList[3];
                                            }
                                            break;

                                        case 4:
                                            num3++;
                                            num4 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "特等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "一等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 15)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x835, "单式"), new Lottery.PlayType(0x836, "复式") };
            }

            public override string GetPrintKeyList(string Number, int PlayTypeID, string LotteryMachine)
            {
                string str;
                Number = Number.Trim();
                if (Number == "")
                {
                    return "";
                }
                string[] numbers = Number.Split(new char[] { '\n' });
                if ((numbers == null) || (numbers.Length < 1))
                {
                    return "";
                }
                if ((((str = LotteryMachine) == null) || !(str == "FCR8000")) || ((PlayTypeID != 0x835) && (PlayTypeID != 0x836)))
                {
                    return "";
                }
                return this.GetPrintKeyList_FCR8000(numbers);
            }

            private string GetPrintKeyList_FCR8000(string[] Numbers)
            {
                string str = "";
                foreach (string str2 in Numbers)
                {
                    foreach (char ch in str2.Replace(" ", "").Replace("\r", "").Replace("\n", ""))
                    {
                        str = str + "[" + ch.ToString() + "]";
                    }
                }
                return str;
            }

            private bool isThreeContinuum(string Number)
            {
                string[] strArray = this.FilterRepeated(Number.Split(new char[] { ' ' }));
                if (strArray.Length >= 5)
                {
                    int[] numArray = new int[5];
                    for (int i = 0; i < 5; i++)
                    {
                        numArray[i] = int.Parse(strArray[i]);
                    }
                    for (int j = 0; j < 2; j++)
                    {
                        if ((((numArray[j] + 1) == numArray[j + 1]) && ((numArray[j] + 2) == numArray[j + 2])) && ((numArray[j] + 3) == numArray[j + 3]))
                        {
                            return true;
                        }
                    }
                }
                return false;
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class ZJFC4J1 : Lottery.LotteryBase
        {
            public const string Code = "ZJFC4J1";
            public const int ID = 0x16;
            public const double MaxMoney = 20000.0;
            public const string Name = "浙江风采4+1";
            public const int PlayType_D = 0x899;
            public const int PlayType_F = 0x89a;
            public const string sID = "22";

            public ZJFC4J1()
            {
                base.id = 0x16;
                base.name = "浙江风采4+1";
                base.code = "ZJFC4J1";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x899)
                {
                    str2 = @"(\d){5}";
                }
                else
                {
                    str2 = @"((\d)|([(]\d{1,10}[)])){5}";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x899) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"([\d]){5}", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x899);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 5; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x899) && (play_type <= 0x89a));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 5)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 8))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                double num5 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 5)
                            {
                                if (strArray2[j] == WinNumber)
                                {
                                    num++;
                                    num5 += WinMoneyList[0];
                                    WinMoneyNoWithTax += WinMoneyList[1];
                                }
                                else if (strArray2[j].Substring(0, 4) == WinNumber.Substring(0, 4))
                                {
                                    num2++;
                                    num5 += WinMoneyList[2];
                                    WinMoneyNoWithTax += WinMoneyList[3];
                                }
                                else
                                {
                                    bool flag = strArray2[j][4] == WinNumber[4];
                                    bool flag2 = false;
                                    for (int k = 0; k <= 1; k++)
                                    {
                                        if (strArray2[j].Substring(k, 3) == WinNumber.Substring(k, 3))
                                        {
                                            if (flag)
                                            {
                                                num2++;
                                                num5 += WinMoneyList[2];
                                                WinMoneyNoWithTax += WinMoneyList[3];
                                            }
                                            else
                                            {
                                                num3++;
                                                num5 += WinMoneyList[4];
                                                WinMoneyNoWithTax += WinMoneyList[5];
                                            }
                                            flag2 = true;
                                            break;
                                        }
                                    }
                                    if (!flag2)
                                    {
                                        for (int m = 0; m <= 2; m++)
                                        {
                                            if (strArray2[j].Substring(m, 2) == WinNumber.Substring(m, 2))
                                            {
                                                if (flag)
                                                {
                                                    num3++;
                                                    num5 += WinMoneyList[4];
                                                    WinMoneyNoWithTax += WinMoneyList[5];
                                                }
                                                else
                                                {
                                                    num4++;
                                                    num5 += WinMoneyList[6];
                                                    WinMoneyNoWithTax += WinMoneyList[7];
                                                }
                                                flag2 = true;
                                                break;
                                            }
                                        }
                                        if (!flag2 && flag)
                                        {
                                            for (int n = 0; n <= 3; n++)
                                            {
                                                if (strArray2[j].Substring(n, 1) == WinNumber.Substring(n, 1))
                                                {
                                                    num4++;
                                                    num5 += WinMoneyList[6];
                                                    WinMoneyNoWithTax += WinMoneyList[7];
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num4.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num5;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x899, "单式"), new Lottery.PlayType(0x89a, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = new string[5];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 5; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    list.Add(str5);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class ZJKLPK : Lottery.LotteryBase
        {
            public const string Code = "ZJKLPK";
            public const int ID = 0x37;
            public const double MaxMoney = 200000.0;
            public const string Name = "浙江快乐扑克";
            public const int PlayType_Mixed = 0x157c;
            public const int PlayType_RX1_D = 0x157d;
            public const int PlayType_RX1_F = 0x157e;
            public const int PlayType_RX2_D = 0x157f;
            public const int PlayType_RX2_F = 0x1580;
            public const int PlayType_RX3_D = 0x1581;
            public const int PlayType_RX3_F = 0x1582;
            public const int PlayType_X4_ZhiD = 0x1587;
            public const int PlayType_X4_ZhiF = 0x1588;
            public const int PlayType_X4_Zu12 = 0x1584;
            public const int PlayType_X4_Zu24 = 0x1583;
            public const int PlayType_X4_Zu4 = 0x1586;
            public const int PlayType_X4_Zu6 = 0x1585;
            public const string sID = "55";

            public ZJKLPK()
            {
                base.id = 0x37;
                base.name = "浙江快乐扑克";
                base.code = "ZJKLPK";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if (PlayType == 0x157c)
                {
                    return this.AnalyseScheme_Mixed(Content, PlayType);
                }
                if ((PlayType == 0x157d) || (PlayType == 0x157e))
                {
                    return this.AnalyseScheme_RX1(Content, PlayType);
                }
                if ((PlayType == 0x157f) || (PlayType == 0x1580))
                {
                    return this.AnalyseScheme_RX2(Content, PlayType);
                }
                if ((PlayType == 0x1581) || (PlayType == 0x1582))
                {
                    return this.AnalyseScheme_RX3(Content, PlayType);
                }
                if (PlayType == 0x1583)
                {
                    return this.AnalyseScheme_X4_Zu24(Content, PlayType);
                }
                if (PlayType == 0x1584)
                {
                    return this.AnalyseScheme_X4_Zu12(Content, PlayType);
                }
                if (PlayType == 0x1585)
                {
                    return this.AnalyseScheme_X4_Zu6(Content, PlayType);
                }
                if (PlayType == 0x1586)
                {
                    return this.AnalyseScheme_X4_Zu4(Content, PlayType);
                }
                if ((PlayType != 0x1587) && (PlayType != 0x1588))
                {
                    return "";
                }
                return this.AnalyseScheme_X4_Zhi(Content, PlayType);
            }

            private string AnalyseScheme_Mixed(string Content, int PlayType)
            {
                string[] strArray = base.SplitLotteryNumber(Content);
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length < 1)
                {
                    return "";
                }
                string str = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string lotteryNumberPreFix = base.GetLotteryNumberPreFix(strArray[i]);
                    string str3 = "";
                    if (strArray[i].StartsWith("[任选一单式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x157d);
                    }
                    if (strArray[i].StartsWith("[任选一复式]"))
                    {
                        str3 = this.AnalyseScheme_RX1(base.FilterPreFix(strArray[i]), 0x157e);
                    }
                    if (strArray[i].StartsWith("[任选二单式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x157f);
                    }
                    if (strArray[i].StartsWith("[任选二复式]"))
                    {
                        str3 = this.AnalyseScheme_RX2(base.FilterPreFix(strArray[i]), 0x1580);
                    }
                    if (strArray[i].StartsWith("[任选三单式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x1581);
                    }
                    if (strArray[i].StartsWith("[任选三复式]"))
                    {
                        str3 = this.AnalyseScheme_RX3(base.FilterPreFix(strArray[i]), 0x1582);
                    }
                    if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu24(base.FilterPreFix(strArray[i]), 0x1583);
                    }
                    if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu12(base.FilterPreFix(strArray[i]), 0x1584);
                    }
                    if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu6(base.FilterPreFix(strArray[i]), 0x1585);
                    }
                    if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        str3 = this.AnalyseScheme_X4_Zu4(base.FilterPreFix(strArray[i]), 0x1586);
                    }
                    if (str3 != "")
                    {
                        str = str + lotteryNumberPreFix + str3 + "\n";
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX1(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x157d)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x157e))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x157d))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX2(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x157f)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x1580))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x157f))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_RX3(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1581)
                {
                    str2 = "((([2-9])|(10)|([AJQK_]))[,]){3}(([2-9])|(10)|([AJQK_]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (regex.Match(strArray[i].ToString()).Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            if ((strArray2.Length > 1) && (PlayType == 0x1582))
                            {
                                string str4 = str;
                                string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                                str = string.Concat(strArray3);
                            }
                            if ((strArray2.Length == 1) && (PlayType == 0x1581))
                            {
                                str = str + canonicalNumber + "|1\n";
                            }
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1587)
                {
                    str2 = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                }
                else
                {
                    str2 = "(((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))[,]){3}((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i].ToString());
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zhi(match.Value, ref canonicalNumber);
                        if ((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1587) ? 1 : 2)))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu12(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu12(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu24(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3,12}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu24(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu4(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_X4_Zu6(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = "((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_X4_Zu6(match.Value, ref canonicalNumber);
                        if (strArray2 != null)
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex("((([2-9])|(10)|([AJQK]))[,]){3}(([2-9])|(10)|([AJQK]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                return regex.IsMatch(Number);
            }

            public override string BuildNumber(int Num, int Type)
            {
                return "";
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x157c) && (play_type <= 0x1588));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                Description = "";
                WinMoneyNoWithTax = 0.0;
                if ((WinMoneyList == null) || (WinMoneyList.Length < 20))
                {
                    return -3.0;
                }
                if (!this.AnalyseWinNumber(WinNumber))
                {
                    return -5.0;
                }
                int winCount = 0;
                int num2 = 0;
                int num3 = 0;
                if (PlayType == 0x157c)
                {
                    return this.ComputeWin_Mixed(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], WinMoneyList[12], WinMoneyList[13], WinMoneyList[14], WinMoneyList[15], WinMoneyList[0x10], WinMoneyList[0x11], WinMoneyList[0x12], WinMoneyList[0x13]);
                }
                if ((PlayType == 0x157d) || (PlayType == 0x157e))
                {
                    return this.ComputeWin_RX1(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], ref winCount);
                }
                if ((PlayType == 0x157f) || (PlayType == 0x1580))
                {
                    return this.ComputeWin_RX2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[2], WinMoneyList[3], ref winCount);
                }
                if ((PlayType == 0x1581) || (PlayType == 0x1582))
                {
                    return this.ComputeWin_RX3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[4], WinMoneyList[5], WinMoneyList[6], WinMoneyList[7], ref num2, ref num3);
                }
                if ((PlayType == 0x1587) || (PlayType == 0x1588))
                {
                    return this.ComputeWin_X4_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9], WinMoneyList[10], WinMoneyList[11], ref num2, ref num3);
                }
                if (PlayType == 0x1583)
                {
                    return this.ComputeWin_X4_Zu24(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[12], WinMoneyList[13], ref winCount);
                }
                if (PlayType == 0x1584)
                {
                    return this.ComputeWin_X4_Zu12(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[14], WinMoneyList[15], ref winCount);
                }
                if (PlayType == 0x1585)
                {
                    return this.ComputeWin_X4_Zu6(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x10], WinMoneyList[0x11], ref winCount);
                }
                if (PlayType == 0x1586)
                {
                    return this.ComputeWin_X4_Zu4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0x12], WinMoneyList[0x13], ref winCount);
                }
                return -4.0;
            }

            private double ComputeWin_Mixed(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3, double WinMoney4, double WinMoneyNoWithTax4, double WinMoney5, double WinMoneyNoWithTax5, double WinMoney6, double WinMoneyNoWithTax6, double WinMoney7, double WinMoneyNoWithTax7, double WinMoney8, double WinMoneyNoWithTax8, double WinMoney9, double WinMoneyNoWithTax9, double WinMoney10, double WinMoneyNoWithTax10)
            {
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    int winCount = 0;
                    int num14 = 0;
                    int num15 = 0;
                    double winMoneyNoWithTax = 0.0;
                    if (strArray[i].StartsWith("[任选一单式]") || strArray[i].StartsWith("[任选一复式]"))
                    {
                        num += this.ComputeWin_RX1(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney1, WinMoneyNoWithTax1, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num2 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选二单式]") || strArray[i].StartsWith("[任选二复式]"))
                    {
                        num += this.ComputeWin_RX2(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney2, WinMoneyNoWithTax2, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num3 += winCount;
                    }
                    else if (strArray[i].StartsWith("[任选三单式]") || strArray[i].StartsWith("[任选三复式]"))
                    {
                        num += this.ComputeWin_RX3(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney3, WinMoneyNoWithTax3, WinMoney4, WinMoneyNoWithTax4, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num4 += num14;
                        num5 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四直选单式]") || strArray[i].StartsWith("[选四直选复式]"))
                    {
                        num += this.ComputeWin_X4_Zhi(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney5, WinMoneyNoWithTax5, WinMoney6, WinMoneyNoWithTax6, ref num14, ref num15);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num6 += num14;
                        num7 += num15;
                    }
                    else if (strArray[i].StartsWith("[选四组选24]"))
                    {
                        num += this.ComputeWin_X4_Zu24(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney7, WinMoneyNoWithTax7, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num8 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选12]"))
                    {
                        num += this.ComputeWin_X4_Zu12(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney8, WinMoneyNoWithTax8, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num9 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选6]"))
                    {
                        num += this.ComputeWin_X4_Zu6(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney9, WinMoneyNoWithTax9, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num10 += winCount;
                    }
                    else if (strArray[i].StartsWith("[选四组选4]"))
                    {
                        num += this.ComputeWin_X4_Zu4(base.FilterPreFix(strArray[i]), WinNumber, ref Description, ref winMoneyNoWithTax, WinMoney10, WinMoneyNoWithTax10, ref winCount);
                        WinMoneyNoWithTax += winMoneyNoWithTax;
                        num11 += winCount;
                    }
                }
                Description = "";
                if (num2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选一" + num2.ToString() + "注");
                }
                if (num3 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选二" + num3.ToString() + "注");
                }
                if (num4 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + num4.ToString() + "注");
                }
                if (num5 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + num5.ToString() + "注");
                }
                if (num6 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中4 " + num6.ToString() + "注");
                }
                if (num7 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四中3 " + num7.ToString() + "注");
                }
                if (num8 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选24 " + num8.ToString() + "注");
                }
                if (num9 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选12 " + num9.ToString() + "注");
                }
                if (num10 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选6 " + num10.ToString() + "注");
                }
                if (num11 > 0)
                {
                    base.MergeWinDescription(ref Description, "选四组选4 " + num11.ToString() + "注");
                }
                return num;
            }

            private double ComputeWin_RX1(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX1(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        WinCount++;
                                        num += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                    }
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选一" + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_RX2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                int num = 0;
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                if (num == 2)
                                {
                                    WinCount++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "任选二" + ((int) WinCount).ToString() + "注。";
                }
                return num2;
            }

            private double ComputeWin_RX3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_RX3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 3:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 2:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中3 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选三中2 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, ref int WinCount_1, ref int WinCount_2)
            {
                int num = 0;
                WinCount_1 = 0;
                WinCount_2 = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Split(new char[] { ',' }).Length >= 4)
                            {
                                num = 0;
                                for (int k = 0; k < 4; k++)
                                {
                                    if (strArray2[j].Split(new char[] { ',' })[k] == WinNumber.Split(new char[] { ',' })[k])
                                    {
                                        num++;
                                    }
                                }
                                switch (num)
                                {
                                    case 4:
                                        WinCount_1++;
                                        num2 += WinMoney1;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                        break;

                                    case 3:
                                        WinCount_2++;
                                        num2 += WinMoney2;
                                        WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                        goto Label_014B;
                                }
                            Label_014B:;
                            }
                        }
                    }
                }
                if (WinCount_1 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中4 " + ((int) WinCount_1).ToString() + "注");
                }
                if (WinCount_2 > 0)
                {
                    base.MergeWinDescription(ref Description, "任选四中3 " + ((int) WinCount_2).ToString() + "注");
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_X4_Zu12(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu12(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选12 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu24(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu24(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选24 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选4 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private double ComputeWin_X4_Zu6(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, ref int WinCount)
            {
                WinCount = 0;
                WinNumber = WinNumber.Trim();
                if (WinNumber.Split(new char[] { ',' }).Length != 4)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                double num = 0.0;
                WinMoneyNoWithTax = 0.0;
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_X4_Zu6(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if ((strArray2[j].Split(new char[] { ',' }).Length >= 4) && (this.SortKLPK(strArray2[j]) == this.SortKLPK(WinNumber)))
                            {
                                WinCount++;
                                num += WinMoney1;
                                WinMoneyNoWithTax += WinMoneyNoWithTax1;
                            }
                        }
                    }
                }
                if (WinCount > 0)
                {
                    Description = "选四组选6 " + ((int) WinCount).ToString() + "注。";
                }
                return num;
            }

            private string FilterRepeated(string NumberPart)
            {
                string number = "";
                string[] strArray = NumberPart.Split(new char[] { ',' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (("23456789AJQK10".IndexOf(strArray[i]) >= 0) && (number.IndexOf(strArray[i]) == -1))
                    {
                        number = number + strArray[i] + ",";
                    }
                }
                number = number.Substring(0, number.Length - 1);
                return this.SortKLPK(number);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x157c, "混合投注"), new Lottery.PlayType(0x157d, "任选一单式"), new Lottery.PlayType(0x157e, "任选一复式"), new Lottery.PlayType(0x157f, "任选二单式"), new Lottery.PlayType(0x1580, "任选二复式"), new Lottery.PlayType(0x1581, "任选三单式"), new Lottery.PlayType(0x1582, "任选三复式"), new Lottery.PlayType(0x1583, "选四组选24"), new Lottery.PlayType(0x1584, "选四组选12"), new Lottery.PlayType(0x1585, "选四组选6"), new Lottery.PlayType(0x1586, "选四组选4"), new Lottery.PlayType(0x1587, "选四直选单式"), new Lottery.PlayType(0x1588, "选四组选复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            private string SortKLPK(string Number)
            {
                string[] strArray = new string[13];
                string str = "";
                string[] strArray2 = Number.Split(new char[] { ',' });
                for (int i = 0; i < strArray2.Length; i++)
                {
                    if ("23456789AJQK10".IndexOf(strArray2[i]) >= 0)
                    {
                        if (strArray2[i] == "A")
                        {
                            strArray[0] = "A";
                        }
                        else if (strArray2[i] == "2")
                        {
                            strArray[1] = "2";
                        }
                        else if (strArray2[i] == "3")
                        {
                            strArray[2] = "3";
                        }
                        else if (strArray2[i] == "4")
                        {
                            strArray[3] = "4";
                        }
                        else if (strArray2[i] == "5")
                        {
                            strArray[4] = "5";
                        }
                        else if (strArray2[i] == "6")
                        {
                            strArray[5] = "6";
                        }
                        else if (strArray2[i] == "7")
                        {
                            strArray[6] = "7";
                        }
                        else if (strArray2[i] == "8")
                        {
                            strArray[7] = "8";
                        }
                        else if (strArray2[i] == "9")
                        {
                            strArray[8] = "9";
                        }
                        else if (strArray2[i] == "10")
                        {
                            strArray[9] = "10";
                        }
                        else if (strArray2[i] == "J")
                        {
                            strArray[10] = "J";
                        }
                        else if (strArray2[i] == "Q")
                        {
                            strArray[11] = "Q";
                        }
                        else if (strArray2[i] == "K")
                        {
                            strArray[12] = "K";
                        }
                    }
                }
                for (int j = 0; j < 13; j++)
                {
                    if (strArray[j] != null)
                    {
                        str = str + strArray[j] + ",";
                    }
                }
                return str.Substring(0, str.Length - 1);
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if (PlayType == 0x157c)
                {
                    return this.ToSingle_Mixed(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x157d) || (PlayType == 0x157e))
                {
                    return this.ToSingle_RX1(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x157f) || (PlayType == 0x1580))
                {
                    return this.ToSingle_RX2(Number, ref CanonicalNumber);
                }
                if ((PlayType == 0x1581) || (PlayType == 0x1582))
                {
                    return this.ToSingle_RX3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1583)
                {
                    return this.ToSingle_X4_Zu24(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1584)
                {
                    return this.ToSingle_X4_Zu12(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1585)
                {
                    return this.ToSingle_X4_Zu6(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1586)
                {
                    return this.ToSingle_X4_Zu4(Number, ref CanonicalNumber);
                }
                if ((PlayType != 0x1587) && (PlayType != 0x1588))
                {
                    return null;
                }
                return this.ToSingle_X4_Zhi(Number, ref CanonicalNumber);
            }

            private string[] ToSingle_Mixed(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                string lotteryNumberPreFix = base.GetLotteryNumberPreFix(Number);
                if (Number.StartsWith("[任选1单式]") || Number.StartsWith("[任选1复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX1(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选2单式]") || Number.StartsWith("[任选2复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX2(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[任选3单式]") || Number.StartsWith("[任选3复式]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_RX3(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选24]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu24(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选12]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu12(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选6]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu6(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (Number.StartsWith("[选4组选4]"))
                {
                    return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zu4(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
                }
                if (!Number.StartsWith("[选4直选单式]") && !Number.StartsWith("[选4直选复式]"))
                {
                    return null;
                }
                return base.MergeLotteryNumberPreFix(this.ToSingle_X4_Zhi(base.FilterPreFix(Number), ref CanonicalNumber), lotteryNumberPreFix);
            }

            private string[] ToSingle_RX1(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                int num = 0;
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                    if (strArray[i] != "_")
                    {
                        Regex regex2 = new Regex("((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        if (regex2.IsMatch(strArray[i]))
                        {
                            num++;
                        }
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    if (str != "_")
                    {
                        str = str + ",_,_,_";
                        list.Add(str);
                    }
                }
                for (int m = 0; m < strArray[1].Length; m++)
                {
                    string str2 = strArray[1][m].ToString();
                    if (str2 != "_")
                    {
                        str2 = "_," + str2 + ",_,_";
                        list.Add(str2);
                    }
                }
                for (int n = 0; n < strArray[2].Length; n++)
                {
                    string str3 = strArray[2][n].ToString();
                    if (str3 != "_")
                    {
                        str3 = "_,_," + str3 + ",_";
                        list.Add(str3);
                    }
                }
                for (int num7 = 0; num7 < strArray[3].Length; num7++)
                {
                    string str4 = strArray[3][num7].ToString();
                    if (str4 != "_")
                    {
                        str4 = "_,_,_," + str4;
                        list.Add(str4);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int num8 = 0; num8 < list.Count; num8++)
                {
                    strArray2[num8] = list[num8].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        string[] strArray3;
                        IntPtr ptr;
                        (strArray3 = strArray)[(int) (ptr = (IntPtr) j)] = strArray3[(int) ptr] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 5)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_RX3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK_]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                    if (strArray[j] != "_")
                    {
                        strArray[j] = strArray[j] + "_";
                    }
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                if (str4.Replace("_", "").Length == 6)
                                {
                                    list.Add(str4);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = new string[4];
                CanonicalNumber = "";
                Match match = new Regex("(?<L0>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L1>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L2>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))[,](?<L3>((([2-9])|(10)|([AJQK]))|([(]((([2-9])|(10)|([AJQK]))[,]){1,12}(([2-9])|(10)|([AJQK]))[)])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if ((strArray[i].Length > 1) && (strArray[i] != "10"))
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + "),";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i] + ",";
                    }
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                for (int j = 0; j < 4; j++)
                {
                    strArray[j] = strArray[j].Replace(",", "").Replace("10", "$");
                }
                ArrayList list = new ArrayList();
                for (int k = 0; k < strArray[0].Length; k++)
                {
                    string str = strArray[0][k].ToString();
                    for (int n = 0; n < strArray[1].Length; n++)
                    {
                        string str2 = str + "," + strArray[1][n].ToString();
                        for (int num5 = 0; num5 < strArray[2].Length; num5++)
                        {
                            string str3 = str2 + "," + strArray[2][num5].ToString();
                            for (int num6 = 0; num6 < strArray[3].Length; num6++)
                            {
                                string str4 = str3 + "," + strArray[3][num6].ToString();
                                list.Add(str4);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int m = 0; m < list.Count; m++)
                {
                    strArray2[m] = list[m].ToString().Replace("$", "10");
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu12(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu24(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = this.FilterRepeated(Number.Trim());
                string[] strArray = CanonicalNumber.Split(new char[] { ',' });
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int i = 0; i < (length - 3); i++)
                {
                    for (int k = i + 1; k < (length - 2); k++)
                    {
                        for (int m = k + 1; m < (length - 1); m++)
                        {
                            for (int n = m + 1; n < length; n++)
                            {
                                list.Add(strArray[i].ToString() + "," + strArray[k].ToString() + "," + strArray[m].ToString() + "," + strArray[n].ToString());
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int j = 0; j < list.Count; j++)
                {
                    strArray2[j] = list[j].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_X4_Zu4(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2])) && ((Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3]))) && (((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3]))))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }

            private string[] ToSingle_X4_Zu6(string Number, ref string CanonicalNumber)
            {
                CanonicalNumber = "";
                if (this.FilterRepeated(Number).Split(new char[] { ',' }).Length != 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                if ((((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[1]) || (Number.Split(new char[] { ',' })[2] != Number.Split(new char[] { ',' })[3])) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[3]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[2]))) && ((Number.Split(new char[] { ',' })[0] != Number.Split(new char[] { ',' })[2]) || (Number.Split(new char[] { ',' })[1] != Number.Split(new char[] { ',' })[3])))
                {
                    CanonicalNumber = "";
                    return null;
                }
                Match match = new Regex("(?<L0>(([2-9])|(10)|([AJQK_])))[,](?<L1>(([2-9])|(10)|([AJQK_])))[,](?<L2>(([2-9])|(10)|([AJQK_])))[,](?<L3>(([2-9])|(10)|([AJQK_])))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 4; i++)
                {
                    string str = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (str == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    CanonicalNumber = CanonicalNumber + str + ",";
                }
                CanonicalNumber = CanonicalNumber.Substring(0, CanonicalNumber.Length - 1);
                return new string[] { CanonicalNumber };
            }
        }

        public class ZJTC20X5 : Lottery.LotteryBase
        {
            public const string Code = "ZJTC20X5";
            public const int ID = 40;
            public const double MaxMoney = 20000.0;
            public const string Name = "浙江体彩20选5";
            public const int PlayType_D = 0xfa1;
            public const int PlayType_F = 0xfa2;
            public const string sID = "40";

            public ZJTC20X5()
            {
                base.id = 40;
                base.name = "浙江体彩20选5";
                base.code = "ZJTC20X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0xfa1)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,19}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0xfa1) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0xfa1);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x15);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0xfa1) && (play_type <= 0xfa2));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 6))
                {
                    return -3.0;
                }
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num8 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num8++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num8)
                                    {
                                        case 5:
                                            num++;
                                            num4 += WinMoneyList[0];
                                            WinMoneyNoWithTax += WinMoneyList[1];
                                            break;

                                        case 4:
                                            num2++;
                                            num4 += WinMoneyList[2];
                                            WinMoneyNoWithTax += WinMoneyList[3];
                                            break;

                                        case 3:
                                            num3++;
                                            num4 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 20)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0xfa1, "单式"), new Lottery.PlayType(0xfa2, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class ZJTC6J1 : Lottery.LotteryBase
        {
            public const string Code = "ZJTC6J1";
            public const int ID = 0x29;
            public const double MaxMoney = 20000.0;
            public const string Name = "浙江体彩6+1";
            public const int PlayType_D = 0x1005;
            public const int PlayType_F = 0x1006;
            public const string sID = "41";

            public ZJTC6J1()
            {
                base.id = 0x29;
                base.name = "浙江体彩6+1";
                base.code = "ZJTC6J1";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1005)
                {
                    str2 = @"(\d){6}[-][\d]";
                }
                else
                {
                    str2 = @"((\d)|([(]\d{1,10}[)])){6}[-]((\d)|([(]\d{1,10}[)]))";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle(match.Value, ref canonicalNumber, PlayType);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1005) ? 1 : 2))) && (strArray2.Length <= 10000.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                Regex regex = new Regex(@"([\d]){6}[-][\d]", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                if (!regex.IsMatch(Number))
                {
                    return false;
                }
                string canonicalNumber = "";
                string[] strArray = this.ToSingle(Number, ref canonicalNumber, 0x1005);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < Num; i++)
                {
                    string str = "";
                    for (int j = 0; j < 6; j++)
                    {
                        str = str + random.Next(0, 10).ToString();
                    }
                    builder.Append((str + "-" + random.Next(0, 10).ToString()).Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1005) && (play_type <= 0x1006));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 8)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                if ((WinMoneyList == null) || (WinMoneyList.Length < 12))
                {
                    return -3.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                double num7 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle(strArray[i], ref canonicalNumber, PlayType);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 8)
                            {
                                if (strArray2[j] == WinNumber)
                                {
                                    num++;
                                    num7 += WinMoneyList[0];
                                    WinMoneyNoWithTax += WinMoneyList[1];
                                }
                                else if (strArray2[j].Substring(0, 6) == WinNumber.Substring(0, 6))
                                {
                                    num2++;
                                    num7 += WinMoneyList[2];
                                    WinMoneyNoWithTax += WinMoneyList[3];
                                }
                                else
                                {
                                    bool flag = false;
                                    int startIndex = 0;
                                    while (startIndex <= 1)
                                    {
                                        if (strArray2[j].Substring(startIndex, 5) == WinNumber.Substring(startIndex, 5))
                                        {
                                            num3++;
                                            num7 += WinMoneyList[4];
                                            WinMoneyNoWithTax += WinMoneyList[5];
                                            flag = true;
                                            break;
                                        }
                                        startIndex++;
                                    }
                                    if (!flag)
                                    {
                                        startIndex = 0;
                                        while (startIndex <= 2)
                                        {
                                            if (strArray2[j].Substring(startIndex, 4) == WinNumber.Substring(startIndex, 4))
                                            {
                                                num4++;
                                                num7 += WinMoneyList[6];
                                                WinMoneyNoWithTax += WinMoneyList[7];
                                                flag = true;
                                                break;
                                            }
                                            startIndex++;
                                        }
                                        if (!flag)
                                        {
                                            startIndex = 0;
                                            while (startIndex <= 3)
                                            {
                                                if (strArray2[j].Substring(startIndex, 3) == WinNumber.Substring(startIndex, 3))
                                                {
                                                    num5++;
                                                    num7 += WinMoneyList[8];
                                                    WinMoneyNoWithTax += WinMoneyList[9];
                                                    flag = true;
                                                    break;
                                                }
                                                startIndex++;
                                            }
                                            if (!flag)
                                            {
                                                for (startIndex = 0; startIndex <= 4; startIndex++)
                                                {
                                                    if (strArray2[j].Substring(startIndex, 2) == WinNumber.Substring(startIndex, 2))
                                                    {
                                                        num6++;
                                                        num7 += WinMoneyList[10];
                                                        WinMoneyNoWithTax += WinMoneyList[11];
                                                        flag = true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "特等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = "一等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num3.ToString() + "注";
                }
                if (num4 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num4.ToString() + "注";
                }
                if (num5 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "四等奖" + num5.ToString() + "注";
                }
                if (num6 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "五等奖" + num6.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num7;
            }

            private string FilterRepeated(string NumberPart)
            {
                string str = "";
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    if ((str.IndexOf(NumberPart.Substring(i, 1)) == -1) && ("0123456789".IndexOf(NumberPart.Substring(i, 1)) >= 0))
                    {
                        str = str + NumberPart.Substring(i, 1);
                    }
                }
                return base.Sort(str);
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1005, "单式"), new Lottery.PlayType(0x1006, "复式") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, " ");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                string[] strArray = new string[7];
                CanonicalNumber = "";
                Match match = new Regex(@"(?<L0>(\d)|([(][\d]+?[)]))(?<L1>(\d)|([(][\d]+?[)]))(?<L2>(\d)|([(][\d]+?[)]))(?<L3>(\d)|([(][\d]+?[)]))(?<L4>(\d)|([(][\d]+?[)]))(?<L5>(\d)|([(][\d]+?[)]))[-](?<L6>(\d)|([(][\d]+?[)]))", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(Number);
                for (int i = 0; i < 7; i++)
                {
                    strArray[i] = match.Groups["L" + i.ToString()].ToString().Trim();
                    if (strArray[i] == "")
                    {
                        CanonicalNumber = "";
                        return null;
                    }
                    if (strArray[i].Length > 1)
                    {
                        strArray[i] = strArray[i].Substring(1, strArray[i].Length - 2);
                        if (strArray[i].Length > 1)
                        {
                            strArray[i] = this.FilterRepeated(strArray[i]);
                        }
                        if (strArray[i] == "")
                        {
                            CanonicalNumber = "";
                            return null;
                        }
                    }
                    if (i == 6)
                    {
                        CanonicalNumber = CanonicalNumber + "-";
                    }
                    if (strArray[i].Length > 1)
                    {
                        CanonicalNumber = CanonicalNumber + "(" + strArray[i] + ")";
                    }
                    else
                    {
                        CanonicalNumber = CanonicalNumber + strArray[i];
                    }
                }
                ArrayList list = new ArrayList();
                for (int j = 0; j < strArray[0].Length; j++)
                {
                    string str = strArray[0][j].ToString();
                    for (int m = 0; m < strArray[1].Length; m++)
                    {
                        string str2 = str + strArray[1][m].ToString();
                        for (int n = 0; n < strArray[2].Length; n++)
                        {
                            string str3 = str2 + strArray[2][n].ToString();
                            for (int num5 = 0; num5 < strArray[3].Length; num5++)
                            {
                                string str4 = str3 + strArray[3][num5].ToString();
                                for (int num6 = 0; num6 < strArray[4].Length; num6++)
                                {
                                    string str5 = str4 + strArray[4][num6].ToString();
                                    for (int num7 = 0; num7 < strArray[5].Length; num7++)
                                    {
                                        string str6 = str5 + strArray[5][num7].ToString();
                                        for (int num8 = 0; num8 < strArray[6].Length; num8++)
                                        {
                                            string str7 = str6 + "-" + strArray[6][num8].ToString();
                                            list.Add(str7);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }

        public class ZYFC22X5 : Lottery.LotteryBase
        {
            public const string Code = "ZYFC22X5";
            public const int ID = 0x45;
            public const double MaxMoney = 52668.0;
            public const string Name = "河南福彩22选5";
            public const int PlayType_D = 0x1af5;
            public const int PlayType_F = 0x1af6;
            public const int PlayType_HY2 = 0x1af7;
            public const int PlayType_HY3 = 0x1af8;
            public const int PlayType_HY4 = 0x1af9;
            public const string sID = "69";

            public ZYFC22X5()
            {
                base.id = 0x45;
                base.name = "河南福彩22选5";
                base.code = "ZYFC22X5";
            }

            public override string AnalyseScheme(string Content, int PlayType)
            {
                if ((PlayType == 0x1af5) || (PlayType == 0x1af6))
                {
                    return this.AnalyseScheme_Zhi(Content, PlayType);
                }
                if (PlayType == 0x1af7)
                {
                    return this.AnalyseScheme_HY2(Content, PlayType);
                }
                if (PlayType == 0x1af8)
                {
                    return this.AnalyseScheme_HY3(Content, PlayType);
                }
                if (PlayType == 0x1af9)
                {
                    return this.AnalyseScheme_HY4(Content, PlayType);
                }
                return "";
            }

            private string AnalyseScheme_HY2(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(\d\d\s){1,25}\d\d";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HY2(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= 1)) && (strArray2.Length <= 26334.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_HY3(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(\d\d\s){2,25}\d\d";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HY3(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= 1)) && (strArray2.Length <= 26334.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_HY4(string Content, int PlayType)
            {
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                string pattern = @"(\d\d\s){3,21}\d\d";
                Regex regex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_HY4(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= 1)) && (strArray2.Length <= 26334.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            private string AnalyseScheme_Zhi(string Content, int PlayType)
            {
                string str2;
                string[] strArray = Content.Split(new char[] { '\n' });
                if (strArray == null)
                {
                    return "";
                }
                if (strArray.Length == 0)
                {
                    return "";
                }
                string str = "";
                if (PlayType == 0x1af5)
                {
                    str2 = @"(\d\d\s){4}\d\d";
                }
                else
                {
                    str2 = @"(\d\d\s){4,25}\d\d";
                }
                Regex regex = new Regex(str2, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                for (int i = 0; i < strArray.Length; i++)
                {
                    Match match = regex.Match(strArray[i]);
                    if (match.Success)
                    {
                        string canonicalNumber = "";
                        string[] strArray2 = this.ToSingle_Zhi(match.Value, ref canonicalNumber);
                        if (((strArray2 != null) && (strArray2.Length >= ((PlayType == 0x1af5) ? 1 : 2))) && (strArray2.Length <= 26334.0))
                        {
                            string str4 = str;
                            string[] strArray3 = new string[] { str4, canonicalNumber, "|", strArray2.Length.ToString(), "\n" };
                            str = string.Concat(strArray3);
                        }
                    }
                }
                if (str.EndsWith("\n"))
                {
                    str = str.Substring(0, str.Length - 1);
                }
                return str;
            }

            public override bool AnalyseWinNumber(string Number)
            {
                string canonicalNumber = "";
                string[] strArray = this.ToSingle_Zhi(Number, ref canonicalNumber);
                return ((strArray != null) && (strArray.Length == 1));
            }

            public override string BuildNumber(int Num)
            {
                Random random = new Random();
                StringBuilder builder = new StringBuilder();
                ArrayList al = new ArrayList();
                for (int i = 0; i < Num; i++)
                {
                    al.Clear();
                    for (int j = 0; j < 5; j++)
                    {
                        int ball = 0;
                        while ((ball == 0) || base.isExistBall(al, ball))
                        {
                            ball = random.Next(1, 0x17);
                        }
                        al.Add(ball.ToString().PadLeft(2, '0'));
                    }
                    Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                    al.Sort(comparer);
                    string str = "";
                    for (int k = 0; k < al.Count; k++)
                    {
                        str = str + al[k].ToString() + " ";
                    }
                    builder.Append(str.Trim() + "\n");
                }
                string str2 = builder.ToString();
                return str2.Substring(0, str2.Length - 1);
            }

            public override bool CheckPlayType(int play_type)
            {
                return ((play_type >= 0x1af5) && (play_type <= 0x1af9));
            }

            public override double ComputeWin(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, int PlayType, params double[] WinMoneyList)
            {
                if ((WinMoneyList == null) || (WinMoneyList.Length < 12))
                {
                    return -3.0;
                }
                if ((PlayType == 0x1af5) || (PlayType == 0x1af6))
                {
                    return this.ComputeWin_Zhi(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[0], WinMoneyList[1], WinMoneyList[2], WinMoneyList[3], WinMoneyList[4], WinMoneyList[5]);
                }
                if (PlayType == 0x1af7)
                {
                    return this.ComputeWin_HY2(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[6], WinMoneyList[7]);
                }
                if (PlayType == 0x1af8)
                {
                    return this.ComputeWin_HY3(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[8], WinMoneyList[9]);
                }
                if (PlayType == 0x1af9)
                {
                    return this.ComputeWin_HY4(Number, WinNumber, ref Description, ref WinMoneyNoWithTax, WinMoneyList[10], WinMoneyList[11]);
                }
                return -4.0;
            }

            private double ComputeWin_HY2(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HY2(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 5)
                            {
                                string[] strArray3 = new string[2];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num5 = 0;
                                bool flag = true;
                                for (int k = 0; k < 2; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num5++;
                                    }
                                }
                                if (flag && (num5 == 2))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好运二奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_HY3(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HY3(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 8)
                            {
                                string[] strArray3 = new string[3];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num5 = 0;
                                bool flag = true;
                                for (int k = 0; k < 3; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num5++;
                                    }
                                }
                                if (flag && (num5 == 3))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好运三奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_HY4(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                double num2 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_HY4(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 11)
                            {
                                string[] strArray3 = new string[4];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num5 = 0;
                                bool flag = true;
                                for (int k = 0; k < 4; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num5++;
                                    }
                                }
                                if (flag && (num5 == 4))
                                {
                                    num++;
                                    num2 += WinMoney1;
                                    WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "好运四奖" + num.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num2;
            }

            private double ComputeWin_Zhi(string Number, string WinNumber, ref string Description, ref double WinMoneyNoWithTax, double WinMoney1, double WinMoneyNoWithTax1, double WinMoney2, double WinMoneyNoWithTax2, double WinMoney3, double WinMoneyNoWithTax3)
            {
                WinNumber = WinNumber.Trim();
                if (WinNumber.Length < 14)
                {
                    return -1.0;
                }
                string[] strArray = base.SplitLotteryNumber(Number);
                if (strArray == null)
                {
                    return -2.0;
                }
                if (strArray.Length < 1)
                {
                    return -2.0;
                }
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                double num4 = 0.0;
                WinMoneyNoWithTax = 0.0;
                Description = "";
                for (int i = 0; i < strArray.Length; i++)
                {
                    string canonicalNumber = "";
                    string[] strArray2 = this.ToSingle_Zhi(strArray[i], ref canonicalNumber);
                    if ((strArray2 != null) && (strArray2.Length >= 1))
                    {
                        for (int j = 0; j < strArray2.Length; j++)
                        {
                            if (strArray2[j].Length >= 14)
                            {
                                string[] strArray3 = new string[5];
                                Match match = new Regex(@"(?<R0>\d\d\s)(?<R1>\d\d\s)(?<R2>\d\d\s)(?<R3>\d\d\s)(?<R4>\d\d)", RegexOptions.Compiled | RegexOptions.IgnoreCase).Match(strArray2[j]);
                                int num8 = 0;
                                bool flag = true;
                                for (int k = 0; k < 5; k++)
                                {
                                    strArray3[k] = match.Groups["R" + k.ToString()].ToString().Trim();
                                    if (strArray3[k] == "")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (WinNumber.IndexOf(strArray3[k]) >= 0)
                                    {
                                        num8++;
                                    }
                                }
                                if (flag)
                                {
                                    switch (num8)
                                    {
                                        case 5:
                                            num++;
                                            num4 += WinMoney1;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax1;
                                            break;

                                        case 4:
                                            num2++;
                                            num4 += WinMoney2;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax2;
                                            break;

                                        case 3:
                                            num3++;
                                            num4 += WinMoney3;
                                            WinMoneyNoWithTax += WinMoneyNoWithTax3;
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    Description = "一等奖" + num.ToString() + "注";
                }
                if (num2 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "二等奖" + num2.ToString() + "注";
                }
                if (num3 > 0)
                {
                    if (Description != "")
                    {
                        Description = Description + "，";
                    }
                    Description = Description + "三等奖" + num3.ToString() + "注";
                }
                if (Description != "")
                {
                    Description = Description + "。";
                }
                return num4;
            }

            private string[] FilterRepeated(string[] NumberPart)
            {
                ArrayList al = new ArrayList();
                for (int i = 0; i < NumberPart.Length; i++)
                {
                    int ball = _Convert.StrToInt(NumberPart[i], -1);
                    if (((ball >= 1) && (ball <= 0x16)) && !base.isExistBall(al, ball))
                    {
                        al.Add(NumberPart[i]);
                    }
                }
                Lottery.LotteryBase.CompareToAscii comparer = new Lottery.LotteryBase.CompareToAscii();
                al.Sort(comparer);
                string[] strArray = new string[al.Count];
                for (int j = 0; j < al.Count; j++)
                {
                    strArray[j] = al[j].ToString().PadLeft(2, '0');
                }
                return strArray;
            }

            public override Lottery.PlayType[] GetPlayTypeList()
            {
                return new Lottery.PlayType[] { new Lottery.PlayType(0x1af5, "单式"), new Lottery.PlayType(0x1af6, "复式"), new Lottery.PlayType(0x1af7, "好运2"), new Lottery.PlayType(0x1af8, "好运3"), new Lottery.PlayType(0x1af9, "好运4") };
            }

            public override string ShowNumber(string Number)
            {
                return base.ShowNumber(Number, "");
            }

            public override string[] ToSingle(string Number, ref string CanonicalNumber, int PlayType)
            {
                if ((PlayType == 0x1af5) || (PlayType == 0x1af6))
                {
                    return this.ToSingle_Zhi(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1af7)
                {
                    return this.ToSingle_HY2(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1af8)
                {
                    return this.ToSingle_HY3(Number, ref CanonicalNumber);
                }
                if (PlayType == 0x1af9)
                {
                    return this.ToSingle_HY4(Number, ref CanonicalNumber);
                }
                return null;
            }

            private string[] ToSingle_HY2(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 2)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 1); j++)
                {
                    for (int m = j + 1; m < length; m++)
                    {
                        list.Add(strArray[j] + " " + strArray[m]);
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_HY3(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 3)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 2); j++)
                {
                    for (int m = j + 1; m < (length - 1); m++)
                    {
                        for (int n = m + 1; n < length; n++)
                        {
                            list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n]);
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_HY4(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 4)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 3); j++)
                {
                    for (int m = j + 1; m < (length - 2); m++)
                    {
                        for (int n = m + 1; n < (length - 1); n++)
                        {
                            for (int num6 = n + 1; num6 < length; num6++)
                            {
                                list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6]);
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }

            private string[] ToSingle_Zhi(string Number, ref string CanonicalNumber)
            {
                string[] strArray = this.FilterRepeated(Number.Trim().Split(new char[] { ' ' }));
                CanonicalNumber = "";
                if (strArray.Length < 5)
                {
                    CanonicalNumber = "";
                    return null;
                }
                for (int i = 0; i < strArray.Length; i++)
                {
                    CanonicalNumber = CanonicalNumber + strArray[i] + " ";
                }
                CanonicalNumber = CanonicalNumber.Trim();
                ArrayList list = new ArrayList();
                int length = strArray.Length;
                for (int j = 0; j < (length - 4); j++)
                {
                    for (int m = j + 1; m < (length - 3); m++)
                    {
                        for (int n = m + 1; n < (length - 2); n++)
                        {
                            for (int num6 = n + 1; num6 < (length - 1); num6++)
                            {
                                for (int num7 = num6 + 1; num7 < length; num7++)
                                {
                                    list.Add(strArray[j] + " " + strArray[m] + " " + strArray[n] + " " + strArray[num6] + " " + strArray[num7]);
                                }
                            }
                        }
                    }
                }
                string[] strArray2 = new string[list.Count];
                for (int k = 0; k < list.Count; k++)
                {
                    strArray2[k] = list[k].ToString();
                }
                return strArray2;
            }
        }
    }
}

