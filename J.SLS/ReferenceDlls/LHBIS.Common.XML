<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LHBIS.Common</name>
    </assembly>
    <members>
        <member name="T:LHBIS.Common.Service.LHBISServiceAgent">
            <summary>
            Windows服务类，通过读取配置文件加载IRService列表，并控制所有服务运行或者停止
            </summary>
            <remarks>
            LHBISServiceAgent类为服务应该程序类，可以直接添加到Windows服务中，通过服务控件管理器(SCM)来实现启动服务，或者停止服务
            服务调用RServiceConfigurationSection对象获取配置文件中数据，并用Assembly反射创建实例来获得所胡服务对象以及ILogWriter写日志对象!
            </remarks>
            <example>
            ////配置文件用例：
            <configuration>
            <configSections>
            <section name="serviceSection" type="LHBIS.Common.Service.RServiceConfigurationSection,LHBIS.Common"/>
            </configSections>
            <serviceSection>
            <logWriter typeName="LHBIS.Common.Log.FileLogWriter" filePath="d:\\LHBIS.Common.dll"></logWriter>
            <services>
            <service typeName="LHBIS.Common.Service.RSiteActivtorServic" filePath="d:\\LHBIS.Common.dll"></service>
            </services>
            </serviceSection>
            </configuration>
            </example>
        </member>
        <member name="F:LHBIS.Common.Service.LHBISServiceAgent.CServiceName">
            <summary>
            winodows服务名称
            </summary>
        </member>
        <member name="F:LHBIS.Common.Service.LHBISServiceAgent.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="M:LHBIS.Common.Service.LHBISServiceAgent.#ctor">
            <summary>
            构造函数，实例化内部对象
            </summary>
        </member>
        <member name="M:LHBIS.Common.Service.LHBISServiceAgent.WriteExceptionLog(System.String,System.Exception)">
            <summary>
            写日志
            </summary>
            <param name="msg">错误信息</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:LHBIS.Common.Service.LHBISServiceAgent.OnStart(System.String[])">
            <summary>
            启动配置文件中的服务,读取名称为serviceSection的配置Section来实例化所有服务对象以及ILogWriter对象,重写基类OnStart方法
            </summary>
            <param name="args">外部传入的可变参数</param>
        </member>
        <member name="M:LHBIS.Common.Service.LHBISServiceAgent.ServiceStart(System.Object)">
            <summary>
            线程方法，调用IRService对象的Start方法
            </summary>
            <param name="obj">IRService对象</param>
        </member>
        <member name="M:LHBIS.Common.Service.LHBISServiceAgent.InitLogWriter(LHBIS.Common.Service.RServiceLogWriterElement)">
            <summary>
            根据RServiceLogWriterElement配置对象实例化ILogWriter对象,如果实例化失败,系统将自动赋值FileLogWriter对象给ILogWriter
            </summary>
            <param name="lwe">RServiceLogWriterElement配置</param>
        </member>
        <member name="M:LHBIS.Common.Service.LHBISServiceAgent.FillIRServiceList(LHBIS.Common.Service.RServiceCollection)">
            <summary>
            根据RServiceCollection对象实例化IRService对象，并将其添加到services集合中。如果实例化失败者则不添加到services集合中
            </summary>
            <param name="sc"></param>
        </member>
        <member name="M:LHBIS.Common.Service.LHBISServiceAgent.GetSectionFromConfig">
            <summary>
            读取名称为serviceSection的Section配置块，并返回RServiceConfigurationSection对象
            </summary>
            <returns>返回RServiceConfigurationSection对象,如果读取配置文件失败则返回null</returns>
        </member>
        <member name="M:LHBIS.Common.Service.LHBISServiceAgent.OnStop">
            <summary>
            停止所有开启的服务,重写基类的OnStop方法
            </summary>
        </member>
        <member name="P:LHBIS.Common.Service.LHBISServiceAgent.ServiceLogWriter">
            <summary>
            根据配置文件得到logWriter，如果没配置或者实例化出错，则生成一个FileLogWriter
            </summary>
        </member>
        <member name="T:LHBIS.Common.Log.RLogType">
            <summary>
            日志类型，日志按严重程度分成提示、警告和错误。
            </summary>
        </member>
        <member name="F:LHBIS.Common.Log.RLogType.Information">
            <summary>
            提示
            </summary>
        </member>
        <member name="F:LHBIS.Common.Log.RLogType.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:LHBIS.Common.Log.RLogType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:LHBIS.Common.Log.ILogWriter">
            <summary>
            日志记录器接口。提供系统日志记录的通用接口。
            </summary>
            <remarks>
            该接口提供将文本信息和异常信息进行记录的方法。文本信息包括信息类别、来源、日志类型、日志信息和详细描述，这些信息由使用者确定。
            异常包括分类、异常来源和要记录的异常对象。
            </remarks>    
        </member>
        <member name="M:LHBIS.Common.Log.ILogWriter.Write(System.String,System.String,LHBIS.Common.Log.RLogType,System.String,System.String)">
            <summary>
            将文本信息记入日志
            </summary>
            <param name="category">分类</param>
            <param name="source">来源</param>
            <param name="logType">类型</param>
            <param name="logMsg">日志信息</param>
            <param name="detail">详细信息</param>
        </member>
        <member name="M:LHBIS.Common.Log.ILogWriter.Write(System.String,System.String,System.Exception)">
            <summary>
            将一个异常记入日志
            </summary>
            <param name="category">分类</param>
            <param name="source">来源</param>
            <param name="exception">要记入日志的异常</param>
        </member>
        <member name="T:LHBIS.Security.Cryptography.LHBISRSAManaged">
            <summary>
            RSA加密算法
            </summary>
        </member>
        <member name="M:LHBIS.Security.Cryptography.LHBISRSAManaged.Encrypt(System.Byte[],System.String,System.Boolean)">
            <summary>
            加密数据
            </summary>
            <param name="data">将要加密的数据</param>
            <param name="keyXmlString">用于数据加密的密钥</param>
            <param name="isPublicKey">表明输入的密钥是否是公钥。如果为false，表示私钥</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.LHBISRSAManaged.Decrypt(System.Byte[],System.String,System.Boolean)">
            <summary>
            解密数据
            </summary>
            <param name="data">将要解密的数据</param>
            <param name="keyXmlString">用于解密的密钥</param>
            <param name="isPublicKey">表明输入的密钥是否是公钥。如果为false，表示私钥</param>
            <returns>解密后的数据</returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.LHBISRSAManaged.Encrypt(System.Byte[],LHBIS.Security.Cryptography.LHBISRSAPublicKey)">
            <summary>
            使用公钥加密
            </summary>
            <param name="data">将要加密的数据</param>
            <param name="publicKey">公钥</param>
            <returns>加密后的数据</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            当data数据为空，将会引发这个异常。
            </exception>
            <exception cref="!:RException (RErrorCode.InvalidPublicKey-0x00000010)">
            当publicKey数据为空，将会引发这个异常。
            </exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.LHBISRSAManaged.Decrypt(System.Byte[],LHBIS.Security.Cryptography.LHBISRSAPrivateKey)">
            <summary>
            使用私钥解密
            </summary>
            <param name="data">将要解密的数据</param>
            <param name="privateKey">私钥</param>
            <returns>解密后的数据</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            当data数据为空，将会引发这个异常。
            </exception>
            <exception cref="!:RException (RErrorCode.InvalidPrivateKey-0x00000011)">
            当privateKey数据为空，将会引发这个异常。
            </exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.LHBISRSAManaged.Encrypt(System.Byte[],LHBIS.Security.Cryptography.LHBISRSAPrivateKey)">
            <summary>
            使用私钥加密数据
            </summary>
            <param name="data">将要加密的数据</param>
            <param name="privateKey">私钥</param>
            <returns>加密后的数据</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            当data数据为空，将会引发这个异常。
            </exception>
            <exception cref="!:RException (RErrorCode.InvalidPrivateKey-0x00000011)">
            当privateKey数据为空，将会引发这个异常。
            </exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.LHBISRSAManaged.Decrypt(System.Byte[],LHBIS.Security.Cryptography.LHBISRSAPublicKey)">
            <summary>
            使用公钥解密数据
            </summary>
            <param name="data">将要解密的数据</param>
            <param name="publicKey">公钥</param>
            <returns>解密后的数据</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            当data数据为空，将会引发这个异常。
            </exception>
            <exception cref="!:RException (RErrorCode.InvalidPublicKey-0x00000010)">
            当publicKey数据为空，将会引发这个异常。
            </exception>
        </member>
        <member name="T:LHBIS.Security.Cryptography.LHBISRSAPublicKey">
            <summary>
            公钥类
            </summary>
        </member>
        <member name="M:LHBIS.Security.Cryptography.LHBISRSAPublicKey.FromXmlString(System.String)">
            <summary>
            从XML数据里获取LHBISRSAPublicKey类实例
            </summary>
            <param name="xmlString">XML数据</param>
            <returns>返回LHBISRSAPublicKey类实例,如果获取失败则返回null</returns>
        </member>
        <member name="T:LHBIS.Security.Cryptography.LHBISRSAPrivateKey">
            <summary>
            私钥类
            </summary>
        </member>
        <member name="M:LHBIS.Security.Cryptography.LHBISRSAPrivateKey.FromXmlString(System.String)">
            <summary>
            从XML数据里获取LHBISRSAPrivateKey类实例
            </summary>
            <param name="xmlString">XML数据</param>
            <returns>返回LHBISRSAPrivateKey类实例,如果获取失败则返回null</returns>
        </member>
        <member name="T:LHBIS.Common.File.FileData">
            <summary>
            表示一个文件，它包含名称、以字节数组存放的数据。这个类常和FileManager、Folder一起使用。
            FileData对应了计算机中的文件，而Folder对应了计算机中的文件夹，FileManager则管理二者。
            </summary>
        </member>
        <member name="F:LHBIS.Common.File.FileData._Data">
            <summary>
            私有字段存放文件数据
            </summary>
        </member>
        <member name="M:LHBIS.Common.File.FileData.GetData">
            <summary>
            获取FileData对象的数据,以字节数组形式提供。
            </summary>
            <returns>以字节数组形式提供的文件数据。</returns>
        </member>
        <member name="M:LHBIS.Common.File.FileData.SetData(System.Byte[])">
            <summary>
            将数据深拷贝到FileData对象,拷贝后原来的数据将不存在。
            </summary>
            <param name="data">拷贝到FileData对象的数据。</param>
        </member>
        <member name="M:LHBIS.Common.File.FileData.SetData(System.IO.Stream)">
            <summary>
            设置数据,从数据流读取数据到类的私有变量
            </summary>
            <param name="data">来源数据流</param>
        </member>
        <member name="M:LHBIS.Common.File.FileData.#ctor">
            <summary>
            构造函数,初始化类的变量
            </summary>
        </member>
        <member name="M:LHBIS.Common.File.FileData.#ctor(System.String,System.Byte[])">
            <summary>
            构造函数,初始化FileData对象的文件名称和数据。
            </summary>
            <param name="name">文件的名称</param>
            <param name="data">来源数据byte数组</param>
        </member>
        <member name="M:LHBIS.Common.File.FileData.#ctor(System.String,System.IO.Stream)">
            <summary>
            构造函数,初始化类的变量
            </summary>
            <param name="name">名称</param>
            <param name="data">从数据流中获取数据</param>
        </member>
        <member name="P:LHBIS.Common.File.FileData.Name">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="T:LHBIS.Net.Mail.TSmtpServerInfo">
            <summary>
            提供Smtp服务器的信息，主要是获取和设置Smtp服务器的一些基本信息
            </summary>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpServerInfo.#ctor">
            <summary>
            构造函数，默认：不要求使用安全连接(SSL)，需要身份验证，邮件发送方式为SmtpDeliveryMethod.Network，端口号为25。
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpServerInfo.Host">
            <summary>
            获取或设置Smtp服务器主机名
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpServerInfo.EnableSsl">
            <summary>
            获取或设置一个值，表明Smtp服务器是否要求使用安全连接(SSL)
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpServerInfo.NeedClientCredential">
            <summary>
            获取或设置一个值，表明Smtp服务器是否需要身份验证
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpServerInfo.DeliveryMethod">
            <summary>
            指定如何发送电子邮件，属性类型为枚举System.Net.Mail.SmtpDeliveryMethod
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpServerInfo.Password">
            <summary>
            获取或设置用于Smtp服务器身份验证的密码
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpServerInfo.UserName">
            <summary>
            获取或设置用于Smtp服务器身份验证的用户名
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpServerInfo.Port">
            <summary>
            获取或设置Smtp服务器端口号
            </summary>
        </member>
        <member name="T:LHBIS.Common.LHBISWCFNameSpace">
            <summary>
            定义LHBIS WCF服务的通用命名空间名称的常量
            </summary>
        </member>
        <member name="F:LHBIS.Common.LHBISWCFNameSpace.Common">
            <summary>
            通用命名空间
            </summary>
        </member>
        <member name="F:LHBIS.Common.LHBISWCFNameSpace.LogService">
            <summary>
            日志服务命名空间
            </summary>
        </member>
        <member name="F:LHBIS.Common.LHBISWCFNameSpace.MailService">
            <summary>
            邮件服务命名空间
            </summary>
        </member>
        <member name="T:LHBIS.Security.Cryptography.HashType">
            <summary>
            Hash算法类型枚举
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.HashType.htMD5">
            <summary>
            MD5哈希算法
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.HashType.htSHA1">
            <summary>
            SHA1哈希算法
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.HashType.htSHA256">
            <summary>
            SHA256哈希算法
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.HashType.htSHA384">
            <summary>
            SHA384哈希算法
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.HashType.htSHA512">
            <summary>
            SHA512哈希算法
            </summary>
        </member>
        <member name="T:LHBIS.Security.Cryptography.HashCode">
            <summary>
            提供.Net托管Hash算法的包装
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:LHBIS.Security.Cryptography.HashCode.#ctor(LHBIS.Security.Cryptography.HashType)">
            <summary>
            构造函数
            </summary>
            <param name="aht">Hash算法类型,HashType枚举</param>
        </member>
        <member name="M:LHBIS.Security.Cryptography.HashCode.ComputeHash(System.Byte[])">
            <summary>
            计算输入数据的Hash码
            </summary>
            <param name="bt">要对其计算Hash码的字节数组</param>
            <returns>返回以字节数组表示的Hash码</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            如果输入参数为null, 将会引发该异常.</exception>
            <exception cref="!:RException (RErrorCode.ComputeHashCodeFailed-0x0000001f)">
            当计算hash码失败时将会引发该异常.</exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.HashCode.ComputeHash(System.String)">
            <summary>
            计算输入数据的Hash码
            </summary>
            <param name="data">要对其计算Hash码的数据</param>
            <returns>返回以Base64格式表示的Hash码</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            如果输入参数为null, 将会引发该异常.</exception>
            <exception cref="!:RException (RErrorCode.ComputeHashCodeFailed-0x0000001f)">
            当计算hash码失败时将会引发该异常.</exception>
        </member>
        <member name="T:LHBIS.Security.Cryptography.BigInteger">
            <summary>
            表示大整数的类
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.BigInteger.maxLength">
            <summary>
            maximum length of the BigInteger in uint (4 bytes). change this to suit the required level of precision.
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.BigInteger.primesBelow2000">
             <summary>
            primes smaller than 2000 to test the generated prime number 
             </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.BigInteger.data">
            <summary>
            stores bytes from the Big Integer
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.BigInteger.dataLength">
            <summary>
            number of actual chars used
            </summary>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.#ctor">
            <summary>
            Constructor (Default value for BigInteger is 0
            </summary>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.#ctor(System.Int64)">
            <summary>
            Constructor (Default value provided by long)
            </summary>
            <param name="value">input value</param>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.#ctor(System.UInt64)">
            <summary>
            Constructor (Default value provided by ulong)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.#ctor(LHBIS.Security.Cryptography.BigInteger)">
            <summary>
            Constructor (Default value provided by BigInteger)
            </summary>
            <param name="bi"></param>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
            <param name="radix"></param>
            <exception cref="T:System.ArithmeticException"></exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.#ctor(System.Byte[])">
             <summary>
             Constructor (Default value provided by an array of bytes)
            
             The lowest index of the input byte array (i.e [0]) should contain the
             most significant byte of the number, and the highest index should
             contain the least significant byte.
            
             E.g.
             To initialize "a" with the default value of 0x1D4F in base 16
                  byte[] temp = { 0x1D, 0x4F };
                  BigInteger a = new BigInteger(temp)
            
             Note that this method of initialization does not allow the
             sign to be specified.
             </summary>
             <param name="inData"></param>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor (Default value provided by an array of bytes of the specified length.)
            </summary>
            <param name="inData"></param>
            <param name="inLen"></param>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.#ctor(System.UInt32[])">
            <summary>
            Constructor (Default value provided by an array of unsigned integers)
            </summary>
            <param name="inData"></param>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.op_Implicit(System.Int64)~LHBIS.Security.Cryptography.BigInteger">
            <summary>
            Overloading of the typecast operator.
            For BigInteger bi = 10;
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.op_Addition(LHBIS.Security.Cryptography.BigInteger,LHBIS.Security.Cryptography.BigInteger)">
            <summary>
            Overloading of addition operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.op_Increment(LHBIS.Security.Cryptography.BigInteger)">
             <summary>
            Overloading of the unary ++ operator 
             </summary>
             <param name="bi1"></param>
             <returns></returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.op_Subtraction(LHBIS.Security.Cryptography.BigInteger,LHBIS.Security.Cryptography.BigInteger)">
            <summary>
            Overloading of subtraction operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.op_Decrement(LHBIS.Security.Cryptography.BigInteger)">
            <summary>
             Overloading of the unary -- operator
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.op_Multiply(LHBIS.Security.Cryptography.BigInteger,LHBIS.Security.Cryptography.BigInteger)">
            <summary>
            Overloading of multiplication operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LHBIS.Security.Cryptography.BigInteger.op_LeftShift(LHBIS.Security.Cryptography.BigInteger,System.Int32)" -->
        <member name="M:LHBIS.Security.Cryptography.BigInteger.shiftLeft(System.UInt32[],System.Int32)">
             <summary>
            least significant bits at lower part of buffer 
             </summary>
             <param name="buffer"></param>
             <param name="shiftVal"></param>
             <returns></returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.BigInteger.op_RightShift(LHBIS.Security.Cryptography.BigInteger,System.Int32)">
            <summary>
            Overloading of unary >> operators
            </summary>
            <param name="bi1"></param>
            <param name="shiftVal"></param>
            <returns></returns>
        </member>
        <member name="T:LHBIS.Security.Cryptography.RSACrypt">
            <summary>
            提供RSA加密服务程序(RSACryptoServiceProvider)的包装,使用加密服务提供程序 (CSP) 提供的 RSA 算法的实现执行不对称加密和解密
            </summary>
            <remarks>
            不应该用此算法加密大数据。
            本类只是对.net提供的RSACryptoServiceProvider类的一个包装, 有关RSA加密算法,以及RSACryptoServiceProvider的相关信息,以及初次使用本类的人员, 请查阅MSDN上RSACryptoServiceProvider的资料
            </remarks>
        </member>
        <member name="M:LHBIS.Security.Cryptography.RSACrypt.Dispose">
            <summary>
            清空加密算法所占用的所有资源
            </summary>
        </member>
        <member name="M:LHBIS.Security.Cryptography.RSACrypt.DeleteKeyFromContainer(System.String)">
            <summary>
            从密钥容器中删除指定的密钥
            </summary>
            <param name="ContainerName">表示CspParameters 的密钥容器名称</param>
            <remarks>有关密钥容器的信息, 请查阅MSDN上相关资料</remarks>
        </member>
        <member name="M:LHBIS.Security.Cryptography.RSACrypt.#ctor">
            <summary>
            构造函数,以默认密钥大小初始化 RSACrypt 类的新实例。
            </summary>
            <remarks>
            该构造函数将创建一个新密钥
            </remarks>
        </member>
        <member name="M:LHBIS.Security.Cryptography.RSACrypt.#ctor(System.Int32)">
            <summary>
            使用指定的密钥大小初始化 RSACryptoServiceProvider 类的新实例。
            </summary>
            <param name="keySize">指定的密钥大小, 以位为单位</param>
            <exception cref="!:RException(RErrorCode.ArgmentesError-0x00000014)">
            当输入参数keySize的值必须大于等于0时引发该异常
            </exception>
            <exception cref="!:RException(RErrorCode.CreateTargetObjectFailed-0x0000001b)">
            当构建RSACrypt对象时内部产生异常将引发该异常
            </exception>
            <remarks>
            如果安装了 Microsoft Enhanced Cryptographic Provider，则 RSACryptoServiceProvider 支持长度从 384 位至 16384 位（增量为 8 位）的密钥。
            如果安装了 Microsoft Base Cryptographic Provider，则支持长度从 384 位至 512 位（增量为 8 位）的密钥。
            该构造函数将创建一个新密钥.
            </remarks>
        </member>
        <member name="M:LHBIS.Security.Cryptography.RSACrypt.GetXMLKeyString(System.Boolean)">
            <summary>
            获取当前实例的密钥的 XML 字符串
            </summary>
            <param name="includPrivateKey">该参数指示返回值中是否包含私钥，否则只返回公钥</param>
            <returns>包含当前 RSA 对象的密钥的 XML 字符串。</returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.RSACrypt.SetXMLKeyString(System.String)">
            <summary>
            设置密钥. 通过 XML 字符串中的密钥信息初始化对象
            </summary>
            <param name="keyxmlstring">包含 RSA 密钥信息的 XML 字符串。</param>
            <exception cref="!:RException(RErrorCode.NullReference-0x00000001)">
            当参数xmlString为空的时候将会引发该异常
            </exception>
            <exception cref="!:RException(RErrorCode.InvalidDataFormat-0x0000001c)">
            当参数xmlString的格式有误码的时候将会引发该异常
            </exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.RSACrypt.Decrypt(System.Byte[],System.Boolean)">
            <summary>
            使用RSA算法解密
            </summary>
            <param name="data">要解密的数据</param>
            <param name="fOAEP">如果为 true，则使用 OAEP 填充（仅在运行 Microsoft Windows XP 或更高版本的计算机上可用）执行直接的 RSA 加密；否则，如果为 false，则使用 PKCS#1 1.5 版填充。</param>
            <returns>解密后的数据</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            如果输入数据为空, 或者data的长度等于0将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.DecryptDataFailed-0x00000012)">
            出现以下情况将会引发该异常
            1.无法获取加密服务提供程序 (CSP)。
            2.当fOAEP为true时,data参数的长度大于构建该对象时传入的参数keySize时
            3.当fOAEP为true时,且不支持OAEP填充
            </exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.RSACrypt.Decrypt(System.String,System.Boolean)">
            <summary>
            使用RSA算法解密
            </summary>
            <param name="data">要解密的数据(Base64格式字符串)</param>
            <param name="fOAEP">如果为 true，则使用 OAEP 填充（仅在运行 Microsoft Windows XP 或更高版本的计算机上可用）执行直接的 RSA 加密；否则，如果为 false，则使用 PKCS#1 1.5 版填充。</param>
            <returns>解密后的数据(UTF8格式字符串)</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            如果输入数据为空, 或者data的长度等于0将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.DecryptDataFailed-0x00000012)">
            出现以下情况将会引发该异常
            1.无法获取加密服务提供程序 (CSP)。
            2.当fOAEP为true时,data参数的长度大于构建该对象时传入的参数keySize时
            3.当fOAEP为true时,且不支持OAEP填充
            </exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.RSACrypt.Encrypt(System.Byte[],System.Boolean)">
            <summary>
            使用RSA算法加密
            </summary>
            <param name="data">要加密的数据</param>
            <param name="fOAEP">如果为 true，则使用 OAEP 填充（仅在运行 Microsoft Windows XP 或更高版本的计算机上可用）执行直接的 RSA 加密；否则，如果为 false，则使用 PKCS#1 1.5 版填充。</param>
            <returns>加密后的数据</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            如果输入数据为空, 或者解密失败将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.DecryptDataFailed-0x00000012)">
            出现以下情况将会引发该异常
            1.无法获取加密服务提供程序 (CSP)。
            2.data参数的长度大于最大允许长度
            3.当fOAEP为true时,且不支持OAEP填充
            </exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.RSACrypt.Encrypt(System.String,System.Boolean)">
            <summary>
            使用RSA算法加密
            </summary>
            <param name="data">要加密的数据</param>
            <param name="fOAEP">如果为 true，则使用 OAEP 填充（仅在运行 Microsoft Windows XP 或更高版本的计算机上可用）执行直接的 RSA 加密；否则，如果为 false，则使用 PKCS#1 1.5 版填充。</param>
            <returns>加密后的数据(Base64格式字符串)</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            如果输入数据为空, 或者解密失败将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.DecryptDataFailed-0x00000012)">
            出现以下情况将会引发该异常
            1.无法获取加密服务提供程序 (CSP)。
            2.data参数的长度大于最大允许长度
            3.当fOAEP为true时,且不支持OAEP填充
            </exception>
        </member>
        <member name="T:LHBIS.Common.Log.FileLogWriter">
            <summary>
            文本文件日志记录器，实现了ILogWriter接口，提供将日志记录到文本文件的功能。
            </summary>
        </member>
        <member name="M:LHBIS.Common.Log.FileLogWriter.#ctor">
            <summary>
            构造函数.以默认文件名来创建对象的实例
            </summary>
        </member>
        <member name="M:LHBIS.Common.Log.FileLogWriter.#ctor(System.String)">
            <summary>
            构造函数. 以指定文件名来创建对象的实例
            </summary>
            <param name="fileName">要向其中追加内容的文件名</param>
        </member>
        <member name="M:LHBIS.Common.Log.FileLogWriter.AppendTextToFile(System.String)">
            <summary>
            将消息添加到日志文件
            </summary>
            <param name="text">消息内容</param>  
        </member>
        <member name="M:LHBIS.Common.Log.FileLogWriter.Write(System.String,System.String,LHBIS.Common.Log.RLogType,System.String,System.String)">
            <summary>
            将消息写入日志文件中，其中除日志类型须在定义的范围内之外，其余参数使用者可根据情况输入。
            </summary>
            <param name="category">分类</param>
            <param name="source">来源</param>
            <param name="logType">日志类型</param>
            <param name="logMsg">日志内容</param>
            <param name="detail">详细内容</param> 
            <exception cref="!:RException (RErrorCode.FileOrPathNameIsNull)"> 
            如果文件名为空或空串时, 将会引发该异常。 
            </exception>  
            <exception cref="!:RException (RErrorCode.CreateDirectoryFailed)"> 
            创建指定路径失败时引发该异常。 
            </exception>      
            <exception cref="!:RException (RErrorCode.WriteFileFailed)">  
            将消息写入文件失败时引发该异常。
            </exception>    
            <remarks>
            注意: 由于该方法执行不成功时将会引发异常, 因此对于调用者来说, 应将对该方法的调用置于try catch语句块中. 
            并且当异常产生时, 需要做适当的处理来消化该异常. 不要在不改变任何参数的情况下(如: 文件名)再次调用该方法, 以此来防止程序产生递归调用, 造成整个系统崩溃 
            </remarks>
        </member>
        <member name="M:LHBIS.Common.Log.FileLogWriter.Write(System.String,System.String,System.Exception)">
            <summary>
            将一个异常写入日志文件中。
            </summary>
            <param name="category">分类</param>
            <param name="source">来源</param>
            <param name="exception">要写入日志文件的异常.如果该异常为null, 将不记录任何信息</param> 
            <exception cref="!:RException (RErrorCode.FileOrPathNameIsNull)"> 
            如果文件名为空, 将会引发该异常 。 
            </exception>   
            <exception cref="!:RException (RErrorCode.CreateDirectoryFailed)">  
            创建指定路径失败时引发该异常。 
            </exception>   
            <exception cref="!:RException (RErrorCode.WriteFileFailed)">  
            将消息写入文件失败时引发该异常。
            </exception>   
            <remarks>
            注意: 由于该方法执行不成功时将会引发异常, 因此对于调用者来说, 应将对该方法的调用置于try catch语句块中. 
            并且当异常产生时, 需要做适当的处理来消化该异常. 不要在不改变任何参数的情况下(如: 文件名)再次调用该方法, 以此来防止程序产生递归调用, 造成整个系统崩溃 
            </remarks>
        </member>
        <member name="P:LHBIS.Common.Log.FileLogWriter.FileName">
             <summary>
            要向其中追加日志消息的文件的路径
             </summary>
        </member>
        <member name="T:LHBIS.Common.Service.IRService">
            <summary>
            提供由LHBIS.ServiceAgent服务程序启动和停止的通用服务程序接口。
            </summary>    
        </member>
        <member name="M:LHBIS.Common.Service.IRService.Start(LHBIS.Common.Log.ILogWriter)">
            <summary>
            启动服务. 
            </summary>
            <param name="logWriter">日志记录器. 当在服务内部需要进行日志记录时, 调用此记录器进行日志的记录。</param>        
        </member>
        <member name="M:LHBIS.Common.Service.IRService.Stop">
            <summary>
            停止服务, 并释放由服务启动后占用的所有资源
            </summary>
            <remarks>对于实现者, 该方法不应抛出任何异常. LHBIS.ServiceAgent在停止该服务时, 将始终认为该服务已被正常停止。 </remarks>
        </member>
        <member name="P:LHBIS.Common.Service.IRService.Name">
            <summary>
            获取服务名称
            </summary>
        </member>
        <member name="P:LHBIS.Common.Service.IRService.Description">
            <summary>
            获取服务的描述
            </summary>
        </member>
        <member name="T:LHBIS.Security.Cryptography.CryptType">
            <summary>
            对称加密算法类型
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.CryptType.DES">
            <summary>
            DES加密方式
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.CryptType.RC2">
            <summary>
            RC2加密方式
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.CryptType.Rijndael">
            <summary>
            Rijndael加密方式
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.CryptType.TripleDES">
            <summary>
            TripleDES加密方式
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.CryptType.AES">
            <summary>
            AES加密方式
            </summary>
        </member>
        <member name="T:LHBIS.Security.Cryptography.SymmetricCrypt">
            <summary>
            提供.Net自身的对称加密算法的包装
            </summary>
            <remarks>
            对称加密, 即私钥加密, 它使用单个私钥来加密和解密数据. 密钥由Key和IV对组成, Key和IV必须配对使用. 可调用SymmetricCrypt对象的GenKey方法获取密钥. 
            在使用本类进行加密/解密时, 必须确保加密/解密使用相同的加密算法和密钥, 同时也必须确保与产生密钥时的算法相同, 即:产生密钥->加密->解密这一完整的过程当中, 
            所使用的加密算法类型必须完全相同，加密->解密这一过程所使用的算法和密钥必须完全相同，否则不能保证达到预期的结果。 
            例：AES产生密钥->AES加密->AES解密，以此类推。
            </remarks>
            <example>
            SymmetricCrypt sa = new SymmetricCrypt(CryptType.RC2);
            string str = "abcdefg1023547986qweretyupoiumn";
            byte[] key;
            byte[] iv;
            //加密code
            sa.GenKey(out key, out iv);
            byte[] dbytes= sa.Encrypt(Encoding.ASCII.GetBytes(str), key, iv);
            //解密code
            SymmetricCrypt da=new SymmetricCrypt(CryptType.RC2);
            string s = Encoding.ASCII.GetString( da.Decrypt(dbytes, key, iv));
            </example>
        </member>
        <member name="M:LHBIS.Security.Cryptography.SymmetricCrypt.#ctor(LHBIS.Security.Cryptography.CryptType)">
            <summary>
            构造函数，确定用哪一种对称加密算法来初始化加密对象。
            </summary>
            <param name="ct">加密算法类型,CryptType枚举</param>
        </member>
        <member name="M:LHBIS.Security.Cryptography.SymmetricCrypt.GenKey(System.Byte[]@,System.Byte[]@)">
            <summary>
            生成用于SymmetricCrypt对象的随机密钥 (Key)与IV值。
            </summary>
            <param name="key">以out方式返回SymmetricCrypt对象生成的随机密钥key值</param>
            <param name="iv">以out方式返回SymmetricCrypt对象生成的随机IV值</param>
            <remarks>
            返回的密钥与IV值应当成对使用，否则不能产生正确的结果
            </remarks>
        </member>
        <member name="M:LHBIS.Security.Cryptography.SymmetricCrypt.GenKey(System.String@,System.String@)">
            <summary>
            生成用于SymmetricCrypt对象的随机密钥 (Key)与IV值。
            </summary>
            <param name="key">以out方式返回SymmetricCrypt对象生成的随机密钥key(base64格式字符串)值</param>
            <param name="iv">以out方式返回SymmetricCrypt对象生成的随机IV(base64格式字符串)值</param>
            <remarks>
            返回的密钥与IV值应当成对使用，否则不能产生正确的结果
            </remarks>
        </member>
        <member name="M:LHBIS.Security.Cryptography.SymmetricCrypt.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            用对称加密算法加密数据
            </summary>
            <param name="bts">要加密的明文数据,不能为空！</param>
            <param name="akey">对称算法的机密密钥（Key），不能为空。</param>
            <param name="aiv">对称算法的初始化向量 (IV)，不能为空。</param>
            <returns>返回加密后的密文数据</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            当输入数据bts,akey或者aiv为空时将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.InvalidKeyLength-0x0000001d)">
            当输入数据akey的长度不合法时将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.EncryptDataFailed-0x00000013)">
            当加密过程失败时将会引发该异常
            </exception>
            <remarks>
            输入值akey,aiv,必须采用调用GenKey方法获取密钥与IV值，否则不能保证加密的密文在解密的时候得到正确的结果。
            </remarks>
        </member>
        <member name="M:LHBIS.Security.Cryptography.SymmetricCrypt.Encrypt(System.String,System.String,System.String)">
            <summary>
            用对称加密算法加密数据
            </summary>
            <param name="str">要加密的明文数据,不能为空！</param>
            <param name="akey">对称算法的机密密钥（Key,Base64格式字符串），不能为空。</param>
            <param name="aiv">对称算法的初始化向量 (IV,Base64格式字符串)，不能为空。</param>
            <returns>返回加密后的密文数据(Base64格式字符串)</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            当输入数据str,akey或者aiv为空时将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.InvalidKeyLength-0x0000001d)">
            当输入数据akey的长度不合法时将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.EncryptDataFailed-0x00000013)">
            当加密过程失败时将会引发该异常
            </exception>
            <remarks>
            输入值akey,aiv,必须采用调用GenKey方法获取密钥与IV值，否则不能保证加密的密文在解密的时候得到正确的结果。
            </remarks>
        </member>
        <member name="M:LHBIS.Security.Cryptography.SymmetricCrypt.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            用对称加密算法解密数据
            </summary>
            <param name="bts">要解密的密文数据</param>
            <param name="akey">加密时所用到的对称算法的机密密钥（Key），不能为空。</param>
            <param name="aiv">加密时所用到的对称算法的初始化向量 (IV)，不能为空。</param>
            <returns>返回解密后的明文数据</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            当输入数据bts为空,akey为空或者aiv为空时将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.ArgmentesError-0x00000014)">
            当输入数据bts的长度等于0时将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.InvalidKeyLength-0x0000001d)">
            当输入数据akey的长度不合法时将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.DecryptDataFailed-0x00000012)">
            当输入数据bts为明文或者非法的密文以及akey的值无效时导致解密失败时将会引发该异常
            </exception>
            <remarks>
            输入值akey,aiv,必须为加密时调用GenKey方法所产生的密钥Key值与IV值，否则不能保证得到正确的结果。
            </remarks>
        </member>
        <member name="M:LHBIS.Security.Cryptography.SymmetricCrypt.Decrypt(System.String,System.String,System.String)">
            <summary>
            用对称加密算法解密数据
            </summary>
            <param name="str">要解密的密文数据(Base64格式字符串)</param>
            <param name="akey">加密时所用到的对称算法的机密密钥（Key,Bas64格式字符串），不能为空。</param>
            <param name="aiv">加密时所用到的对称算法的初始化向量 (IV,Bas64格式字符串)，不能为空。</param>
            <returns>返回解密后的明文数据(UTF8格式字符串)</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            当输入数据str为空,akey为空或者aiv为空时将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.ArgmentesError-0x00000014)">
            当输入数据str的长度等于0时将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.InvalidKeyLength-0x0000001d)">
            当输入数据akey的长度不合法时将会引发该异常
            </exception>
            <exception cref="!:RException (RErrorCode.DecryptDataFailed-0x00000012)">
            当输入数据bts为明文或者非法的密文以及akey的值无效时导致解密失败时将会引发该异常
            </exception>
            <remarks>
            输入值akey,aiv,必须为加密时调用GenKey方法所产生的密钥Key值与IV值，否则不能保证得到正确的结果。
            </remarks>
        </member>
        <member name="T:LHBIS.Security.Cryptography.HMACType">
            <summary>
            基于哈希的消息验证代码算法类型
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.HMACType.MD5">
            <summary>
            MD5加密方式
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.HMACType.RIPEMD160">
            <summary>
            RIPEMD160加密方式
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.HMACType.SHA1">
            <summary>
            SHA1加密方式
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.HMACType.SHA256">
            <summary>
            SHA256加密方式
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.HMACType.SHA384">
            <summary>
            SHA384加密方式
            </summary>
        </member>
        <member name="F:LHBIS.Security.Cryptography.HMACType.SHA512">
            <summary>
            SHA512加密方式
            </summary>
        </member>
        <member name="T:LHBIS.Security.Cryptography.HMACServiceProvider">
            <summary>
            基于哈希的消息验证代码服务程序
            </summary>
            <remarks>
            在发送方和接收方共享机密密钥的前提下，基于哈希的消息验证代码 (HMAC) 可用于确定通过不安全信道发送的消息是否已被篡改。
            发送方计算原始数据的哈希值，并将原始数据和 HMAC 放在一个消息中传送。接收方重新计算所接收消息的哈希值，检查计算所得的哈希值是否与传送的哈希值匹配。
            HMAC 在与共享密钥结合使用时，可以用于任意迭代加密哈希函数，如 MD5 或 SHA-1。HMAC 的加密强度取决于基础哈希函数的属性。
            因为更改消息和重新生成正确的哈希值需要密钥信息，所以对数据或哈希值的任何更改都会导致不匹配。因此，如果原始的哈希值与计算得出的哈希值相匹配，则消息通过身份验证。
            Created by HQ,2010/3/3
            </remarks>
            <example>
            //公共密钥
            byte[] key;
            //验证消息
            string orginStr="eewrtepofk,dsaf,rtf";
            //发送方:
            HMACServiceProvider hmac=new HMACServiceProvider(HMACType.MD5);
            key=hmac.GenKey();
            byte[] encrypt=hmac.ComputHash(Encoding.GetBytes(orginStr),key);
            
            //接收方:
            HMACServiceProvider hmac=new HMACServiceProvider(HMACType.MD5);
            byte[] encrypt=hmac.ComputHash(Encoding.GetBytes(orginStr),key);
            
            ///发送方与接收方共享密钥，从而比较加密后数据是否相等来验证是否为发送方发送出来的消息
            </example>
        </member>
        <member name="M:LHBIS.Security.Cryptography.HMACServiceProvider.Dispose">
            <summary>
            清空计算Hash码时所占用的所有资源
            </summary>
        </member>
        <member name="M:LHBIS.Security.Cryptography.HMACServiceProvider.#ctor(LHBIS.Security.Cryptography.HMACType)">
            <summary>
            构造函数，确定用哪一种Hash加密算法来初始化加密对象。
            </summary>
            <param name="hmactype">加密算法类型,HMACType枚举</param>
        </member>
        <member name="M:LHBIS.Security.Cryptography.HMACServiceProvider.GenKey">
            <summary>
            产生用于计算验证码的密钥
            </summary>
            <returns>返回随机生成的公共密钥</returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.HMACServiceProvider.GenStringKey">
            <summary>
            产生用于计算验证码的密钥（Base64格式字符串）
            </summary>
            <returns>返回随机生成的公共密钥（Base64格式字符串）</returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.HMACServiceProvider.ComputHash(System.Byte[],System.Byte[])">
            <summary>
            计算给定数据的验证码
            </summary>
            <param name="data">要计算验证码的字节数组</param>
            <param name="key">用于计算数据的公共密钥</param>
            <returns>返回以字节数组形式的验证码</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            如果输入数据为null, 将会引发该异常。</exception>
            <exception cref="!:RException (RErrorCode.ComputeHashCodeFailed-0x0000001f)">
            当计算hash码失败时将会引发该异常.</exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.HMACServiceProvider.ComputHash(System.String,System.String)">
            <summary>
            计算给定数据的验证码
            </summary>
            <param name="data">要计算验证码的数据</param>
            <param name="key">用于计算数据的公共密钥(Base64格式字符串)</param>
            <returns>返回Base64格式的验证码</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            如果输入数据为null, 将会引发该异常。</exception>
            <exception cref="!:RException (RErrorCode.ComputeHashCodeFailed-0x0000001f)">
            当计算hash码失败时将会引发该异常.</exception>
        </member>
        <member name="T:LHBIS.Common.Service.RSiteActivtorService">
            <summary>
            站点激活器，实现接口IRService。采用多线程并发(预设的是并发10个线程)请求网站请求,并且间隔60秒(预设)重复请求!
            </summary>
            <remarks>
            此服务会读取配置文件中的数据，获取保存有网站URL的文本路径。默认读取为appSettings里的LHBISSiteActiveFilename节点。当然你也可以自己设置节点名称,设置后更新AppsetingKey属性即可！
            </remarks>
            <example>
            ///配置文件用例:
            <add key="LHBISSiteActiveFilename" value="c:\abc.txt"></add>
            ///代码:
            RSiteActivtorServic act = new RSiteActivtorServic();
            act.AppsetingKey = "LHBISSiteActiveFilename";   //AppsetingKey默认值为:"LHBISSiteActiveFilename"
            FileLogWriter log = new FileLogWriter();
            act.Start(log);
            
            System.Threading.Thread.Sleep(20000);
            
            act.Stop();
            </example>
        </member>
        <member name="M:LHBIS.Common.Service.RSiteActivtorService.Start(LHBIS.Common.Log.ILogWriter)">
            <summary>
            启动服务
            </summary>
            <param name="logWriter">日志记录器</param>
        </member>
        <member name="M:LHBIS.Common.Service.RSiteActivtorService.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:LHBIS.Common.Service.RSiteActivtorService.WriteExceptionLog(System.String,System.Exception)">
            <summary>
            写日志
            </summary>
            <param name="msg">错误信息</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:LHBIS.Common.Service.RSiteActivtorService.DoWork">
             <summary>
             遍历list对象，获得各个站点的url地址
            定时向各个站点发送请求 
             </summary>
        </member>
        <member name="M:LHBIS.Common.Service.RSiteActivtorService.getURLList(System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            更新URL列表
            </summary>
            <param name="array">返回更新后的URL字典</param>
        </member>
        <member name="M:LHBIS.Common.Service.RSiteActivtorService.LoadUrlList">
            <summary>
            从保存有URL路径的文本文件中读取所有URL路径
            </summary>
            <returns>返回URL路径列表</returns>
        </member>
        <member name="P:LHBIS.Common.Service.RSiteActivtorService.Description">
            <summary>
            服务的描述
            </summary>
        </member>
        <member name="P:LHBIS.Common.Service.RSiteActivtorService.AppsettingKey">
            <summary>
            配置文件中appSetting的键，与此键相对应的是保存所有需要访问的URL文本文件的路径。默认为：LHBISSiteActiveFilename
            </summary>
            <remarks>
            保存URL的文本文件必须为UTF-8的格式，否则包含中文读取的时候会出现乱码。
            </remarks>
        </member>
        <member name="P:LHBIS.Common.Service.RSiteActivtorService.Name">
            <summary>
            服务的名称
            </summary>
        </member>
        <member name="T:LHBIS.Common.Service.RServiceLogWriterElement">
            <summary>
            RServiceLogWriterElement对象，它包含两个都个属性：DLL文件路径与完整的类型名称。通过反射来实例化对象。与配置文件中logWriter块相对应
            </summary>
            <example>
            ////配置文件:
            <logWriter typeName="System.string" filePath="c:\dll.dll"></logWriter>
            
            
            ///代码
            RServiceConfigurationSection section = new RServiceConfigurationSection();
            RServiceLogWriterElement logElement=new RServiceLogWriterElement();
            logElement.DllFilePath = "d:\\LHBIS.Common.dll";
            logElement.TypeName = "LHBIS.Common.Log.FileLogWriter";
            section.LogWriter = logElement;
            
            </example>
            <remarks>TypeName属性记录的是类实现于ILogWriter接口对象类型的FullName， 
            DllFilePath属性则记录的是类型所在的dll文件路径！</remarks>
        </member>
        <member name="P:LHBIS.Common.Service.RServiceLogWriterElement.TypeName">
            <summary>
            完整的类型名称
            </summary>
            <remarks>记录的是实现ILogWriter接口对象的FullName,否则不会调用该类型</remarks>
        </member>
        <member name="P:LHBIS.Common.Service.RServiceLogWriterElement.DllFilePath">
            <summary>
            DLL文件所在的路径
            </summary>
        </member>
        <member name="T:LHBIS.Common.Service.RServiceConfigurationSection">
            <summary>
            自定义配置Section块
            </summary>
            <remarks>
            此Section块包含1个logWriter节点，与1个services节点。其中services节点包含N个service节点。
            logWriter节点包含typeName与filePath两个属性。
            typeName记录的是类型的FullName并且该类型必须是实现于ILogWriter接口,
            filePath则记录的是类型所在的dll文件路径！
            
            service节点包含typeName与filePath两个属性。
            typeName记录的是类型的FullName并且该类型必须是实现于IRService接口,
            filePath则记录的是类型所在的dll文件路径！
            </remarks>
            <example>
            ////配置文件用例：
            <configuration>
            <configSections>
            <section name="serviceSection" type="LHBIS.Common.Service.RServiceConfigurationSection,LHBIS.Common"/>
            </configSections>
            <serviceSection>
            <logWriter typeName="LHBIS.Common.Log.FileLogWriter" filePath="d:\\LHBIS.Common.dll"></logWriter>
            <services>
            <service typeName="LHBIS.Common.Service.RSiteActivtorServic" filePath="d:\\LHBIS.Common.dll"></service>
            </services>
            </serviceSection>
            </configuration>
            
            ////从配置文件中读取信息来实例化RServiceConfigurationSection对象
            RServiceConfigurationSection ccs = ConfigurationManager.GetSection("serviceSection") as RServiceConfigurationSection;
            
            ///代码构建RServiceConfigurationSection对象，并将其保存到配置文件
            
            RServiceConfigurationSection section = new RServiceConfigurationSection();
            RServiceLogWriterElement logElement=new RServiceLogWriterElement();
            logElement.DllFilePath = "d:\\LHBIS.Common.dll";
            logElement.TypeName = "LHBIS.Common.Log.FileLogWriter";
            section.LogWriter = logElement;
            RServiceElement serviceElement = new RServiceElement();
            serviceElement.DllFilePath = "d:\\LHBIS.Common.dll";
            serviceElement.TypeName = "LHBIS.Common.Service.RSiteActivtorServic";
            section.Services.Add(serviceElement);
            
            Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
            config.Sections.Add("ServiceSection", section);
            config.Save();
            </example>
        </member>
        <member name="F:LHBIS.Common.Service.RServiceConfigurationSection.elementName_LogWirter">
            <summary>
            配置文件中LogWirter的节点名称
            </summary>
        </member>
        <member name="F:LHBIS.Common.Service.RServiceConfigurationSection.elementName_Services">
            <summary>
            配置文件中Services节点名称
            </summary>
        </member>
        <member name="P:LHBIS.Common.Service.RServiceConfigurationSection.LogWriter">
            <summary>
            RServiceLogWriterElement对象
            </summary>
        </member>
        <member name="P:LHBIS.Common.Service.RServiceConfigurationSection.Services">
            <summary>
            RServiceElement对象集合
            </summary>
        </member>
        <member name="T:LHBIS.Common.RErrorCode">
            <summary>
            提供基本的错误代码常量定义。
            </summary>
            <remarks>错误代码为一个32位无符号整数，其中最高字节表示各应用项目。最高字节值0x00-0x64为系统保留，各应用项目应从0x65开始</remarks>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.None">
            <summary>
            未定义。
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.NullReference">
            <summary>
            空引用
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.FileOrPathNameIsNull">
            <summary>
            文件或路径名为空
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.DirectoryNotFound">
            <summary>
            目录不存在
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.FileNotExists">
            <summary>
            文件不存在    
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.MailAddressIsNullOrEmpty">
            <summary>
            邮件地址为空
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidHexFormat">
            <summary>
            不合法的十六进制格式
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidBinaryFormat">
            <summary>
            不合法的二进制格式
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.NetworkError">
            <summary>
            网络错误
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidAuthCode">
            <summary>
            非法的认证码
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidMessage">
            <summary>
            错误的消息
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidURL">
            <summary>
            错误的URL
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidHashCode">
            <summary>
            错误的消息验证码
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidLicenseFile">
            <summary>
            非法的授权文件
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidLicense">
            <summary>
            无效的License
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidMailData">
            <summary>
            无效的邮件数据
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidPublicKey">
            <summary>
            无效的公钥
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidPrivateKey">
            <summary>
            无效的私钥
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.DecryptDataFailed">
            <summary>
            解密失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.EncryptDataFailed">
            <summary>
            加密失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.ArgmentesError">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.FileAccessError">
            <summary>
            文件访问错误
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.IOError">
            <summary>
            I/O错误
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.CreateDirectoryFailed">
            <summary>
            创建路径失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.WriteFileFailed">
            <summary>
            写文件失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.ReadFileFailed">
            <summary>
            读文件失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.ValueOverflow">
            <summary>
            数据溢出
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.CreateTargetObjectFailed">
            <summary>
            创建对象失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidDataFormat">
            <summary>
            非法数据格式
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidKeyLength">
            <summary>
            密钥长度无效
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidIVLength">
            <summary>
            初始化向量长度无效
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.ComputeHashCodeFailed">
            <summary>
            计算Hash码失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidTwentySixString">
            <summary>
            非法的26进制字符串
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.ValueLessThanOREqualZero">
            <summary>
            值小于等于0
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.SerializeObjectFailed">
            <summary>
            序列化对象失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.DeserializeObjectFailed">
            <summary>
            反序列化对象失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.CompressDataFailed">
            <summary>
            压缩数据失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.DeCompressDataFailed">
            <summary>
            解压数据失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.ValueLessThanZero">
            <summary>
            值小于0
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.CreateWebRequestFailed">
            <summary>
            创建WebRequest失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidMediaType">
            <summary>
            无效的资源文件类型
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidMailAddressFormat">
            <summary>
            邮件地址格式不正确
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.ContentIDRepetition">
            <summary>
            邮件资源ID重复
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.CommunicationError">
            <summary>
            通信出错
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.BytesToDataTableFail">
            <summary>
            Byte[]转DataTable失败
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.GetSchemaTableFailed">
            <summary>
            获取架构失败。
            </summary>
        </member>
        <member name="F:LHBIS.Common.RErrorCode.InvalidUri">
            <summary>
            无效Uri
            </summary>
        </member>
        <member name="T:LHBIS.Common.File.FileManager">
            <summary>
            表示FileData和Folder的管理器，它提供一些静态方法来对磁盘文件及文件夹进行打包或解包，打包就是将磁盘文件夹下的文件及子文件夹反序列化
            成一个Folder对象，并可将这个Folder对象保存成磁盘上的一个文件，解包就是将一个Folder对象所包含的文件夹及文件数据序列化到指定位置的磁盘保存起来。
            这个类常和FileData、Folder一起使用。FileData对应了计算机中的文件，而Folder对应了计算机中的文件夹。
            </summary>
            <example>
            string path = @"E:\RSDN";
            ///1.将指定路径的文件夹反序列化成Folder对象
            Folder folder = FileManager.LoadFolder(path);
            
            ///2.将Folder对象解析到指定路径
            string path2 = @"E:\RSDN2";
            FileManager.ExtractFolderToDirectory(path2, folder);
            
            ///3.将Folder对象保存为一个文件
            string filename = @"E:\FolderObject.folder";
            FileManager.SaveFolderToFile(filename, folder);
            
            ///4.将由Folder对象保存的文件加载到Folder对象
            Folder folder2 = FileManager.LoadFolderFromFile(filename);
            </example>
        </member>
        <member name="M:LHBIS.Common.File.FileManager.LoadFolder(System.String)">
            <summary>
            将一个文件夹下的所有文件及子文件夹加载到一个Folder对象中，这是一个反序列化的过程。
            这个方法与ExtractFolderToDirectory成互偶方法。
            </summary> 
            <param name="path">文件夹路径,例如path=@"E:\RSDN"</param>
            <returns>包含这个文件夹下的所有文件及子文件夹/文件数据的Folder对象</returns>  
            <exception cref="!:RException (RErrorCode.FileOrPathNameIsNull)"> 
            当文件名或路径为空或空串时,将会引发该异常。
            </exception>
            <exception cref="!:RException (RErrorCode.DirectoryNotFound)">  
            当指定的路径不存在时,将会引发该异常。 
            </exception>
            <exception cref="!:RException (RErrorCode.FileAccessError)">  
            当不能获取指定路径下的文件的名称时引发异常。 
            </exception> 
            <exception cref="!:RException (RErrorCode.ReadFileFailed)">  
            当不能读取指定路径下的文件的内容时引发异常。 
            </exception>
        </member>
        <member name="M:LHBIS.Common.File.FileManager.SaveFolderToFile(System.String,LHBIS.Common.File.Folder)">
            <summary>
            将一个文件夹对象Folder保存成一个独立的磁盘文件。这个方法与LoadFolderFromFile成互偶方法。
            </summary>
            <param name="fileName">文件名</param>
            <param name="folder">Folder对象</param> 
            <exception cref="!:RException (RErrorCode.FileOrPathNameIsNull)"> 
            当文件名为空或空串时将会引发该异常。 
            </exception>
            <exception cref="!:RException (RErrorCode.NullReference)">  
            当文件夹对象为空引用时引发该异常。 
            </exception>
            <exception cref="!:RException (RErrorCode.SerializeObjectFailed)">  
            当序列化文件夹对象失败时引发该异常。
            </exception>
        </member>
        <member name="M:LHBIS.Common.File.FileManager.ExtractFolderToDirectory(System.String,LHBIS.Common.File.Folder)">
            <summary>
            解析一个Folder对象，并将其包含的文件夹、子文件夹和文件保存到指定的路径下。
            这个方法与LoadFolder成互偶方法。
            </summary>
            <param name="path">Folder对象需要到的路径</param>
            <param name="folder">Folder对象</param> 
            <exception cref="!:RException (RErrorCode.FileOrPathNameIsNull)"> 
            当路径为空或空串时引发该异常。  
            </exception>
            <exception cref="!:RException (RErrorCode.NullReference)">  
            当文件夹对象为空时引发该异常。 
            </exception>
            <exception cref="!:RException (RErrorCode.CreateDirectoryFailed)">  
            当创建路径失败时引发该异常。 
            </exception>
            <exception cref="!:RException (RErrorCode.WriteFileFailed)">  
            当写文件失败时引发该异常。 
            </exception> 
        </member>
        <member name="M:LHBIS.Common.File.FileManager.LoadFolderFromFile(System.String)">
             <summary>
             从指定的文件中加载Folder对象，这个文件就是将一个文件夹打包成Folder对象，然后序列化到磁盘形成的。
             这个方法与SaveFolderToFile成互偶方法。
             </summary>
             <param name="fileName">文件名</param>
             <returns>Folder对象</returns> 
            <exception cref="!:RException(RErrorCode.FileOrPathNameIsNull)"> 
            当文件名为空或空串时引发该异常。   
            </exception>
            <exception cref="!:RException (RErrorCode.DeserializeObjectFailed)"> 
            当反序列化一个文件夹对象失败时引发该异常。
            </exception>
        </member>
        <member name="T:LHBIS.Security.Cryptography.Twenty6Convertor">
            <summary>
            提供26进制转换的类
            </summary>
            <remarks>
            所谓26进制, 指的是以英文字母的排列组合来表示某个整数值, 由于英文字母有26个字母, 从A-Z, 分别表示1-26, 逢26进1.
            它所表示的值是大于0的整数.
            </remarks>
        </member>
        <member name="M:LHBIS.Security.Cryptography.Twenty6Convertor.ConvertToString(System.Int32)">
            <summary>
            将一个整数转换为26进制的字符串
            </summary>
            <param name="v">要转换的值</param>
            <returns>字符串</returns>
            <exception cref="!:RException (RErrorCode.ValueLessThanOREqualZero-0x00000021)">
            当输入值小于1时,将会引发该异常.
            </exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.Twenty6Convertor.ConvertToDec(System.String)">
            <summary>
            将一个26进制的字符串转换为十进制整数
            </summary>
            <param name="s">要转换的值</param>
            <returns>整数</returns>
            <exception cref="!:RException (RErrorCode.InvalidTwentySixString-0x00000020)">
            如果输入值是不合法的26进制格式的字符串, 将会引发该异常
            </exception>
        </member>
        <member name="T:LHBIS.Common.RException">
            <summary>
            该类将Exception、自定义消息、错误代码封装后以自定义异常类的形式返回，所捕获的Exception及其派生Exception均被作为内部异常。
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:LHBIS.Common.RException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误信息和对作为此异常原因的内部异常的引用来初始化RException类的新实例。
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">导致当前异常的异常。</param>
        </member>
        <member name="M:LHBIS.Common.RException.#ctor(System.String)">
            <summary>
            使用指定错误信息来初始化RException类的新实例
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:LHBIS.Common.RException.#ctor(System.UInt32,System.String,System.Exception)">
            <summary>
            使用指定错误编码、错误信息和对作为此异常原因的内部异常的引用来初始化RException类的新实例。
            </summary>
            <param name="errorCode">当前异常的错误编码。</param>
            <param name="message">描述该错误的 String。</param>
            <param name="innerException">导致当前异常的异常。</param>
        </member>
        <member name="M:LHBIS.Common.RException.#ctor(System.UInt32,System.String)">
            <summary>
            使用指定错误编码、错误信息来初始化RException类的新实例。
            </summary>
            <param name="errorCode">错误代码</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:LHBIS.Common.RException.ToString">
            <summary>
            重写ToString方法. 该方法不会产生任何异常
            </summary>
            <returns>返回一个字符串，包含当前异常的详细信息，以及其所有InnerException的详细信息。</returns>
            <remarks>
            返回的字符串描述了这个异常的详细信息，以嵌套形式包装了此异常以及所有InnerException的明细消息。如：
            Type:RException
            ErrorCode:4004
            Message:错误信息
            Source:页面
                Type:ArgumentNullException
                ErrorCode:3942
                Message:参数为空
            </remarks>
        </member>
        <member name="M:LHBIS.Common.RException.AppendExceptionDetailMessage(System.Text.StringBuilder,System.Exception,System.Int32)">
            <summary>
            Appends the exception detail message.
            </summary>
            <param name="sb">The StringBuilder to be appended.</param>
            <param name="ex">The exception.</param>
            <param name="spaceNum">The space num.</param>
        </member>
        <member name="P:LHBIS.Common.RException.ErrorCode">
            <summary>
            错误编码。
                格式：以4个字节的无符号整数进行表达，并定义常量来表示；
                错误代码的第一个字节用以标识应用程序的代码，其它的3个字节由应用程序自己定义。
            </summary>
        </member>
        <member name="T:LHBIS.Common.Service.RServiceElement">
            <summary>
            Service服务对象,对应于配置文件中的service块。记录IRService对象的相关信息
            </summary>
            <example>
            ///配置文件：
            <service typeName="LHBIS.Common.Service.RSiteActivtorServic" filePath="d:\\LHBIS.Common.dll"></service>
            
            ///代码:
            RServiceConfigurationSection section = new RServiceConfigurationSection();
            RServiceElement serviceElement = new RServiceElement();
            serviceElement.DllFilePath = "d:\\LHBIS.Common.dll";
            serviceElement.TypeName = "LHBIS.Common.Service.RSiteActivtorServic";
            section.Services.Add(serviceElement);
            
            ///TypeName记录的是实现IRService接口对象的FullName
            </example>
        </member>
        <member name="F:LHBIS.Common.Service.RServiceElement.elementName_Type">
            <summary>
            配置文件中记录IRService对象类型的属性名
            </summary>
        </member>
        <member name="F:LHBIS.Common.Service.RServiceElement.elementName_FilePath">
            <summary>
            配置文件中记录DLL文件路径的属性名
            </summary>
        </member>
        <member name="P:LHBIS.Common.Service.RServiceElement.TypeName">
            <summary>
            对象的完整类型名称
            </summary>
            <remarks>记录的是实现IRService接口对象的FullName,否则不会调用该类型</remarks>
        </member>
        <member name="P:LHBIS.Common.Service.RServiceElement.DllFilePath">
            <summary>
            DLL文件所在的文件路径
            </summary>
        </member>
        <member name="T:LHBIS.Common.CompressionHelper">
            <summary>
            数据压缩/解压实用程序，提供对字节数组形式的数据的压缩/解压。算法使用Deflate。
            </summary>
            <remarks>
            Created by HQ, 2010/3/3
            </remarks>
        </member>
        <member name="M:LHBIS.Common.CompressionHelper.Compress(System.Byte[])">
            <summary>
            压缩数据。
            </summary>
            <param name="data">要进行压缩处理的数据,以字节数组形式提供。</param>
            <returns>返回经压缩后的数据,以字节数组形式返回。</returns>
            <exception cref="!:RException (RErrorCode.NullReference)">
            data为null将会引发该异常。
            </exception>
            <exception cref="!:RException (RErrorCode.CompressDataFailed)">
            压缩数据失败将会引发该异常。
            </exception>
        </member>
        <member name="M:LHBIS.Common.CompressionHelper.Decompress(System.Byte[])">
            <summary>
            解压缩数据
            </summary>
            <param name="data">要进行解压缩处理的数据,以字节数组形式提供。</param>
            <returns>经解压后的数据,以字节数组形式返回。</returns>
            <exception cref="!:RException (RErrorCode.NullReference)">
            data为null将会引发该异常。
            </exception>
            <exception cref="!:RException (RErrorCode.DeCompressDataFailed)">
            解压缩数据失败将会引发该异常。
            </exception>
        </member>
        <member name="T:LHBIS.Security.Cryptography.CommonConvert">
            <summary>
            提供一些公用的转换靜态方法
            </summary>    
            <remarks>Created by HQ, 2010/3/3</remarks>
        </member>
        <member name="M:LHBIS.Security.Cryptography.CommonConvert.StreamToBytes(System.IO.Stream)">
            <summary>
            将一个流中的数据转换为字节数组. 相当于Stream.ToArray()
            </summary>
            <param name="data">要进行转换的流</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.CommonConvert.ShiftLeft(System.Byte)">
            <summary>
            循环左移一位
            </summary>
            <param name="v">输入数据,byte类型</param>
            <returns>返回左称一位后的数据</returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.CommonConvert.ShiftRight(System.Byte)">
            <summary>
            循环右移一位
            </summary>
            <param name="v">输入数据,byte类型</param>
            <returns>返回右称一位后的数据</returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.CommonConvert.IsValidHexString(System.String)">
            <summary>
            判断指定字符串是不是合法的十六进制格式的字符串
            </summary>
            <param name="hexstr">字符串</param>
            <returns>如果输入参数是一个合法的十六进制格式的字符串,则返回true反之则为false</returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.CommonConvert.ToBinary(System.Byte[])">
            <summary>
            将一个字节数组转换为二进制格式表示的字符串
            </summary>
            <param name="buffer">要转换的数据</param>
            <returns>二进制格式表示的字符串,如果输入的数组为空则返回空字符串</returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.CommonConvert.ToHex(System.Byte[])">
            <summary>
            将一个字节数组转换为十六进制格式的字符串
            </summary>
            <param name="buffer">将要转换的数据</param>        
            <returns>十六进制格式的字符串，如果输入数组为null则返回空字符串</returns>        
        </member>
        <member name="M:LHBIS.Security.Cryptography.CommonConvert.IsValidBinaryString(System.String)">
            <summary>
            判断指定字符串是不是合法的二进制格式的字符串
            </summary>
            <param name="binstr">输入字符串</param>
            <returns>如果输入参数是一个合法的二进制格式的字符串, 则返回true反之则为false</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LHBIS.Security.Cryptography.CommonConvert.HexStrToBytes(System.String)" -->
        <member name="M:LHBIS.Security.Cryptography.CommonConvert.BinaryToBytes(System.String)">
            <summary>
            将一个二进制格式的字符串转换为字节数组
            </summary>
            <param name="str">二进制格式的字符串</param>
            <returns>字节数组</returns>
            <exception cref="!:RException (RErrorCode.InvalidHexFormat-0x00000006)">
            如果输入字符串为非法二进制字符串,将引发该异常.
            </exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.CommonConvert.ByteShift(System.Byte,System.Int32)">
            <summary>
            将一个字节循环左/右移指定的位数后返回
            </summary>
            <param name="v">要移位的字节</param>
            <param name="offset">移动位数. 当offset大于零时,向左移,否则向右移</param>
            <returns>参数循环左/右移指定位数后的值</returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.CommonConvert.CreateRNGKey(System.Int32)">
            <summary>
            产生经过加密的强随机值字符串
            </summary>
            <param name="len">产生的随机值的长度.该值不是函数返回结果的长度,而是内部产生随机数数组的长度.由于返回结果是以十六进制字符串返回, 所以最终返回结果的长度是该值的2倍</param>
            <returns>以十六进制形式表示的经过加密的强随机值字符串. 它的长度为len*2</returns>
        </member>
        <member name="M:LHBIS.Security.Cryptography.CommonConvert.To26String(System.Int32)">
            <summary>
            将一个整数值转换为26进制的形式
            </summary>
            <param name="v">大于0的整数</param>
            <returns>字符串</returns>
            <remarks>
            所谓26进制, 指的是以英文字母的排列组合来表示某个整数值, 由于英文字母有26个字母, 从A-Z, 分别表示1-26, 逢26进1.
            它所表示的值是大于0的整数.
            </remarks>
            <exception cref="!:RException (RErrorCode.ValueLessThanOREqualZero-0x00000021)">
            如果输入参数小于1,将会引发该异常</exception>
        </member>
        <member name="M:LHBIS.Security.Cryptography.CommonConvert.From26String(System.String)">
            <summary>
            将一个26进制字符串转换为十进制
            </summary>
            <param name="v">要转换的26进制字符串</param>
            <returns>整数</returns>
            <exception cref="!:RException (RErrorCode.NullReference-0x00000001)">
            如果输入字符串为空, 将会引发该异常。
            </exception>
        </member>
        <member name="T:LHBIS.Common.Service.RServiceCollection">
            <summary>
            RServiceElement对象集合类,与配置文件中services块相对应
            </summary>
            <example>
            ///配置文件:
            <services>
            <service typeName="LHBIS.Common.Service.RSiteActivtorServic" filePath="d:\\LHBIS.Common.dll"></service>
            </services>
            </example>
            <remarks>
            service节点包含typeName与filePath两个属性。
            typeName记录的是类型的FullName并且该类型必须是实现于IRService接口,
            filePath则记录的是类型所在的dll文件路径！
            </remarks>
        </member>
        <member name="M:LHBIS.Common.Service.RServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            获取RServiceElement的主键
            </summary>
            <param name="element">RServiceElement对象</param>
            <returns>返回RServiceElement对象的TypeName值。如果传入的不是RServiceElement对象，则返回null</returns>
        </member>
        <member name="M:LHBIS.Common.Service.RServiceCollection.CreateNewElement">
            <summary>
            创建一个新的集合对象,默认返回的是RServiceElement对象
            </summary>
            <returns>返回一个重新实例化的RServiceElement对象</returns>
        </member>
        <member name="M:LHBIS.Common.Service.RServiceCollection.Add(LHBIS.Common.Service.RServiceElement)">
            <summary>
            添加一个RServiceElement对象到集合
            </summary>
            <param name="se">RServiceElement对象</param>
            <remarks>
            其内部为key/value对，以RServiceElement对象的TypeName为Key。
            如果添加对象的TypeName存在，则会删除已存在的对象再添加新的对象到集合。
            </remarks>
        </member>
        <member name="M:LHBIS.Common.Service.RServiceCollection.Remove(LHBIS.Common.Service.RServiceElement)">
            <summary>
            从集合中删除RServiceElement对象
            </summary>
            <param name="se">RServiceElement对象</param>
        </member>
        <member name="P:LHBIS.Common.Service.RServiceCollection.CollectionType">
            <summary>
            集合类型
            </summary>
        </member>
        <member name="P:LHBIS.Common.Service.RServiceCollection.ElementName">
            <summary>
            RServiceElement对象相对应于配置文件中的节点名称
            </summary>
        </member>
        <member name="P:LHBIS.Common.Service.RServiceCollection.Item(System.Int32)">
            <summary>
            获取当前集合中下标index所对应的RServiceElement对象
            </summary>
            <param name="index">集合下标</param>
            <remarks>
            在赋值的时候，如果下标index所在的位置存在RServiceElement对象则先把该对象删除后再添加新的RServiceElement对象到集合中
            返回RServiceElement对象时,如果下标不存在者返回null
            </remarks>
        </member>
        <member name="T:LHBIS.Common.File.Folder">
            <summary>
            表示一个文件夹对象,包含文件夹的名称、文件列表及子文件夹。这个类常和FileData、FileManager一起使用。
            FileData对应了计算机中的文件，而Folder对应了计算机中的文件夹，FileManager则管理二者。
            </summary>
        </member>
        <member name="M:LHBIS.Common.File.Folder.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:LHBIS.Common.File.Folder.#ctor(System.String)">
            <summary>
            构造函数，需指定文件夹的名称。
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="P:LHBIS.Common.File.Folder.Name">
            <summary>
            文件夹的名称
            </summary>
        </member>
        <member name="P:LHBIS.Common.File.Folder.Files">
            <summary>
            文件夹下的文件列表。
            </summary>
        </member>
        <member name="P:LHBIS.Common.File.Folder.Subfolders">
            <summary>
            文件夹下的子文件夹列表。
            </summary>
        </member>
        <member name="T:LHBIS.Net.Mail.TSmtpClient">
            <summary>
            通过smtp进行邮件发送的类。通过该类，将邮件发送到指定的收件人。发送的邮件可以是文本方式或html格式；可以发送附件。
            </summary>    
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">true:消毁邮件内容;false:清空邮件内容</param>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="F:LHBIS.Net.Mail.TSmtpClient._msg">
            <summary>
            邮件内容主体
            </summary>        
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.SetSenderAddress(System.String,System.String)">
            <summary>
            设置邮件发送者的地址信息。发送者的e-mail地址不允许为空，如果为空，将会引发一个异常
            </summary>
            <param name="emailAddress">发送者的邮件地址</param>
            <param name="displayName">发送者的显示名称</param>
            <exception cref="!:RException(RErrorCode.MailAddressIsNullOrEmpty)">如果发件人地址为空将会引发该异常</exception>
            <exception cref="!:RException(InvalidMailAddressFormat)">如果地址格式不正确将会引发该异常</exception>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.AddRecipient(System.String,System.String)">
            <summary>
            添加一个邮件收件人地址。收件人的e-mail地址不允许为空，如果为空，将会引发一个异常
            </summary>
            <param name="emailAddress">收件人的邮件地址</param>
            <param name="displayName">收件人的显示名称</param>
            <returns>由收件人的邮件地址和收件人的显示名称构建的MailAddress对象</returns>
            <exception cref="!:RException(RErrorCode.MailAddressIsNullOrEmpty)">如果收信人地址为空将会引发该异常</exception>
            <exception cref="!:RException(InvalidMailAddressFormat)">如果地址格式不正确将会引发该异常</exception>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.AddCC(System.String,System.String)">
            <summary>
            添加一个邮件抄送人地址。抄送人的e-mail地址不允许为空，如果为空，将会引发一个异常
            </summary>
            <param name="emailAddress">抄送人的邮件地址</param>
            <param name="displayName">抄送人的显示名称</param>
            <returns>由抄送人的邮件地址和抄送人的显示名称构建的MailAddress对象</returns>
            <exception cref="!:RException(RErrorCode.MailAddressIsNullOrEmpty)">如果地址为空将会引发该异常</exception>
            <exception cref="!:RException(InvalidMailAddressFormat)">如果地址格式不正确将会引发该异常</exception>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.AddBcc(System.String,System.String)">
            <summary>
            添加一个邮件暗送人地址。暗送人的e-mail地址不允许为空，如果为空，将会引发一个异常
            </summary>
            <param name="emailAddress">暗送人的邮件地址</param>
            <param name="displayName">暗送人的显示名称</param>
            <returns>由暗送人的邮件地址和暗送人的显示名称构建的MailAddress对象</returns>
            <exception cref="!:RException(RErrorCode.MailAddressIsNullOrEmpty)">如果地址为空将会引发该异常</exception>
            <exception cref="!:RException(InvalidMailAddressFormat)">如果地址格式不正确将会引发该异常</exception>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.AddAttachment(System.IO.Stream,System.String)">
            <summary>
            添加一个附件
            </summary>
            <param name="stream">拥有附件内容的流</param>
            <param name="attachName">附件名称</param>
            <returns>新添加的附件</returns>
            <exception cref="T:LHBIS.Common.RException">
            (RErrorCode.NullReference-0x00000001)
            如果输入流为空,将会引发该异常
            </exception>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.AddAttachment(System.String)">
            <summary>
            将指定文件添加做为一个附件
            </summary>
            <param name="fileName">文件名</param>
            <returns>新添加的附件</returns>
            <exception cref="T:LHBIS.Common.RException">
            (RErrorCode.FileNotExists-0x00000004)
            如果指定的文件不存在,将会引发该异常。
            </exception>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.AddLinkedResource(System.String,System.IO.Stream,System.String)">
            <summary>
            当邮件做为HTML格式发送时，增加一个链接的本地资源，如图片。例如：当发送HTML格式的邮件时，这其中又有本地的图片链接，但又不准备把图片
            做为附件发送，而是要直接以网页的形式呈现出来时，我们可以在邮件正文中添加如下引用该图片的html代码<img src="cid:IMG0"/>....<img src="cid:IMG1"/>。
            注意img标签的src值,它所引用的内容即是通过本函数添加的内容。其中的IMG0、IMG1为本函数的参数contentID的值。使用AddLinkedResource添加的链接
            资源仅在按照html格式发送邮件时有效，实际就是把图片等资源直接以文本数据相同的方式发送，而不是通过附件。
            </summary>
            <param name="contentId">添加的链接资源的contentID，在资源集里应该是唯一的。</param>
            <param name="stream">添加的链接资源的内容</param>
            <param name="mediaType">添加的链接资源的类型，如:"Image/jpeg"</param>
            <returns>新添加的链接资源的引用</returns>
            <exception cref="!:RException(RErrorCode.NullReference)">如果输入流为空，或者链接资源的contentID为null或空串时,将会引发该异常。</exception>
            <exception cref="!:RException(RErrorCode.InvalidMediaType)">添加的资源类型无效时,将会引发该异常</exception>
            <exception cref="!:RException(RErrorCode.ContentIDRepetition)">如果输入流或者链接资源的contentID已经存在时,将会引发该异常。</exception>
            <remarks>mediaType为空或者空串时，不产生异常，链接资源默认类型为"application/octet-stream"</remarks>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.AddLinkedResource(System.String,System.String,System.String)">
            <summary>
            当邮件做为HTML格式发送时，增加一个链接的本地资源，如图片。例如：当发送HTML格式的邮件时，这其中又有本地的图片链接，但又不准备把图片
            做为附件发送，而是要直接以网页的形式呈现出来时，我们可以在邮件正文中添加如下引用该图片的html代码<img src="cid:IMG0"/>....<img src="cid:IMG1"/>。
            注意img标签的src值,它所引用的内容即是通过本函数添加的内容。其中的IMG0、IMG1为本函数的参数contentID的值。使用AddLinkedResource添加的链接
            资源仅在按照html格式发送邮件时有效，实际就是把图片等资源直接以文本数据相同的方式发送，而不是通过附件。
            </summary>
            <param name="contentId">添加的链接资源的contentID，在资源集里应该是唯一的。</param>
            <param name="fileName">要添加的链接资源的文件名</param>
            <param name="mediaType">添加的链接资源的类型，如:"Image/jpeg"</param>
            <returns>新添加的链接资源的引用</returns>
            <exception cref="!:RException(RErrorCode.InvalidMediaType)">添加的资源类型无效时,将会引发该异常</exception>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.AddLinkedImageResource(System.String,System.String)">
            <summary>
            添加一个图片文件做为链接资源。当邮件做为HTML格式发送时，增加一个链接的本地资源，如图片。例如：当发送HTML格式的邮件时，这其中又有本地的图片链接，但又不准备把图片
            做为附件发送，而是要直接以网页的形式呈现出来时，我们可以在邮件正文中添加如下引用该图片的html代码<img src="cid:IMG0"/>....<img src="cid:IMG1"/>。
            注意img标签的src值,它所引用的内容即是通过本函数添加的内容。其中的IMG0、IMG1为本函数的参数contentID的值。使用AddLinkedResource添加的链接
            资源仅在按照html格式发送邮件时有效，实际就是把图片等资源直接以文本数据相同的方式发送，而不是通过附件。
            </summary>
            <param name="fileName">图片文件名</param>
            <param name="contentId">添加的链接资源的contentID，在资源集里应该是唯一的。</param>
            <returns>新添加的链接资源的引用</returns>
            <exception cref="!:RException(RErrorCode.ReadFileFailed)">如果指定的文件不存在或者没有权限,将会引发该异常。</exception>
            <exception cref="!:RException(RErrorCode.NullReference)">链接资源的contentID为空或空串,将会引发该异常</exception>
            <exception cref="!:RException(RErrorCode.InvalidMediaType)">添加的资源类型无效时,将会引发该异常</exception>
            <exception cref="!:RException(RErrorCode.ContentIDRepetition)">如果输入流或者链接资源的contentID已经存在时,将会引发该异常。</exception>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.GetSmtpClient">
            <summary>
            获取按照当前SmtpServer设置的SmtpClient
            </summary>
            <returns>SmtpClient对象实例</returns>
            <exception cref="T:LHBIS.Common.RException">
            (RErrorCode.FileNotExists-0x00000028)
            如果Smpt服务器端口号小于0,将会引发该异常。
            </exception>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.PrepareMessage">
            <summary>
            准备要发送的邮件文本
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LHBIS.Net.Mail.TSmtpClient.Send" -->
        <!-- Badly formed XML comment ignored for member "M:LHBIS.Net.Mail.TSmtpClient.SendAsync(System.Object)" -->
        <member name="M:LHBIS.Net.Mail.TSmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            以异步方式发送时，在发送完成时处理的工作。
            </summary>
            <param name="e">AsyncCompletedEventArgs事件参数</param>
        </member>
        <member name="M:LHBIS.Net.Mail.TSmtpClient.OnSendCompletedHandler(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            处理异步发送邮件发送完成时的事件句柄
            </summary>
            <param name="sender">触发事件的控件</param>
            <param name="e">AsyncCompletedEventArgs事件参数</param>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpClient.SmtpServer">
            <summary>
            获取邮件发送的SMTP服务器的信息
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpClient.LinkedResources">
            <summary>
            获取链接资源列表
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpClient.Sender">
            <summary>
            获取邮件发送者地址信息
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpClient.Subject">
            <summary>
            获取或设置邮件的标题
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpClient.Body">
            <summary>
            获取或设置邮件内容正文
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpClient.IsBodyHtml">
            <summary>
            获取或设置一个值，该值表明该邮件内容是否为HTML格式
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpClient.To">
            <summary>
            获取邮件收件人列表
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpClient.CC">
            <summary>
            获取抄送人列表
            </summary>
        </member>
        <member name="P:LHBIS.Net.Mail.TSmtpClient.Bcc">
            <summary>
            获取暗送人列表
            </summary>
        </member>
        <member name="E:LHBIS.Net.Mail.TSmtpClient.SendCompleted">
            <summary>
            每次异步发送电子邮件时，在发送操作完成时引发 SendCompleted 事件
            </summary>
        </member>
    </members>
</doc>
